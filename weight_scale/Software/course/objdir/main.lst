   1               		.file	"main.cpp"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	__floatunsisf
  11               	.global	__divsf3
  12               	.global	__fixunssfsi
  13               	.global	__vector_19
  15               	__vector_19:
  16               	.LFB11:
  17               		.file 1 "main.cpp"
   1:main.cpp      **** #include <avr/io.h>
   2:main.cpp      **** #include <avr/interrupt.h>
   3:main.cpp      **** #include <avr/sleep.h>
   4:main.cpp      **** //#include <util/delay.h>
   5:main.cpp      **** #include <stdlib.h> //for itoa
   6:main.cpp      **** 
   7:main.cpp      **** #include "LCD.h"
   8:main.cpp      **** //#include "UART.h"
   9:main.cpp      **** #include "Programs.h"
  10:main.cpp      **** 
  11:main.cpp      **** #define BTN0 (PIND&(1<<4))
  12:main.cpp      **** #define BTN1 (PIND&(1<<5))
  13:main.cpp      **** 
  14:main.cpp      **** #define IRQ_STATE (PINE&(1<<7))
  15:main.cpp      **** 
  16:main.cpp      **** #define PWR_en_ON (PORTE|=(1<<5))
  17:main.cpp      **** #define PWR_en_OFF (PORTE&=~(1<<5))
  18:main.cpp      **** #define LoadCell_en_OFF (PORTE|=(1<<6))
  19:main.cpp      **** #define LoadCell_en_ON (PORTE&=~(1<<6))
  20:main.cpp      **** 
  21:main.cpp      **** #define BATT_CUTOUT 290
  22:main.cpp      **** #define BATT_EMPTY 300
  23:main.cpp      **** #define BATT_ONEBAR 310
  24:main.cpp      **** #define BATT_TWOBAR 320
  25:main.cpp      **** #define BATT_FULL 330
  26:main.cpp      **** 
  27:main.cpp      **** //UART uart;
  28:main.cpp      **** LCD myLCD=LCD(0);//Use 1 for lowest power LCD mode
  29:main.cpp      **** Program myProgram(&myLCD);
  30:main.cpp      **** 
  31:main.cpp      **** //Fuses -U lfuse:w:0xe2:m -U hfuse:w:0xd9:m -U efuse:w:0xfd:m 
  32:main.cpp      **** //Int RC osc, 6CK+65ms startup time
  33:main.cpp      **** //No Clock div by 8
  34:main.cpp      **** //Brown out detection enabled, 1.8V
  35:main.cpp      **** //For BoD at 2.7V, use Efuse=FB instead of FD
  36:main.cpp      **** 
  37:main.cpp      **** void writeTime(void);
  38:main.cpp      **** 
  39:main.cpp      **** volatile uint8_t loop_cnt=1;
  40:main.cpp      **** volatile uint8_t flags_state=0;
  41:main.cpp      **** volatile uint8_t btn0_state=BTN0;
  42:main.cpp      **** volatile uint8_t btn1_state=BTN1;
  43:main.cpp      **** volatile uint8_t btn0_pressDuration=0;
  44:main.cpp      **** volatile uint32_t total_time_ts=65535; // in tenths of second
  45:main.cpp      **** 
  46:main.cpp      **** int main(void){
  47:main.cpp      **** 	
  48:main.cpp      **** 	DDRD=0b11000000; 	//LED0, LED1 as outputs, BTN 0/1 as inputs
  49:main.cpp      **** 	PORTD=0b00110000;			//LED initial state:low, enable BTN pullups
  50:main.cpp      **** 	
  51:main.cpp      **** 	DDRE=0b01100011;//IRQ as input, LoadCell_en/PWR_en as outputs, TX as output, RX as input
  52:main.cpp      **** 	PORTE=0b10100000;//Enable IRQ pullup, set LoadCell_en/PWR_en to 1
  53:main.cpp      **** 	
  54:main.cpp      **** 	ADMUX|=(1<<REFS0)|0b11110;//Set AVCC as reference voltage for ADC, ADC MUX input to 1.1V BG
  55:main.cpp      **** 	ADCSRA|=(1<<ADEN)|(1<<ADIE)|(1<<ADPS1);//Enable conversion complete interrupt, Clock prescaler 12M
  56:main.cpp      **** 	PRR|=(1<<PRSPI)|(1<<PRUSART0);//Disable SPI and UART to save power
  57:main.cpp      **** 	
  58:main.cpp      **** #if (F_CPU==1000000)
  59:main.cpp      **** 	TCCR1B |=(1<<WGM12)|(1<<CS10)|(1<<CS11);// prescaler=clk/64, OCR1A is top.
  60:main.cpp      **** 	OCR1A=1662; // 8MHz/64 = 15620Hz -> COMPA_ISR every 100ms
  61:main.cpp      **** #else
  62:main.cpp      **** 	TCCR1B |=(1<<WGM12)|(1<<CS12);// prescaler=clk/256, OCR1A is top.
  63:main.cpp      **** 	OCR1A=3125; // 8MHz/256 = 31250Hz -> COMPA_ISR every 100ms
  64:main.cpp      **** #endif
  65:main.cpp      **** 	TIMSK1|=(1<<OCIE1A);
  66:main.cpp      **** 	
  67:main.cpp      **** 	
  68:main.cpp      **** 	myLCD.setDP(1);
  69:main.cpp      **** 	myLCD.setClk(1);
  70:main.cpp      **** 	myLCD.setBattery(LCD::FULL);
  71:main.cpp      **** 	
  72:main.cpp      **** 	while(--total_time_ts);
  73:main.cpp      **** 	
  74:main.cpp      **** 	btn0_state=BTN0;
  75:main.cpp      **** 	btn1_state=BTN1;
  76:main.cpp      **** 	LoadCell_en_OFF;
  77:main.cpp      **** 	sei();
  78:main.cpp      **** 	
  79:main.cpp      **** 	while(1){
  80:main.cpp      **** 	
  81:main.cpp      **** 		
  82:main.cpp      **** 
  83:main.cpp      **** 		if(BTN0!=btn0_state){
  84:main.cpp      **** 			btn0_state=BTN0;
  85:main.cpp      **** 			if(btn0_state){
  86:main.cpp      **** 				if(!myProgram.started){
  87:main.cpp      **** 					myProgram.selectedProgram++;
  88:main.cpp      **** 					if(myProgram.selectedProgram>=PGM_CNT)myProgram.selectedProgram=0;
  89:main.cpp      **** 				}
  90:main.cpp      **** 				loop_cnt=1;
  91:main.cpp      **** 			}
  92:main.cpp      **** 		}
  93:main.cpp      **** 		if(BTN1!=btn1_state){
  94:main.cpp      **** 			btn1_state=BTN1;
  95:main.cpp      **** 			if(btn1_state){
  96:main.cpp      **** 				LED1_Toggle;
  97:main.cpp      **** 				if(myProgram.started){
  98:main.cpp      **** 					myProgram.stop();
  99:main.cpp      **** 				}else{
 100:main.cpp      **** 					myProgram.start(total_time_ts);
 101:main.cpp      **** 				}
 102:main.cpp      **** 				loop_cnt=1;
 103:main.cpp      **** 			}
 104:main.cpp      **** 		}
 105:main.cpp      **** 		if(flags_state&0x01){
 106:main.cpp      **** 			flags_state&=~0x01;
 107:main.cpp      **** 			if(myProgram.started){
 108:main.cpp      **** 				myProgram.update(total_time_ts);
 109:main.cpp      **** 			}
 110:main.cpp      **** 			if(--loop_cnt==0){
 111:main.cpp      **** 				loop_cnt=9;
 112:main.cpp      **** 				LED1_ON;
 113:main.cpp      **** 				ADCSRA|=(1<<ADSC); //Start single ADC conversion
 114:main.cpp      **** 				writeTime();
 115:main.cpp      **** 				myProgram.show();
 116:main.cpp      **** 				LED0_OFF;
 117:main.cpp      **** 				LED1_OFF;
 118:main.cpp      **** 			}
 119:main.cpp      **** 			if(BTN0==0){
 120:main.cpp      **** 				btn0_pressDuration++;
 121:main.cpp      **** 				if(btn0_pressDuration>20)PWR_en_OFF;
 122:main.cpp      **** 			}else{
 123:main.cpp      **** 				btn0_pressDuration=0;
 124:main.cpp      **** 			}			
 125:main.cpp      **** 		}
 126:main.cpp      **** 		/*if(uart.isDataAvailable()){
 127:main.cpp      **** 			char *cmd=uart.retrieve();
 128:main.cpp      **** 			uart.sendString("Start verbose streaming",true);
 129:main.cpp      **** 		}*/
 130:main.cpp      **** 		ADCSRA&=~(1<<ADEN);//Disable ADC
 131:main.cpp      **** 		PRR|=(1<<PRSPI)|(1<<PRUSART0)|(1<<PRADC);//Shut down clock to Timer1, SPI, UART, ADC
 132:main.cpp      **** 		set_sleep_mode(SLEEP_MODE_IDLE);
 133:main.cpp      **** 		//set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 134:main.cpp      **** 		//set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 135:main.cpp      **** 		cli();
 136:main.cpp      **** 		if (1){
 137:main.cpp      **** 			sleep_enable();
 138:main.cpp      **** 			sei();
 139:main.cpp      **** 			sleep_cpu();
 140:main.cpp      **** 			sleep_disable();
 141:main.cpp      **** 		}
 142:main.cpp      **** 		PRR&=~(1<<PRADC);//Enable power to ADC, UART and SPI  again
 143:main.cpp      **** 		ADCSRA|=(1<<ADEN);//Enable ADC again
 144:main.cpp      **** 		sei();
 145:main.cpp      **** 	}
 146:main.cpp      **** 
 147:main.cpp      **** 	return 0;
 148:main.cpp      **** }
 149:main.cpp      **** 
 150:main.cpp      **** 
 151:main.cpp      **** 
 152:main.cpp      **** 
 153:main.cpp      **** ISR(ADC_vect){
  18               		.loc 1 153 0
  19               		.cfi_startproc
  20 0000 1F92      		push r1
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 3
  23               		.cfi_offset 1, -2
  24 0002 0F92      		push r0
  25               	.LCFI1:
  26               		.cfi_def_cfa_offset 4
  27               		.cfi_offset 0, -3
  28 0004 0FB6      		in r0,__SREG__
  29 0006 0F92      		push r0
  30 0008 1124      		clr __zero_reg__
  31 000a 2F93      		push r18
  32               	.LCFI2:
  33               		.cfi_def_cfa_offset 5
  34               		.cfi_offset 18, -4
  35 000c 3F93      		push r19
  36               	.LCFI3:
  37               		.cfi_def_cfa_offset 6
  38               		.cfi_offset 19, -5
  39 000e 4F93      		push r20
  40               	.LCFI4:
  41               		.cfi_def_cfa_offset 7
  42               		.cfi_offset 20, -6
  43 0010 5F93      		push r21
  44               	.LCFI5:
  45               		.cfi_def_cfa_offset 8
  46               		.cfi_offset 21, -7
  47 0012 6F93      		push r22
  48               	.LCFI6:
  49               		.cfi_def_cfa_offset 9
  50               		.cfi_offset 22, -8
  51 0014 7F93      		push r23
  52               	.LCFI7:
  53               		.cfi_def_cfa_offset 10
  54               		.cfi_offset 23, -9
  55 0016 8F93      		push r24
  56               	.LCFI8:
  57               		.cfi_def_cfa_offset 11
  58               		.cfi_offset 24, -10
  59 0018 9F93      		push r25
  60               	.LCFI9:
  61               		.cfi_def_cfa_offset 12
  62               		.cfi_offset 25, -11
  63 001a AF93      		push r26
  64               	.LCFI10:
  65               		.cfi_def_cfa_offset 13
  66               		.cfi_offset 26, -12
  67 001c BF93      		push r27
  68               	.LCFI11:
  69               		.cfi_def_cfa_offset 14
  70               		.cfi_offset 27, -13
  71 001e EF93      		push r30
  72               	.LCFI12:
  73               		.cfi_def_cfa_offset 15
  74               		.cfi_offset 30, -14
  75 0020 FF93      		push r31
  76               	.LCFI13:
  77               		.cfi_def_cfa_offset 16
  78               		.cfi_offset 31, -15
  79               	/* prologue: Signal */
  80               	/* frame size = 0 */
  81               	/* stack size = 15 */
  82               	.L__stack_usage = 15
 154:main.cpp      **** 	uint16_t ADC_val=ADCL;
  83               		.loc 1 154 0
  84 0022 6091 7800 		lds r22,120
  85               	.LVL0:
 155:main.cpp      **** 	ADC_val+=ADCH<<8;
  86               		.loc 1 155 0
  87 0026 8091 7900 		lds r24,121
  88               	.LVL1:
  89 002a 90E0      		ldi r25,0
  90 002c 982F      		mov r25,r24
  91 002e 8827      		clr r24
  92               	.LVL2:
  93 0030 680F      		add r22,r24
  94 0032 792F      		mov r23,r25
  95 0034 711D      		adc r23,__zero_reg__
 156:main.cpp      **** 	
 157:main.cpp      **** 	//CNT=1.1*1024/Vref
 158:main.cpp      **** 	//Vref=1.1*1024/CNT
 159:main.cpp      **** 	//1.02578
 160:main.cpp      **** 	//1.0127
 161:main.cpp      **** 	//
 162:main.cpp      **** 	uint32_t cnt=(109875.0)/ADC_val;// in tens of mV, i.e. 330=>3.30V
  96               		.loc 1 162 0
  97 0036 90E0      		ldi r25,0
  98 0038 80E0      		ldi r24,0
  99 003a 0E94 0000 		call __floatunsisf
 100               	.LVL3:
 101 003e 9B01      		movw r18,r22
 102 0040 AC01      		movw r20,r24
 103 0042 60E8      		ldi r22,lo8(-128)
 104 0044 79E9      		ldi r23,lo8(-103)
 105 0046 86ED      		ldi r24,lo8(-42)
 106 0048 97E4      		ldi r25,lo8(71)
 107 004a 0E94 0000 		call __divsf3
 108               	.LVL4:
 109 004e 0E94 0000 		call __fixunssfsi
 110               	.LVL5:
 163:main.cpp      **** 	if(cnt>=BATT_FULL){
 111               		.loc 1 163 0
 112 0052 6A34      		cpi r22,74
 113 0054 21E0      		ldi r18,1
 114 0056 7207      		cpc r23,r18
 115 0058 8105      		cpc r24,__zero_reg__
 116 005a 9105      		cpc r25,__zero_reg__
 117 005c 00F0      		brlo .L2
 164:main.cpp      **** 		myLCD.setBattery(LCD::FULL);
 118               		.loc 1 164 0
 119 005e 87E0      		ldi r24,lo8(7)
 120               	.L7:
 165:main.cpp      **** 	}else if(cnt>=BATT_TWOBAR){
 166:main.cpp      **** 		myLCD.setBattery(LCD::TWOBAR);
 167:main.cpp      **** 	}else if(cnt>=BATT_ONEBAR){
 168:main.cpp      **** 		myLCD.setBattery(LCD::ONEBAR);
 169:main.cpp      **** 	}else if(cnt>=BATT_EMPTY){
 170:main.cpp      **** 		myLCD.setBattery(LCD::EMPTY);
 171:main.cpp      **** 	}else{
 172:main.cpp      **** 		myLCD.setBattery(LCD::NONE);
 121               		.loc 1 172 0
 122 0060 0E94 0000 		call _ZN3LCD10setBatteryENS_7BatteryE
 123               	.LVL6:
 124               	/* epilogue start */
 173:main.cpp      **** 		//we should shutdown here
 174:main.cpp      **** 	}
 175:main.cpp      **** }
 125               		.loc 1 175 0
 126 0064 FF91      		pop r31
 127 0066 EF91      		pop r30
 128 0068 BF91      		pop r27
 129 006a AF91      		pop r26
 130 006c 9F91      		pop r25
 131 006e 8F91      		pop r24
 132 0070 7F91      		pop r23
 133 0072 6F91      		pop r22
 134 0074 5F91      		pop r21
 135 0076 4F91      		pop r20
 136 0078 3F91      		pop r19
 137 007a 2F91      		pop r18
 138 007c 0F90      		pop r0
 139 007e 0FBE      		out __SREG__,r0
 140 0080 0F90      		pop r0
 141 0082 1F90      		pop r1
 142 0084 1895      		reti
 143               	.LVL7:
 144               	.L2:
 165:main.cpp      **** 	}else if(cnt>=BATT_TWOBAR){
 145               		.loc 1 165 0
 146 0086 6034      		cpi r22,64
 147 0088 21E0      		ldi r18,1
 148 008a 7207      		cpc r23,r18
 149 008c 8105      		cpc r24,__zero_reg__
 150 008e 9105      		cpc r25,__zero_reg__
 151 0090 00F0      		brlo .L4
 166:main.cpp      **** 	}else if(cnt>=BATT_ONEBAR){
 152               		.loc 1 166 0
 153 0092 86E0      		ldi r24,lo8(6)
 154 0094 00C0      		rjmp .L7
 155               	.L4:
 167:main.cpp      **** 		myLCD.setBattery(LCD::ONEBAR);
 156               		.loc 1 167 0
 157 0096 6633      		cpi r22,54
 158 0098 21E0      		ldi r18,1
 159 009a 7207      		cpc r23,r18
 160 009c 8105      		cpc r24,__zero_reg__
 161 009e 9105      		cpc r25,__zero_reg__
 162 00a0 00F0      		brlo .L5
 168:main.cpp      **** 	}else if(cnt>=BATT_EMPTY){
 163               		.loc 1 168 0
 164 00a2 85E0      		ldi r24,lo8(5)
 165 00a4 00C0      		rjmp .L7
 166               	.L5:
 169:main.cpp      **** 		myLCD.setBattery(LCD::EMPTY);
 167               		.loc 1 169 0
 168 00a6 6C32      		cpi r22,44
 169 00a8 7140      		sbci r23,1
 170 00aa 8105      		cpc r24,__zero_reg__
 171 00ac 9105      		cpc r25,__zero_reg__
 172 00ae 00F0      		brlo .L6
 170:main.cpp      **** 	}else{
 173               		.loc 1 170 0
 174 00b0 81E0      		ldi r24,lo8(1)
 175 00b2 00C0      		rjmp .L7
 176               	.L6:
 172:main.cpp      **** 		//we should shutdown here
 177               		.loc 1 172 0
 178 00b4 80E0      		ldi r24,0
 179 00b6 00C0      		rjmp .L7
 180               		.cfi_endproc
 181               	.LFE11:
 183               	.global	__vector_7
 185               	__vector_7:
 186               	.LFB12:
 176:main.cpp      **** 
 177:main.cpp      **** ISR(TIMER1_COMPA_vect){//every 100ms
 187               		.loc 1 177 0
 188               		.cfi_startproc
 189 00b8 1F92      		push r1
 190               	.LCFI14:
 191               		.cfi_def_cfa_offset 3
 192               		.cfi_offset 1, -2
 193 00ba 0F92      		push r0
 194               	.LCFI15:
 195               		.cfi_def_cfa_offset 4
 196               		.cfi_offset 0, -3
 197 00bc 0FB6      		in r0,__SREG__
 198 00be 0F92      		push r0
 199 00c0 1124      		clr __zero_reg__
 200 00c2 2F93      		push r18
 201               	.LCFI16:
 202               		.cfi_def_cfa_offset 5
 203               		.cfi_offset 18, -4
 204 00c4 3F93      		push r19
 205               	.LCFI17:
 206               		.cfi_def_cfa_offset 6
 207               		.cfi_offset 19, -5
 208 00c6 4F93      		push r20
 209               	.LCFI18:
 210               		.cfi_def_cfa_offset 7
 211               		.cfi_offset 20, -6
 212 00c8 5F93      		push r21
 213               	.LCFI19:
 214               		.cfi_def_cfa_offset 8
 215               		.cfi_offset 21, -7
 216 00ca 6F93      		push r22
 217               	.LCFI20:
 218               		.cfi_def_cfa_offset 9
 219               		.cfi_offset 22, -8
 220 00cc 7F93      		push r23
 221               	.LCFI21:
 222               		.cfi_def_cfa_offset 10
 223               		.cfi_offset 23, -9
 224 00ce 8F93      		push r24
 225               	.LCFI22:
 226               		.cfi_def_cfa_offset 11
 227               		.cfi_offset 24, -10
 228 00d0 9F93      		push r25
 229               	.LCFI23:
 230               		.cfi_def_cfa_offset 12
 231               		.cfi_offset 25, -11
 232 00d2 AF93      		push r26
 233               	.LCFI24:
 234               		.cfi_def_cfa_offset 13
 235               		.cfi_offset 26, -12
 236 00d4 BF93      		push r27
 237               	.LCFI25:
 238               		.cfi_def_cfa_offset 14
 239               		.cfi_offset 27, -13
 240 00d6 EF93      		push r30
 241               	.LCFI26:
 242               		.cfi_def_cfa_offset 15
 243               		.cfi_offset 30, -14
 244 00d8 FF93      		push r31
 245               	.LCFI27:
 246               		.cfi_def_cfa_offset 16
 247               		.cfi_offset 31, -15
 248               	/* prologue: Signal */
 249               	/* frame size = 0 */
 250               	/* stack size = 15 */
 251               	.L__stack_usage = 15
 178:main.cpp      **** 	total_time_ts++;
 252               		.loc 1 178 0
 253 00da 8091 0000 		lds r24,total_time_ts
 254 00de 9091 0000 		lds r25,total_time_ts+1
 255 00e2 A091 0000 		lds r26,total_time_ts+2
 256 00e6 B091 0000 		lds r27,total_time_ts+3
 257 00ea 0196      		adiw r24,1
 258 00ec A11D      		adc r26,__zero_reg__
 259 00ee B11D      		adc r27,__zero_reg__
 260 00f0 8093 0000 		sts total_time_ts,r24
 261 00f4 9093 0000 		sts total_time_ts+1,r25
 262 00f8 A093 0000 		sts total_time_ts+2,r26
 263 00fc B093 0000 		sts total_time_ts+3,r27
 179:main.cpp      **** 	myProgram.myBeep.update();
 264               		.loc 1 179 0
 265 0100 80E0      		ldi r24,lo8(myProgram)
 266 0102 90E0      		ldi r25,hi8(myProgram)
 267 0104 0E94 0000 		call _ZN4Beep6updateEv
 268               	.LVL8:
 180:main.cpp      **** 	flags_state|=0x01;
 269               		.loc 1 180 0
 270 0108 8091 0000 		lds r24,flags_state
 271 010c 8160      		ori r24,lo8(1)
 272 010e 8093 0000 		sts flags_state,r24
 273               	/* epilogue start */
 181:main.cpp      **** }
 274               		.loc 1 181 0
 275 0112 FF91      		pop r31
 276 0114 EF91      		pop r30
 277 0116 BF91      		pop r27
 278 0118 AF91      		pop r26
 279 011a 9F91      		pop r25
 280 011c 8F91      		pop r24
 281 011e 7F91      		pop r23
 282 0120 6F91      		pop r22
 283 0122 5F91      		pop r21
 284 0124 4F91      		pop r20
 285 0126 3F91      		pop r19
 286 0128 2F91      		pop r18
 287 012a 0F90      		pop r0
 288 012c 0FBE      		out __SREG__,r0
 289 012e 0F90      		pop r0
 290 0130 1F90      		pop r1
 291 0132 1895      		reti
 292               		.cfi_endproc
 293               	.LFE12:
 295               	.global	_Z9writeTimev
 297               	_Z9writeTimev:
 298               	.LFB13:
 182:main.cpp      **** /*
 183:main.cpp      **** ISR(USART0_RX_vect){
 184:main.cpp      **** 	uart.receive();
 185:main.cpp      **** }*/
 186:main.cpp      **** 
 187:main.cpp      **** void writeTime(void){
 299               		.loc 1 187 0
 300               		.cfi_startproc
 301 0134 0F93      		push r16
 302               	.LCFI28:
 303               		.cfi_def_cfa_offset 3
 304               		.cfi_offset 16, -2
 305 0136 1F93      		push r17
 306               	.LCFI29:
 307               		.cfi_def_cfa_offset 4
 308               		.cfi_offset 17, -3
 309 0138 CF93      		push r28
 310               	.LCFI30:
 311               		.cfi_def_cfa_offset 5
 312               		.cfi_offset 28, -4
 313 013a DF93      		push r29
 314               	.LCFI31:
 315               		.cfi_def_cfa_offset 6
 316               		.cfi_offset 29, -5
 317               	/* prologue: function */
 318               	/* frame size = 0 */
 319               	/* stack size = 4 */
 320               	.L__stack_usage = 4
 188:main.cpp      **** 	uint8_t mins=total_time_ts/600;
 321               		.loc 1 188 0
 322 013c 6091 0000 		lds r22,total_time_ts
 323 0140 7091 0000 		lds r23,total_time_ts+1
 324 0144 8091 0000 		lds r24,total_time_ts+2
 325 0148 9091 0000 		lds r25,total_time_ts+3
 326 014c 28E5      		ldi r18,lo8(88)
 327 014e 32E0      		ldi r19,lo8(2)
 328 0150 40E0      		ldi r20,0
 329 0152 50E0      		ldi r21,0
 330 0154 0E94 0000 		call __udivmodsi4
 331 0158 C22F      		mov r28,r18
 332               	.LVL9:
 189:main.cpp      **** 	uint8_t secs=(total_time_ts/10)%60;
 333               		.loc 1 189 0
 334 015a 6091 0000 		lds r22,total_time_ts
 335 015e 7091 0000 		lds r23,total_time_ts+1
 336 0162 8091 0000 		lds r24,total_time_ts+2
 337 0166 9091 0000 		lds r25,total_time_ts+3
 338 016a 2AE0      		ldi r18,lo8(10)
 339 016c 30E0      		ldi r19,0
 340 016e 40E0      		ldi r20,0
 341 0170 50E0      		ldi r21,0
 342               	.LVL10:
 343 0172 0E94 0000 		call __udivmodsi4
 344 0176 CA01      		movw r24,r20
 345 0178 B901      		movw r22,r18
 346 017a 2CE3      		ldi r18,lo8(60)
 347 017c 30E0      		ldi r19,0
 348 017e 40E0      		ldi r20,0
 349 0180 50E0      		ldi r21,0
 350 0182 0E94 0000 		call __udivmodsi4
 351 0186 D62F      		mov r29,r22
 352 0188 062F      		mov r16,r22
 353               	.LVL11:
 190:main.cpp      **** 	if(mins>9){
 354               		.loc 1 190 0
 355 018a CA30      		cpi r28,lo8(10)
 356 018c 00F0      		brlo .L10
 191:main.cpp      **** 		myLCD.setDigit(0,mins/10);
 357               		.loc 1 191 0
 358 018e 8C2F      		mov r24,r28
 359 0190 6AE0      		ldi r22,lo8(10)
 360 0192 0E94 0000 		call __udivmodqi4
 361 0196 682F      		mov r22,r24
 362 0198 80E0      		ldi r24,0
 363 019a 0E94 0000 		call _ZN3LCD8setDigitEhh
 364               	.LVL12:
 365               	.L11:
 192:main.cpp      **** 	}else{
 193:main.cpp      **** 		myLCD.setDigit(0,LCD::Blank);
 194:main.cpp      **** 	}
 195:main.cpp      **** 	myLCD.setDigit(1,mins%10);
 366               		.loc 1 195 0
 367 019e 1AE0      		ldi r17,lo8(10)
 368 01a0 8C2F      		mov r24,r28
 369 01a2 612F      		mov r22,r17
 370 01a4 0E94 0000 		call __udivmodqi4
 371 01a8 692F      		mov r22,r25
 372 01aa 81E0      		ldi r24,lo8(1)
 373 01ac 0E94 0000 		call _ZN3LCD8setDigitEhh
 374               	.LVL13:
 196:main.cpp      **** 	myLCD.setDigit(2,secs/10);
 375               		.loc 1 196 0
 376 01b0 802F      		mov r24,r16
 377 01b2 612F      		mov r22,r17
 378 01b4 0E94 0000 		call __udivmodqi4
 379 01b8 C92F      		mov r28,r25
 380 01ba 682F      		mov r22,r24
 381 01bc 82E0      		ldi r24,lo8(2)
 382 01be 0E94 0000 		call _ZN3LCD8setDigitEhh
 383               	.LVL14:
 197:main.cpp      **** 	myLCD.setDigit(3,secs%10);
 384               		.loc 1 197 0
 385 01c2 6C2F      		mov r22,r28
 386 01c4 83E0      		ldi r24,lo8(3)
 387 01c6 0E94 0000 		call _ZN3LCD8setDigitEhh
 388               	.LVL15:
 198:main.cpp      **** 	myLCD.setClk(secs%2);
 389               		.loc 1 198 0
 390 01ca 8D2F      		mov r24,r29
 391 01cc 8170      		andi r24,lo8(1)
 392               	/* epilogue start */
 199:main.cpp      **** }
 393               		.loc 1 199 0
 394 01ce DF91      		pop r29
 395 01d0 CF91      		pop r28
 396 01d2 1F91      		pop r17
 397 01d4 0F91      		pop r16
 398               	.LVL16:
 198:main.cpp      **** 	myLCD.setClk(secs%2);
 399               		.loc 1 198 0
 400 01d6 0C94 0000 		jmp _ZN3LCD6setClkEb
 401               	.LVL17:
 402               	.L10:
 193:main.cpp      **** 	}
 403               		.loc 1 193 0
 404 01da 60E0      		ldi r22,0
 405 01dc 80E0      		ldi r24,0
 406 01de 0E94 0000 		call _ZN3LCD8setDigitEhNS_6SymbolE
 407               	.LVL18:
 408 01e2 00C0      		rjmp .L11
 409               		.cfi_endproc
 410               	.LFE13:
 412               		.section	.text.startup,"ax",@progbits
 413               	.global	main
 415               	main:
 416               	.LFB10:
  46:main.cpp      **** 	
 417               		.loc 1 46 0
 418               		.cfi_startproc
 419               	/* prologue: function */
 420               	/* frame size = 0 */
 421               	/* stack size = 0 */
 422               	.L__stack_usage = 0
  48:main.cpp      **** 	PORTD=0b00110000;			//LED initial state:low, enable BTN pullups
 423               		.loc 1 48 0
 424 0000 80EC      		ldi r24,lo8(-64)
 425 0002 8AB9      		out 0xa,r24
  49:main.cpp      **** 	
 426               		.loc 1 49 0
 427 0004 80E3      		ldi r24,lo8(48)
 428 0006 8BB9      		out 0xb,r24
  51:main.cpp      **** 	PORTE=0b10100000;//Enable IRQ pullup, set LoadCell_en/PWR_en to 1
 429               		.loc 1 51 0
 430 0008 83E6      		ldi r24,lo8(99)
 431 000a 8DB9      		out 0xd,r24
  52:main.cpp      **** 	
 432               		.loc 1 52 0
 433 000c 80EA      		ldi r24,lo8(-96)
 434 000e 8EB9      		out 0xe,r24
  54:main.cpp      **** 	ADCSRA|=(1<<ADEN)|(1<<ADIE)|(1<<ADPS1);//Enable conversion complete interrupt, Clock prescaler 12M
 435               		.loc 1 54 0
 436 0010 8091 7C00 		lds r24,124
 437 0014 8E65      		ori r24,lo8(94)
 438 0016 8093 7C00 		sts 124,r24
  55:main.cpp      **** 	PRR|=(1<<PRSPI)|(1<<PRUSART0);//Disable SPI and UART to save power
 439               		.loc 1 55 0
 440 001a 8091 7A00 		lds r24,122
 441 001e 8A68      		ori r24,lo8(-118)
 442 0020 8093 7A00 		sts 122,r24
  56:main.cpp      **** 	
 443               		.loc 1 56 0
 444 0024 8091 6400 		lds r24,100
 445 0028 8660      		ori r24,lo8(6)
 446 002a 8093 6400 		sts 100,r24
  59:main.cpp      **** 	OCR1A=1662; // 8MHz/64 = 15620Hz -> COMPA_ISR every 100ms
 447               		.loc 1 59 0
 448 002e 8091 8100 		lds r24,129
 449 0032 8B60      		ori r24,lo8(11)
 450 0034 8093 8100 		sts 129,r24
  60:main.cpp      **** #else
 451               		.loc 1 60 0
 452 0038 8EE7      		ldi r24,lo8(126)
 453 003a 96E0      		ldi r25,lo8(6)
 454 003c 9093 8900 		sts 136+1,r25
 455 0040 8093 8800 		sts 136,r24
  65:main.cpp      **** 	
 456               		.loc 1 65 0
 457 0044 8091 6F00 		lds r24,111
 458 0048 8260      		ori r24,lo8(2)
 459 004a 8093 6F00 		sts 111,r24
  68:main.cpp      **** 	myLCD.setClk(1);
 460               		.loc 1 68 0
 461 004e 81E0      		ldi r24,lo8(1)
 462 0050 0E94 0000 		call _ZN3LCD5setDPEb
 463               	.LVL19:
  69:main.cpp      **** 	myLCD.setBattery(LCD::FULL);
 464               		.loc 1 69 0
 465 0054 81E0      		ldi r24,lo8(1)
 466 0056 0E94 0000 		call _ZN3LCD6setClkEb
 467               	.LVL20:
  70:main.cpp      **** 	
 468               		.loc 1 70 0
 469 005a 87E0      		ldi r24,lo8(7)
 470 005c 0E94 0000 		call _ZN3LCD10setBatteryENS_7BatteryE
 471               	.LVL21:
 472               	.L13:
  72:main.cpp      **** 	
 473               		.loc 1 72 0
 474 0060 8091 0000 		lds r24,total_time_ts
 475 0064 9091 0000 		lds r25,total_time_ts+1
 476 0068 A091 0000 		lds r26,total_time_ts+2
 477 006c B091 0000 		lds r27,total_time_ts+3
 478 0070 0197      		sbiw r24,1
 479 0072 A109      		sbc r26,__zero_reg__
 480 0074 B109      		sbc r27,__zero_reg__
 481 0076 8093 0000 		sts total_time_ts,r24
 482 007a 9093 0000 		sts total_time_ts+1,r25
 483 007e A093 0000 		sts total_time_ts+2,r26
 484 0082 B093 0000 		sts total_time_ts+3,r27
 485 0086 892B      		or r24,r25
 486 0088 8A2B      		or r24,r26
 487 008a 8B2B      		or r24,r27
 488 008c 01F4      		brne .L13
  74:main.cpp      **** 	btn1_state=BTN1;
 489               		.loc 1 74 0
 490 008e 89B1      		in r24,0x9
 491 0090 8071      		andi r24,lo8(16)
 492 0092 8093 0000 		sts btn0_state,r24
  75:main.cpp      **** 	LoadCell_en_OFF;
 493               		.loc 1 75 0
 494 0096 89B1      		in r24,0x9
 495 0098 8072      		andi r24,lo8(32)
 496 009a 8093 0000 		sts btn1_state,r24
  76:main.cpp      **** 	sei();
 497               		.loc 1 76 0
 498 009e 769A      		sbi 0xe,6
  77:main.cpp      **** 	
 499               		.loc 1 77 0
 500               	/* #APP */
 501               	 ;  77 "main.cpp" 1
 502 00a0 7894      		sei
 503               	 ;  0 "" 2
  90:main.cpp      **** 			}
 504               		.loc 1 90 0
 505               	/* #NOAPP */
 506 00a2 C1E0      		ldi r28,lo8(1)
 111:main.cpp      **** 				LED1_ON;
 507               		.loc 1 111 0
 508 00a4 D9E0      		ldi r29,lo8(9)
 509               	.L32:
  83:main.cpp      **** 			btn0_state=BTN0;
 510               		.loc 1 83 0
 511 00a6 89B1      		in r24,0x9
 512 00a8 9091 0000 		lds r25,btn0_state
 513 00ac 8071      		andi r24,lo8(16)
 514 00ae 8917      		cp r24,r25
 515 00b0 01F0      		breq .L15
  84:main.cpp      **** 			if(btn0_state){
 516               		.loc 1 84 0
 517 00b2 89B1      		in r24,0x9
 518 00b4 8071      		andi r24,lo8(16)
 519 00b6 8093 0000 		sts btn0_state,r24
  85:main.cpp      **** 				if(!myProgram.started){
 520               		.loc 1 85 0
 521 00ba 8091 0000 		lds r24,btn0_state
 522 00be 8823      		tst r24
 523 00c0 01F0      		breq .L15
  86:main.cpp      **** 					myProgram.selectedProgram++;
 524               		.loc 1 86 0
 525 00c2 8091 0000 		lds r24,myProgram+2
 526 00c6 8111      		cpse r24,__zero_reg__
 527 00c8 00C0      		rjmp .L18
  87:main.cpp      **** 					if(myProgram.selectedProgram>=PGM_CNT)myProgram.selectedProgram=0;
 528               		.loc 1 87 0
 529 00ca 8091 0000 		lds r24,myProgram+1
 530 00ce 8F5F      		subi r24,lo8(-(1))
  88:main.cpp      **** 				}
 531               		.loc 1 88 0
 532 00d0 8530      		cpi r24,lo8(5)
 533 00d2 00F0      		brlo .+2
 534 00d4 00C0      		rjmp .L19
  87:main.cpp      **** 					if(myProgram.selectedProgram>=PGM_CNT)myProgram.selectedProgram=0;
 535               		.loc 1 87 0
 536 00d6 8093 0000 		sts myProgram+1,r24
 537               	.L18:
  90:main.cpp      **** 			}
 538               		.loc 1 90 0
 539 00da C093 0000 		sts loop_cnt,r28
 540               	.L15:
  93:main.cpp      **** 			btn1_state=BTN1;
 541               		.loc 1 93 0
 542 00de 89B1      		in r24,0x9
 543 00e0 9091 0000 		lds r25,btn1_state
 544 00e4 8072      		andi r24,lo8(32)
 545 00e6 8917      		cp r24,r25
 546 00e8 01F0      		breq .L22
  94:main.cpp      **** 			if(btn1_state){
 547               		.loc 1 94 0
 548 00ea 89B1      		in r24,0x9
 549 00ec 8072      		andi r24,lo8(32)
 550 00ee 8093 0000 		sts btn1_state,r24
  95:main.cpp      **** 				LED1_Toggle;
 551               		.loc 1 95 0
 552 00f2 8091 0000 		lds r24,btn1_state
 553 00f6 8823      		tst r24
 554 00f8 01F0      		breq .L22
  96:main.cpp      **** 				if(myProgram.started){
 555               		.loc 1 96 0
 556 00fa 8BB1      		in r24,0xb
 557 00fc 8058      		subi r24,lo8(-(-128))
 558 00fe 8BB9      		out 0xb,r24
  97:main.cpp      **** 					myProgram.stop();
 559               		.loc 1 97 0
 560 0100 8091 0000 		lds r24,myProgram+2
 561 0104 8823      		tst r24
 562 0106 01F4      		brne .+2
 563 0108 00C0      		rjmp .L24
  98:main.cpp      **** 				}else{
 564               		.loc 1 98 0
 565 010a 80E0      		ldi r24,lo8(myProgram)
 566 010c 90E0      		ldi r25,hi8(myProgram)
 567 010e 0E94 0000 		call _ZN7Program4stopEv
 568               	.LVL22:
 569               	.L25:
 102:main.cpp      **** 			}
 570               		.loc 1 102 0
 571 0112 C093 0000 		sts loop_cnt,r28
 572               	.L22:
 105:main.cpp      **** 			flags_state&=~0x01;
 573               		.loc 1 105 0
 574 0116 8091 0000 		lds r24,flags_state
 575 011a 80FF      		sbrs r24,0
 576 011c 00C0      		rjmp .L27
 106:main.cpp      **** 			if(myProgram.started){
 577               		.loc 1 106 0
 578 011e 8091 0000 		lds r24,flags_state
 579 0122 8E7F      		andi r24,lo8(-2)
 580 0124 8093 0000 		sts flags_state,r24
 107:main.cpp      **** 				myProgram.update(total_time_ts);
 581               		.loc 1 107 0
 582 0128 8091 0000 		lds r24,myProgram+2
 583 012c 8823      		tst r24
 584 012e 01F0      		breq .L28
 108:main.cpp      **** 			}
 585               		.loc 1 108 0
 586 0130 4091 0000 		lds r20,total_time_ts
 587 0134 5091 0000 		lds r21,total_time_ts+1
 588 0138 6091 0000 		lds r22,total_time_ts+2
 589 013c 7091 0000 		lds r23,total_time_ts+3
 590 0140 80E0      		ldi r24,lo8(myProgram)
 591 0142 90E0      		ldi r25,hi8(myProgram)
 592 0144 0E94 0000 		call _ZN7Program6updateEm
 593               	.LVL23:
 594               	.L28:
 110:main.cpp      **** 				loop_cnt=9;
 595               		.loc 1 110 0
 596 0148 8091 0000 		lds r24,loop_cnt
 597 014c 8150      		subi r24,lo8(-(-1))
 598 014e 8093 0000 		sts loop_cnt,r24
 599 0152 8111      		cpse r24,__zero_reg__
 600 0154 00C0      		rjmp .L29
 111:main.cpp      **** 				LED1_ON;
 601               		.loc 1 111 0
 602 0156 D093 0000 		sts loop_cnt,r29
 112:main.cpp      **** 				ADCSRA|=(1<<ADSC); //Start single ADC conversion
 603               		.loc 1 112 0
 604 015a 5F9A      		sbi 0xb,7
 113:main.cpp      **** 				writeTime();
 605               		.loc 1 113 0
 606 015c 8091 7A00 		lds r24,122
 607 0160 8064      		ori r24,lo8(64)
 608 0162 8093 7A00 		sts 122,r24
 114:main.cpp      **** 				myProgram.show();
 609               		.loc 1 114 0
 610 0166 0E94 0000 		call _Z9writeTimev
 611               	.LVL24:
 115:main.cpp      **** 				LED0_OFF;
 612               		.loc 1 115 0
 613 016a 80E0      		ldi r24,lo8(myProgram)
 614 016c 90E0      		ldi r25,hi8(myProgram)
 615 016e 0E94 0000 		call _ZN7Program4showEv
 616               	.LVL25:
 116:main.cpp      **** 				LED1_OFF;
 617               		.loc 1 116 0
 618 0172 5E98      		cbi 0xb,6
 117:main.cpp      **** 			}
 619               		.loc 1 117 0
 620 0174 5F98      		cbi 0xb,7
 621               	.L29:
 119:main.cpp      **** 				btn0_pressDuration++;
 622               		.loc 1 119 0
 623 0176 4C99      		sbic 0x9,4
 624 0178 00C0      		rjmp .L30
 120:main.cpp      **** 				if(btn0_pressDuration>20)PWR_en_OFF;
 625               		.loc 1 120 0
 626 017a 8091 0000 		lds r24,btn0_pressDuration
 627 017e 8F5F      		subi r24,lo8(-(1))
 628 0180 8093 0000 		sts btn0_pressDuration,r24
 121:main.cpp      **** 			}else{
 629               		.loc 1 121 0
 630 0184 8091 0000 		lds r24,btn0_pressDuration
 631 0188 8531      		cpi r24,lo8(21)
 632 018a 00F0      		brlo .L27
 121:main.cpp      **** 			}else{
 633               		.loc 1 121 0 is_stmt 0 discriminator 1
 634 018c 7598      		cbi 0xe,5
 635               	.L27:
 130:main.cpp      **** 		PRR|=(1<<PRSPI)|(1<<PRUSART0)|(1<<PRADC);//Shut down clock to Timer1, SPI, UART, ADC
 636               		.loc 1 130 0 is_stmt 1
 637 018e 8091 7A00 		lds r24,122
 638 0192 8F77      		andi r24,lo8(127)
 639 0194 8093 7A00 		sts 122,r24
 131:main.cpp      **** 		set_sleep_mode(SLEEP_MODE_IDLE);
 640               		.loc 1 131 0
 641 0198 8091 6400 		lds r24,100
 642 019c 8760      		ori r24,lo8(7)
 643 019e 8093 6400 		sts 100,r24
 132:main.cpp      **** 		//set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 644               		.loc 1 132 0
 645 01a2 83B7      		in r24,0x33
 646 01a4 817F      		andi r24,lo8(-15)
 647 01a6 83BF      		out 0x33,r24
 135:main.cpp      **** 		if (1){
 648               		.loc 1 135 0
 649               	/* #APP */
 650               	 ;  135 "main.cpp" 1
 651 01a8 F894      		cli
 652               	 ;  0 "" 2
 137:main.cpp      **** 			sei();
 653               		.loc 1 137 0
 654               	/* #NOAPP */
 655 01aa 83B7      		in r24,0x33
 656 01ac 8160      		ori r24,lo8(1)
 657 01ae 83BF      		out 0x33,r24
 138:main.cpp      **** 			sleep_cpu();
 658               		.loc 1 138 0
 659               	/* #APP */
 660               	 ;  138 "main.cpp" 1
 661 01b0 7894      		sei
 662               	 ;  0 "" 2
 139:main.cpp      **** 			sleep_disable();
 663               		.loc 1 139 0
 664               	 ;  139 "main.cpp" 1
 665 01b2 8895      		sleep
 666               		
 667               	 ;  0 "" 2
 140:main.cpp      **** 		}
 668               		.loc 1 140 0
 669               	/* #NOAPP */
 670 01b4 83B7      		in r24,0x33
 671 01b6 8E7F      		andi r24,lo8(-2)
 672 01b8 83BF      		out 0x33,r24
 142:main.cpp      **** 		ADCSRA|=(1<<ADEN);//Enable ADC again
 673               		.loc 1 142 0
 674 01ba 8091 6400 		lds r24,100
 675 01be 8E7F      		andi r24,lo8(-2)
 676 01c0 8093 6400 		sts 100,r24
 143:main.cpp      **** 		sei();
 677               		.loc 1 143 0
 678 01c4 8091 7A00 		lds r24,122
 679 01c8 8068      		ori r24,lo8(-128)
 680 01ca 8093 7A00 		sts 122,r24
 144:main.cpp      **** 	}
 681               		.loc 1 144 0
 682               	/* #APP */
 683               	 ;  144 "main.cpp" 1
 684 01ce 7894      		sei
 685               	 ;  0 "" 2
  83:main.cpp      **** 			btn0_state=BTN0;
 686               		.loc 1 83 0
 687               	/* #NOAPP */
 688 01d0 00C0      		rjmp .L32
 689               	.L19:
  88:main.cpp      **** 				}
 690               		.loc 1 88 0 discriminator 1
 691 01d2 1092 0000 		sts myProgram+1,__zero_reg__
 692 01d6 00C0      		rjmp .L18
 693               	.L24:
 100:main.cpp      **** 				}
 694               		.loc 1 100 0
 695 01d8 4091 0000 		lds r20,total_time_ts
 696 01dc 5091 0000 		lds r21,total_time_ts+1
 697 01e0 6091 0000 		lds r22,total_time_ts+2
 698 01e4 7091 0000 		lds r23,total_time_ts+3
 699 01e8 80E0      		ldi r24,lo8(myProgram)
 700 01ea 90E0      		ldi r25,hi8(myProgram)
 701 01ec 0E94 0000 		call _ZN7Program5startEm
 702               	.LVL26:
 703 01f0 00C0      		rjmp .L25
 704               	.L30:
 123:main.cpp      **** 			}			
 705               		.loc 1 123 0
 706 01f2 1092 0000 		sts btn0_pressDuration,__zero_reg__
 707 01f6 00C0      		rjmp .L27
 708               		.cfi_endproc
 709               	.LFE10:
 712               	_GLOBAL__sub_I_myLCD:
 713               	.LFB15:
 714               		.loc 1 199 0
 715               		.cfi_startproc
 716               	/* prologue: function */
 717               	/* frame size = 0 */
 718               	/* stack size = 0 */
 719               	.L__stack_usage = 0
 720               	.LVL27:
 721               	.LBB6:
 722               	.LBB7:
  28:main.cpp      **** Program myProgram(&myLCD);
 723               		.loc 1 28 0
 724 01f8 60E0      		ldi r22,0
 725 01fa 80E0      		ldi r24,lo8(myLCD)
 726 01fc 90E0      		ldi r25,hi8(myLCD)
 727 01fe 0E94 0000 		call _ZN3LCDC1Eb
 728               	.LVL28:
  29:main.cpp      **** 
 729               		.loc 1 29 0
 730 0202 60E0      		ldi r22,lo8(myLCD)
 731 0204 70E0      		ldi r23,hi8(myLCD)
 732 0206 80E0      		ldi r24,lo8(myProgram)
 733 0208 90E0      		ldi r25,hi8(myProgram)
 734 020a 0E94 0000 		call _ZN7ProgramC1EP3LCD
 735               	.LVL29:
  41:main.cpp      **** volatile uint8_t btn1_state=BTN1;
 736               		.loc 1 41 0
 737 020e 89B1      		in r24,0x9
 738 0210 8071      		andi r24,lo8(16)
 739 0212 8093 0000 		sts btn0_state,r24
  42:main.cpp      **** volatile uint8_t btn0_pressDuration=0;
 740               		.loc 1 42 0
 741 0216 89B1      		in r24,0x9
 742 0218 8072      		andi r24,lo8(32)
 743 021a 8093 0000 		sts btn1_state,r24
 744               	.LVL30:
 745               	/* epilogue start */
 746               	.LBE7:
 747               	.LBE6:
 748               		.loc 1 199 0
 749 021e 0895      		ret
 750               		.cfi_endproc
 751               	.LFE15:
 753               		.global __do_global_ctors
 754               		.section .ctors,"a",@progbits
 755               		.p2align	1
 756 0000 0000      		.word	gs(_GLOBAL__sub_I_myLCD)
 757               		.section	.text.exit,"ax",@progbits
 759               	_GLOBAL__sub_D_myLCD:
 760               	.LFB16:
 761               		.loc 1 199 0
 762               		.cfi_startproc
 763               	/* prologue: function */
 764               	/* frame size = 0 */
 765               	/* stack size = 0 */
 766               	.L__stack_usage = 0
 767               	.LVL31:
 768               	.LBB12:
 769               	.LBB13:
 770               	.LBB14:
  29:main.cpp      **** 
 771               		.loc 1 29 0
 772 0000 80E0      		ldi r24,lo8(myProgram)
 773 0002 90E0      		ldi r25,hi8(myProgram)
 774 0004 0E94 0000 		call _ZN7ProgramD1Ev
 775               	.LVL32:
  28:main.cpp      **** Program myProgram(&myLCD);
 776               		.loc 1 28 0
 777 0008 80E0      		ldi r24,lo8(myLCD)
 778 000a 90E0      		ldi r25,hi8(myLCD)
 779 000c 0C94 0000 		jmp _ZN3LCDD1Ev
 780               	.LVL33:
 781               	.LBE14:
 782               	.LBE13:
 783               	.LBE12:
 784               		.cfi_endproc
 785               	.LFE16:
 787               		.global __do_global_dtors
 788               		.section .dtors,"a",@progbits
 789               		.p2align	1
 790 0000 0000      		.word	gs(_GLOBAL__sub_D_myLCD)
 791               	.global	total_time_ts
 792               		.data
 795               	total_time_ts:
 796 0000 FF        		.byte	-1
 797 0001 FF        		.byte	-1
 798 0002 00        		.byte	0
 799 0003 00        		.byte	0
 800               	.global	btn0_pressDuration
 801               		.section .bss
 804               	btn0_pressDuration:
 805 0000 00        		.zero	1
 806               	.global	btn1_state
 809               	btn1_state:
 810 0001 00        		.zero	1
 811               	.global	btn0_state
 814               	btn0_state:
 815 0002 00        		.zero	1
 816               	.global	flags_state
 819               	flags_state:
 820 0003 00        		.zero	1
 821               	.global	loop_cnt
 822               		.data
 825               	loop_cnt:
 826 0004 01        		.byte	1
 827               	.global	myProgram
 828               		.section .bss
 831               	myProgram:
 832 0004 0000 0000 		.zero	16
 832      0000 0000 
 832      0000 0000 
 832      0000 0000 
 833               	.global	myLCD
 836               	myLCD:
 837 0014 00        		.zero	1
 838               		.text
 839               	.Letext0:
 840               		.file 2 "/usr/lib/avr/include/stdint.h"
 841               		.file 3 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 842               		.file 4 "/usr/lib/avr/include/stdlib.h"
 843               		.file 5 "LCD.h"
 844               		.file 6 "Programs.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccJRfYWX.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccJRfYWX.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccJRfYWX.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccJRfYWX.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccJRfYWX.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccJRfYWX.s:15     .text:0000000000000000 __vector_19
     /tmp/ccJRfYWX.s:185    .text:00000000000000b8 __vector_7
     /tmp/ccJRfYWX.s:795    .data:0000000000000000 total_time_ts
     /tmp/ccJRfYWX.s:831    .bss:0000000000000004 myProgram
     /tmp/ccJRfYWX.s:819    .bss:0000000000000003 flags_state
     /tmp/ccJRfYWX.s:297    .text:0000000000000134 _Z9writeTimev
     /tmp/ccJRfYWX.s:415    .text.startup:0000000000000000 main
     /tmp/ccJRfYWX.s:814    .bss:0000000000000002 btn0_state
     /tmp/ccJRfYWX.s:809    .bss:0000000000000001 btn1_state
     /tmp/ccJRfYWX.s:825    .data:0000000000000004 loop_cnt
     /tmp/ccJRfYWX.s:804    .bss:0000000000000000 btn0_pressDuration
     /tmp/ccJRfYWX.s:712    .text.startup:00000000000001f8 _GLOBAL__sub_I_myLCD
     /tmp/ccJRfYWX.s:836    .bss:0000000000000014 myLCD
     /tmp/ccJRfYWX.s:759    .text.exit:0000000000000000 _GLOBAL__sub_D_myLCD

UNDEFINED SYMBOLS
__floatunsisf
__divsf3
__fixunssfsi
_ZN3LCD10setBatteryENS_7BatteryE
_ZN4Beep6updateEv
__udivmodsi4
__udivmodqi4
_ZN3LCD8setDigitEhh
_ZN3LCD6setClkEb
_ZN3LCD8setDigitEhNS_6SymbolE
_ZN3LCD5setDPEb
_ZN7Program4stopEv
_ZN7Program6updateEm
_ZN7Program4showEv
_ZN7Program5startEm
_ZN3LCDC1Eb
_ZN7ProgramC1EP3LCD
__do_global_ctors
_ZN7ProgramD1Ev
_ZN3LCDD1Ev
__do_global_dtors
__do_copy_data
__do_clear_bss
