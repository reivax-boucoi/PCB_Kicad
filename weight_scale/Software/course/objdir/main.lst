   1               		.file	"main.cpp"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	__floatunsisf
  11               	.global	__divsf3
  12               	.global	__fixunssfsi
  13               	.global	__vector_19
  15               	__vector_19:
  16               	.LFB11:
  17               		.file 1 "main.cpp"
   1:main.cpp      **** #include <avr/io.h>
   2:main.cpp      **** #include <avr/interrupt.h>
   3:main.cpp      **** #include <avr/sleep.h>
   4:main.cpp      **** //#include <util/delay.h>
   5:main.cpp      **** #include <stdlib.h> //for itoa
   6:main.cpp      **** 
   7:main.cpp      **** #include "LCD.h"
   8:main.cpp      **** #include "UART.h"
   9:main.cpp      **** #include "Programs.h"
  10:main.cpp      **** 
  11:main.cpp      **** #define BTN0 (PIND&(1<<4))
  12:main.cpp      **** #define BTN1 (PIND&(1<<5))
  13:main.cpp      **** 
  14:main.cpp      **** #define IRQ_STATE (PINE&(1<<7))
  15:main.cpp      **** 
  16:main.cpp      **** #define PWR_en_ON (PORTE|=(1<<5))
  17:main.cpp      **** #define PWR_en_OFF (PORTE&=~(1<<5))
  18:main.cpp      **** #define LoadCell_en_OFF (PORTE|=(1<<6))
  19:main.cpp      **** #define LoadCell_en_ON (PORTE&=~(1<<6))
  20:main.cpp      **** 
  21:main.cpp      **** #define BATT_CUTOUT 290
  22:main.cpp      **** #define BATT_EMPTY 300
  23:main.cpp      **** #define BATT_ONEBAR 310
  24:main.cpp      **** #define BATT_TWOBAR 320
  25:main.cpp      **** #define BATT_FULL 330
  26:main.cpp      **** 
  27:main.cpp      **** UART uart;
  28:main.cpp      **** LCD myLCD=LCD(0);//Use 1 for lowest power LCD mode
  29:main.cpp      **** Program myProgram(&myLCD);
  30:main.cpp      **** 
  31:main.cpp      **** //Fuses -U lfuse:w:0xe2:m -U hfuse:w:0xd9:m -U efuse:w:0xfd:m 
  32:main.cpp      **** //Int RC osc, 6CK+65ms startup time
  33:main.cpp      **** //No Clock div by 8
  34:main.cpp      **** //Brown out detection enabled, 1.8V
  35:main.cpp      **** //For BoD at 2.7V, use Efuse=FB instead of FD
  36:main.cpp      **** 
  37:main.cpp      **** void writeTime(void);
  38:main.cpp      **** 
  39:main.cpp      **** volatile uint8_t loop_cnt=1;
  40:main.cpp      **** volatile uint8_t flags_state=0;
  41:main.cpp      **** volatile uint8_t btn0_state=BTN0;
  42:main.cpp      **** volatile uint8_t btn1_state=BTN1;
  43:main.cpp      **** volatile uint8_t btn0_pressDuration=0;
  44:main.cpp      **** volatile uint32_t total_time_ts=65535; // in tenths of second
  45:main.cpp      **** 
  46:main.cpp      **** int main(void){
  47:main.cpp      **** 	
  48:main.cpp      **** 	DDRD=0b11000000; 	//LED0, LED1 as outputs, BTN 0/1 as inputs
  49:main.cpp      **** 	PORTD=0b00110000;			//LED initial state:low, enable BTN pullups
  50:main.cpp      **** 	
  51:main.cpp      **** 	DDRE=0b01100011;//IRQ as input, LoadCell_en/PWR_en as outputs, TX as output, RX as input
  52:main.cpp      **** 	PORTE=0b10100000;//Enable IRQ pullup, set LoadCell_en/PWR_en to 1
  53:main.cpp      **** 	
  54:main.cpp      **** 	ADMUX|=(1<<REFS0)|0b11110;//Set AVCC as reference voltage for ADC, ADC MUX input to 1.1V BG
  55:main.cpp      **** 	ADCSRA|=(1<<ADEN)|(1<<ADIE)|(1<<ADPS1);//Enable conversion complete interrupt, Clock prescaler 12M
  56:main.cpp      **** 	PRR|=(1<<PRSPI)|(1<<PRUSART0);//Disable SPI and UART to save power
  57:main.cpp      **** 	
  58:main.cpp      **** 	TCCR1B |=(1<<WGM12)|(1<<CS12);// prescaler=clk/256, OCR1A is top.
  59:main.cpp      **** 	OCR1A=3332; // 8MHz/256 = 31250Hz -> COMPA_ISR every 100ms
  60:main.cpp      **** 	TIMSK1|=(1<<OCIE1A);
  61:main.cpp      **** 	
  62:main.cpp      **** 	
  63:main.cpp      **** 	myLCD.setDP(1);
  64:main.cpp      **** 	myLCD.setClk(1);
  65:main.cpp      **** 	myLCD.setBattery(LCD::FULL);
  66:main.cpp      **** 	
  67:main.cpp      **** 	while(--total_time_ts);
  68:main.cpp      **** 	
  69:main.cpp      **** 	btn0_state=BTN0;
  70:main.cpp      **** 	btn1_state=BTN1;
  71:main.cpp      **** 	LoadCell_en_OFF;
  72:main.cpp      **** 	sei();
  73:main.cpp      **** 	
  74:main.cpp      **** 	while(1){
  75:main.cpp      **** 	
  76:main.cpp      **** 		
  77:main.cpp      **** 
  78:main.cpp      **** 		if(BTN0!=btn0_state){
  79:main.cpp      **** 			btn0_state=BTN0;
  80:main.cpp      **** 			if(btn0_state){
  81:main.cpp      **** 				if(!myProgram.started){
  82:main.cpp      **** 					myProgram.selectedProgram++;
  83:main.cpp      **** 					if(myProgram.selectedProgram>=PGM_CNT)myProgram.selectedProgram=0;
  84:main.cpp      **** 				}
  85:main.cpp      **** 				loop_cnt=1;
  86:main.cpp      **** 			}
  87:main.cpp      **** 		}
  88:main.cpp      **** 		if(BTN1!=btn1_state){
  89:main.cpp      **** 			btn1_state=BTN1;
  90:main.cpp      **** 			if(btn1_state){
  91:main.cpp      **** 				LED1_Toggle;
  92:main.cpp      **** 				if(myProgram.started){
  93:main.cpp      **** 					myProgram.stop();
  94:main.cpp      **** 				}else{
  95:main.cpp      **** 					myProgram.start(total_time_ts);
  96:main.cpp      **** 				}
  97:main.cpp      **** 				loop_cnt=1;
  98:main.cpp      **** 			}
  99:main.cpp      **** 		}
 100:main.cpp      **** 		if(flags_state&0x01){
 101:main.cpp      **** 			flags_state&=~0x01;
 102:main.cpp      **** 			if(myProgram.started){
 103:main.cpp      **** 				myProgram.update(total_time_ts);
 104:main.cpp      **** 			}
 105:main.cpp      **** 			if(--loop_cnt==0){
 106:main.cpp      **** 				loop_cnt=9;
 107:main.cpp      **** 				LED1_ON;
 108:main.cpp      **** 				ADCSRA|=(1<<ADSC); //Start single ADC conversion
 109:main.cpp      **** 				writeTime();
 110:main.cpp      **** 				myProgram.show();
 111:main.cpp      **** 				LED0_OFF;
 112:main.cpp      **** 				LED1_OFF;
 113:main.cpp      **** 			}
 114:main.cpp      **** 			if(BTN0==0){
 115:main.cpp      **** 				btn0_pressDuration++;
 116:main.cpp      **** 				if(btn0_pressDuration>20)PWR_en_OFF;
 117:main.cpp      **** 			}else{
 118:main.cpp      **** 				btn0_pressDuration=0;
 119:main.cpp      **** 			}			
 120:main.cpp      **** 		}
 121:main.cpp      **** 		if(uart.isDataAvailable()){
 122:main.cpp      **** 			char *cmd=uart.retrieve();
 123:main.cpp      **** 			uart.sendString("Start verbose streaming",true);
 124:main.cpp      **** 		}
 125:main.cpp      **** 		ADCSRA&=~(1<<ADEN);//Disable ADC
 126:main.cpp      **** 		PRR|=(1<<PRSPI)|(1<<PRUSART0)|(1<<PRADC);//Shut down clock to Timer1, SPI, UART, ADC
 127:main.cpp      **** 		set_sleep_mode(SLEEP_MODE_IDLE);
 128:main.cpp      **** 		//set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 129:main.cpp      **** 		//set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 130:main.cpp      **** 		cli();
 131:main.cpp      **** 		if (1){
 132:main.cpp      **** 			sleep_enable();
 133:main.cpp      **** 			sei();
 134:main.cpp      **** 			sleep_cpu();
 135:main.cpp      **** 			sleep_disable();
 136:main.cpp      **** 		}
 137:main.cpp      **** 		PRR&=~(1<<PRADC);//Enable power to ADC, UART and SPI  again
 138:main.cpp      **** 		ADCSRA|=(1<<ADEN);//Enable ADC again
 139:main.cpp      **** 		sei();
 140:main.cpp      **** 	}
 141:main.cpp      **** 
 142:main.cpp      **** 	return 0;
 143:main.cpp      **** }
 144:main.cpp      **** 
 145:main.cpp      **** 
 146:main.cpp      **** 
 147:main.cpp      **** 
 148:main.cpp      **** ISR(ADC_vect){
  18               		.loc 1 148 0
  19               		.cfi_startproc
  20 0000 1F92      		push r1
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 3
  23               		.cfi_offset 1, -2
  24 0002 0F92      		push r0
  25               	.LCFI1:
  26               		.cfi_def_cfa_offset 4
  27               		.cfi_offset 0, -3
  28 0004 0FB6      		in r0,__SREG__
  29 0006 0F92      		push r0
  30 0008 1124      		clr __zero_reg__
  31 000a 2F93      		push r18
  32               	.LCFI2:
  33               		.cfi_def_cfa_offset 5
  34               		.cfi_offset 18, -4
  35 000c 3F93      		push r19
  36               	.LCFI3:
  37               		.cfi_def_cfa_offset 6
  38               		.cfi_offset 19, -5
  39 000e 4F93      		push r20
  40               	.LCFI4:
  41               		.cfi_def_cfa_offset 7
  42               		.cfi_offset 20, -6
  43 0010 5F93      		push r21
  44               	.LCFI5:
  45               		.cfi_def_cfa_offset 8
  46               		.cfi_offset 21, -7
  47 0012 6F93      		push r22
  48               	.LCFI6:
  49               		.cfi_def_cfa_offset 9
  50               		.cfi_offset 22, -8
  51 0014 7F93      		push r23
  52               	.LCFI7:
  53               		.cfi_def_cfa_offset 10
  54               		.cfi_offset 23, -9
  55 0016 8F93      		push r24
  56               	.LCFI8:
  57               		.cfi_def_cfa_offset 11
  58               		.cfi_offset 24, -10
  59 0018 9F93      		push r25
  60               	.LCFI9:
  61               		.cfi_def_cfa_offset 12
  62               		.cfi_offset 25, -11
  63 001a AF93      		push r26
  64               	.LCFI10:
  65               		.cfi_def_cfa_offset 13
  66               		.cfi_offset 26, -12
  67 001c BF93      		push r27
  68               	.LCFI11:
  69               		.cfi_def_cfa_offset 14
  70               		.cfi_offset 27, -13
  71 001e EF93      		push r30
  72               	.LCFI12:
  73               		.cfi_def_cfa_offset 15
  74               		.cfi_offset 30, -14
  75 0020 FF93      		push r31
  76               	.LCFI13:
  77               		.cfi_def_cfa_offset 16
  78               		.cfi_offset 31, -15
  79               	/* prologue: Signal */
  80               	/* frame size = 0 */
  81               	/* stack size = 15 */
  82               	.L__stack_usage = 15
 149:main.cpp      **** 	uint16_t ADC_val=ADCL;
  83               		.loc 1 149 0
  84 0022 6091 7800 		lds r22,120
  85               	.LVL0:
 150:main.cpp      **** 	ADC_val+=ADCH<<8;
  86               		.loc 1 150 0
  87 0026 8091 7900 		lds r24,121
  88               	.LVL1:
  89 002a 90E0      		ldi r25,0
  90 002c 982F      		mov r25,r24
  91 002e 8827      		clr r24
  92               	.LVL2:
  93 0030 680F      		add r22,r24
  94 0032 792F      		mov r23,r25
  95 0034 711D      		adc r23,__zero_reg__
 151:main.cpp      **** 	
 152:main.cpp      **** 	//CNT=1.1*1024/Vref
 153:main.cpp      **** 	//Vref=1.1*1024/CNT
 154:main.cpp      **** 	//1.02578
 155:main.cpp      **** 	//1.0127
 156:main.cpp      **** 	//
 157:main.cpp      **** 	uint32_t cnt=(109875.0)/ADC_val;// in tens of mV, i.e. 330=>3.30V
  96               		.loc 1 157 0
  97 0036 90E0      		ldi r25,0
  98 0038 80E0      		ldi r24,0
  99 003a 0E94 0000 		call __floatunsisf
 100               	.LVL3:
 101 003e 9B01      		movw r18,r22
 102 0040 AC01      		movw r20,r24
 103 0042 60E8      		ldi r22,lo8(-128)
 104 0044 79E9      		ldi r23,lo8(-103)
 105 0046 86ED      		ldi r24,lo8(-42)
 106 0048 97E4      		ldi r25,lo8(71)
 107 004a 0E94 0000 		call __divsf3
 108               	.LVL4:
 109 004e 0E94 0000 		call __fixunssfsi
 110               	.LVL5:
 158:main.cpp      **** 	if(cnt>=BATT_FULL){
 111               		.loc 1 158 0
 112 0052 6A34      		cpi r22,74
 113 0054 21E0      		ldi r18,1
 114 0056 7207      		cpc r23,r18
 115 0058 8105      		cpc r24,__zero_reg__
 116 005a 9105      		cpc r25,__zero_reg__
 117 005c 00F0      		brlo .L2
 159:main.cpp      **** 		myLCD.setBattery(LCD::FULL);
 118               		.loc 1 159 0
 119 005e 87E0      		ldi r24,lo8(7)
 120               	.L7:
 160:main.cpp      **** 	}else if(cnt>=BATT_TWOBAR){
 161:main.cpp      **** 		myLCD.setBattery(LCD::TWOBAR);
 162:main.cpp      **** 	}else if(cnt>=BATT_ONEBAR){
 163:main.cpp      **** 		myLCD.setBattery(LCD::ONEBAR);
 164:main.cpp      **** 	}else if(cnt>=BATT_EMPTY){
 165:main.cpp      **** 		myLCD.setBattery(LCD::EMPTY);
 166:main.cpp      **** 	}else{
 167:main.cpp      **** 		myLCD.setBattery(LCD::NONE);
 121               		.loc 1 167 0
 122 0060 0E94 0000 		call _ZN3LCD10setBatteryENS_7BatteryE
 123               	.LVL6:
 124               	/* epilogue start */
 168:main.cpp      **** 		//we should shutdown here
 169:main.cpp      **** 	}
 170:main.cpp      **** }
 125               		.loc 1 170 0
 126 0064 FF91      		pop r31
 127 0066 EF91      		pop r30
 128 0068 BF91      		pop r27
 129 006a AF91      		pop r26
 130 006c 9F91      		pop r25
 131 006e 8F91      		pop r24
 132 0070 7F91      		pop r23
 133 0072 6F91      		pop r22
 134 0074 5F91      		pop r21
 135 0076 4F91      		pop r20
 136 0078 3F91      		pop r19
 137 007a 2F91      		pop r18
 138 007c 0F90      		pop r0
 139 007e 0FBE      		out __SREG__,r0
 140 0080 0F90      		pop r0
 141 0082 1F90      		pop r1
 142 0084 1895      		reti
 143               	.LVL7:
 144               	.L2:
 160:main.cpp      **** 	}else if(cnt>=BATT_TWOBAR){
 145               		.loc 1 160 0
 146 0086 6034      		cpi r22,64
 147 0088 21E0      		ldi r18,1
 148 008a 7207      		cpc r23,r18
 149 008c 8105      		cpc r24,__zero_reg__
 150 008e 9105      		cpc r25,__zero_reg__
 151 0090 00F0      		brlo .L4
 161:main.cpp      **** 	}else if(cnt>=BATT_ONEBAR){
 152               		.loc 1 161 0
 153 0092 86E0      		ldi r24,lo8(6)
 154 0094 00C0      		rjmp .L7
 155               	.L4:
 162:main.cpp      **** 		myLCD.setBattery(LCD::ONEBAR);
 156               		.loc 1 162 0
 157 0096 6633      		cpi r22,54
 158 0098 21E0      		ldi r18,1
 159 009a 7207      		cpc r23,r18
 160 009c 8105      		cpc r24,__zero_reg__
 161 009e 9105      		cpc r25,__zero_reg__
 162 00a0 00F0      		brlo .L5
 163:main.cpp      **** 	}else if(cnt>=BATT_EMPTY){
 163               		.loc 1 163 0
 164 00a2 85E0      		ldi r24,lo8(5)
 165 00a4 00C0      		rjmp .L7
 166               	.L5:
 164:main.cpp      **** 		myLCD.setBattery(LCD::EMPTY);
 167               		.loc 1 164 0
 168 00a6 6C32      		cpi r22,44
 169 00a8 7140      		sbci r23,1
 170 00aa 8105      		cpc r24,__zero_reg__
 171 00ac 9105      		cpc r25,__zero_reg__
 172 00ae 00F0      		brlo .L6
 165:main.cpp      **** 	}else{
 173               		.loc 1 165 0
 174 00b0 81E0      		ldi r24,lo8(1)
 175 00b2 00C0      		rjmp .L7
 176               	.L6:
 167:main.cpp      **** 		//we should shutdown here
 177               		.loc 1 167 0
 178 00b4 80E0      		ldi r24,0
 179 00b6 00C0      		rjmp .L7
 180               		.cfi_endproc
 181               	.LFE11:
 183               	.global	__vector_7
 185               	__vector_7:
 186               	.LFB12:
 171:main.cpp      **** 
 172:main.cpp      **** ISR(TIMER1_COMPA_vect){//every 100ms
 187               		.loc 1 172 0
 188               		.cfi_startproc
 189 00b8 1F92      		push r1
 190               	.LCFI14:
 191               		.cfi_def_cfa_offset 3
 192               		.cfi_offset 1, -2
 193 00ba 0F92      		push r0
 194               	.LCFI15:
 195               		.cfi_def_cfa_offset 4
 196               		.cfi_offset 0, -3
 197 00bc 0FB6      		in r0,__SREG__
 198 00be 0F92      		push r0
 199 00c0 1124      		clr __zero_reg__
 200 00c2 2F93      		push r18
 201               	.LCFI16:
 202               		.cfi_def_cfa_offset 5
 203               		.cfi_offset 18, -4
 204 00c4 3F93      		push r19
 205               	.LCFI17:
 206               		.cfi_def_cfa_offset 6
 207               		.cfi_offset 19, -5
 208 00c6 4F93      		push r20
 209               	.LCFI18:
 210               		.cfi_def_cfa_offset 7
 211               		.cfi_offset 20, -6
 212 00c8 5F93      		push r21
 213               	.LCFI19:
 214               		.cfi_def_cfa_offset 8
 215               		.cfi_offset 21, -7
 216 00ca 6F93      		push r22
 217               	.LCFI20:
 218               		.cfi_def_cfa_offset 9
 219               		.cfi_offset 22, -8
 220 00cc 7F93      		push r23
 221               	.LCFI21:
 222               		.cfi_def_cfa_offset 10
 223               		.cfi_offset 23, -9
 224 00ce 8F93      		push r24
 225               	.LCFI22:
 226               		.cfi_def_cfa_offset 11
 227               		.cfi_offset 24, -10
 228 00d0 9F93      		push r25
 229               	.LCFI23:
 230               		.cfi_def_cfa_offset 12
 231               		.cfi_offset 25, -11
 232 00d2 AF93      		push r26
 233               	.LCFI24:
 234               		.cfi_def_cfa_offset 13
 235               		.cfi_offset 26, -12
 236 00d4 BF93      		push r27
 237               	.LCFI25:
 238               		.cfi_def_cfa_offset 14
 239               		.cfi_offset 27, -13
 240 00d6 EF93      		push r30
 241               	.LCFI26:
 242               		.cfi_def_cfa_offset 15
 243               		.cfi_offset 30, -14
 244 00d8 FF93      		push r31
 245               	.LCFI27:
 246               		.cfi_def_cfa_offset 16
 247               		.cfi_offset 31, -15
 248               	/* prologue: Signal */
 249               	/* frame size = 0 */
 250               	/* stack size = 15 */
 251               	.L__stack_usage = 15
 173:main.cpp      **** 	total_time_ts++;
 252               		.loc 1 173 0
 253 00da 8091 0000 		lds r24,total_time_ts
 254 00de 9091 0000 		lds r25,total_time_ts+1
 255 00e2 A091 0000 		lds r26,total_time_ts+2
 256 00e6 B091 0000 		lds r27,total_time_ts+3
 257 00ea 0196      		adiw r24,1
 258 00ec A11D      		adc r26,__zero_reg__
 259 00ee B11D      		adc r27,__zero_reg__
 260 00f0 8093 0000 		sts total_time_ts,r24
 261 00f4 9093 0000 		sts total_time_ts+1,r25
 262 00f8 A093 0000 		sts total_time_ts+2,r26
 263 00fc B093 0000 		sts total_time_ts+3,r27
 174:main.cpp      **** 	myProgram.myBeep.update();
 264               		.loc 1 174 0
 265 0100 80E0      		ldi r24,lo8(myProgram)
 266 0102 90E0      		ldi r25,hi8(myProgram)
 267 0104 0E94 0000 		call _ZN4Beep6updateEv
 268               	.LVL8:
 175:main.cpp      **** 	flags_state|=0x01;
 269               		.loc 1 175 0
 270 0108 8091 0000 		lds r24,flags_state
 271 010c 8160      		ori r24,lo8(1)
 272 010e 8093 0000 		sts flags_state,r24
 273               	/* epilogue start */
 176:main.cpp      **** }
 274               		.loc 1 176 0
 275 0112 FF91      		pop r31
 276 0114 EF91      		pop r30
 277 0116 BF91      		pop r27
 278 0118 AF91      		pop r26
 279 011a 9F91      		pop r25
 280 011c 8F91      		pop r24
 281 011e 7F91      		pop r23
 282 0120 6F91      		pop r22
 283 0122 5F91      		pop r21
 284 0124 4F91      		pop r20
 285 0126 3F91      		pop r19
 286 0128 2F91      		pop r18
 287 012a 0F90      		pop r0
 288 012c 0FBE      		out __SREG__,r0
 289 012e 0F90      		pop r0
 290 0130 1F90      		pop r1
 291 0132 1895      		reti
 292               		.cfi_endproc
 293               	.LFE12:
 295               	.global	__vector_13
 297               	__vector_13:
 298               	.LFB13:
 177:main.cpp      **** 
 178:main.cpp      **** ISR(USART0_RX_vect){
 299               		.loc 1 178 0
 300               		.cfi_startproc
 301 0134 1F92      		push r1
 302               	.LCFI28:
 303               		.cfi_def_cfa_offset 3
 304               		.cfi_offset 1, -2
 305 0136 0F92      		push r0
 306               	.LCFI29:
 307               		.cfi_def_cfa_offset 4
 308               		.cfi_offset 0, -3
 309 0138 0FB6      		in r0,__SREG__
 310 013a 0F92      		push r0
 311 013c 1124      		clr __zero_reg__
 312 013e 2F93      		push r18
 313               	.LCFI30:
 314               		.cfi_def_cfa_offset 5
 315               		.cfi_offset 18, -4
 316 0140 3F93      		push r19
 317               	.LCFI31:
 318               		.cfi_def_cfa_offset 6
 319               		.cfi_offset 19, -5
 320 0142 4F93      		push r20
 321               	.LCFI32:
 322               		.cfi_def_cfa_offset 7
 323               		.cfi_offset 20, -6
 324 0144 5F93      		push r21
 325               	.LCFI33:
 326               		.cfi_def_cfa_offset 8
 327               		.cfi_offset 21, -7
 328 0146 6F93      		push r22
 329               	.LCFI34:
 330               		.cfi_def_cfa_offset 9
 331               		.cfi_offset 22, -8
 332 0148 7F93      		push r23
 333               	.LCFI35:
 334               		.cfi_def_cfa_offset 10
 335               		.cfi_offset 23, -9
 336 014a 8F93      		push r24
 337               	.LCFI36:
 338               		.cfi_def_cfa_offset 11
 339               		.cfi_offset 24, -10
 340 014c 9F93      		push r25
 341               	.LCFI37:
 342               		.cfi_def_cfa_offset 12
 343               		.cfi_offset 25, -11
 344 014e AF93      		push r26
 345               	.LCFI38:
 346               		.cfi_def_cfa_offset 13
 347               		.cfi_offset 26, -12
 348 0150 BF93      		push r27
 349               	.LCFI39:
 350               		.cfi_def_cfa_offset 14
 351               		.cfi_offset 27, -13
 352 0152 EF93      		push r30
 353               	.LCFI40:
 354               		.cfi_def_cfa_offset 15
 355               		.cfi_offset 30, -14
 356 0154 FF93      		push r31
 357               	.LCFI41:
 358               		.cfi_def_cfa_offset 16
 359               		.cfi_offset 31, -15
 360               	/* prologue: Signal */
 361               	/* frame size = 0 */
 362               	/* stack size = 15 */
 363               	.L__stack_usage = 15
 179:main.cpp      **** 	uart.receive();
 364               		.loc 1 179 0
 365 0156 80E0      		ldi r24,lo8(uart)
 366 0158 90E0      		ldi r25,hi8(uart)
 367 015a 0E94 0000 		call _ZN4UART7receiveEv
 368               	.LVL9:
 369               	/* epilogue start */
 180:main.cpp      **** }
 370               		.loc 1 180 0
 371 015e FF91      		pop r31
 372 0160 EF91      		pop r30
 373 0162 BF91      		pop r27
 374 0164 AF91      		pop r26
 375 0166 9F91      		pop r25
 376 0168 8F91      		pop r24
 377 016a 7F91      		pop r23
 378 016c 6F91      		pop r22
 379 016e 5F91      		pop r21
 380 0170 4F91      		pop r20
 381 0172 3F91      		pop r19
 382 0174 2F91      		pop r18
 383 0176 0F90      		pop r0
 384 0178 0FBE      		out __SREG__,r0
 385 017a 0F90      		pop r0
 386 017c 1F90      		pop r1
 387 017e 1895      		reti
 388               		.cfi_endproc
 389               	.LFE13:
 391               	.global	_Z9writeTimev
 393               	_Z9writeTimev:
 394               	.LFB14:
 181:main.cpp      **** 
 182:main.cpp      **** void writeTime(void){
 395               		.loc 1 182 0
 396               		.cfi_startproc
 397 0180 0F93      		push r16
 398               	.LCFI42:
 399               		.cfi_def_cfa_offset 3
 400               		.cfi_offset 16, -2
 401 0182 1F93      		push r17
 402               	.LCFI43:
 403               		.cfi_def_cfa_offset 4
 404               		.cfi_offset 17, -3
 405 0184 CF93      		push r28
 406               	.LCFI44:
 407               		.cfi_def_cfa_offset 5
 408               		.cfi_offset 28, -4
 409 0186 DF93      		push r29
 410               	.LCFI45:
 411               		.cfi_def_cfa_offset 6
 412               		.cfi_offset 29, -5
 413               	/* prologue: function */
 414               	/* frame size = 0 */
 415               	/* stack size = 4 */
 416               	.L__stack_usage = 4
 183:main.cpp      **** 	uint8_t mins=total_time_ts/600;
 417               		.loc 1 183 0
 418 0188 6091 0000 		lds r22,total_time_ts
 419 018c 7091 0000 		lds r23,total_time_ts+1
 420 0190 8091 0000 		lds r24,total_time_ts+2
 421 0194 9091 0000 		lds r25,total_time_ts+3
 422 0198 28E5      		ldi r18,lo8(88)
 423 019a 32E0      		ldi r19,lo8(2)
 424 019c 40E0      		ldi r20,0
 425 019e 50E0      		ldi r21,0
 426 01a0 0E94 0000 		call __udivmodsi4
 427 01a4 C22F      		mov r28,r18
 428               	.LVL10:
 184:main.cpp      **** 	uint8_t secs=(total_time_ts/10)%60;
 429               		.loc 1 184 0
 430 01a6 6091 0000 		lds r22,total_time_ts
 431 01aa 7091 0000 		lds r23,total_time_ts+1
 432 01ae 8091 0000 		lds r24,total_time_ts+2
 433 01b2 9091 0000 		lds r25,total_time_ts+3
 434 01b6 2AE0      		ldi r18,lo8(10)
 435 01b8 30E0      		ldi r19,0
 436 01ba 40E0      		ldi r20,0
 437 01bc 50E0      		ldi r21,0
 438               	.LVL11:
 439 01be 0E94 0000 		call __udivmodsi4
 440 01c2 CA01      		movw r24,r20
 441 01c4 B901      		movw r22,r18
 442 01c6 2CE3      		ldi r18,lo8(60)
 443 01c8 30E0      		ldi r19,0
 444 01ca 40E0      		ldi r20,0
 445 01cc 50E0      		ldi r21,0
 446 01ce 0E94 0000 		call __udivmodsi4
 447 01d2 D62F      		mov r29,r22
 448 01d4 062F      		mov r16,r22
 449               	.LVL12:
 185:main.cpp      **** 	if(mins>9){
 450               		.loc 1 185 0
 451 01d6 CA30      		cpi r28,lo8(10)
 452 01d8 00F0      		brlo .L11
 186:main.cpp      **** 		myLCD.setDigit(0,mins/10);
 453               		.loc 1 186 0
 454 01da 8C2F      		mov r24,r28
 455 01dc 6AE0      		ldi r22,lo8(10)
 456 01de 0E94 0000 		call __udivmodqi4
 457 01e2 682F      		mov r22,r24
 458 01e4 80E0      		ldi r24,0
 459 01e6 0E94 0000 		call _ZN3LCD8setDigitEhh
 460               	.LVL13:
 461               	.L12:
 187:main.cpp      **** 	}else{
 188:main.cpp      **** 		myLCD.setDigit(0,LCD::Blank);
 189:main.cpp      **** 	}
 190:main.cpp      **** 	myLCD.setDigit(1,mins%10);
 462               		.loc 1 190 0
 463 01ea 1AE0      		ldi r17,lo8(10)
 464 01ec 8C2F      		mov r24,r28
 465 01ee 612F      		mov r22,r17
 466 01f0 0E94 0000 		call __udivmodqi4
 467 01f4 692F      		mov r22,r25
 468 01f6 81E0      		ldi r24,lo8(1)
 469 01f8 0E94 0000 		call _ZN3LCD8setDigitEhh
 470               	.LVL14:
 191:main.cpp      **** 	myLCD.setDigit(2,secs/10);
 471               		.loc 1 191 0
 472 01fc 802F      		mov r24,r16
 473 01fe 612F      		mov r22,r17
 474 0200 0E94 0000 		call __udivmodqi4
 475 0204 C92F      		mov r28,r25
 476 0206 682F      		mov r22,r24
 477 0208 82E0      		ldi r24,lo8(2)
 478 020a 0E94 0000 		call _ZN3LCD8setDigitEhh
 479               	.LVL15:
 192:main.cpp      **** 	myLCD.setDigit(3,secs%10);
 480               		.loc 1 192 0
 481 020e 6C2F      		mov r22,r28
 482 0210 83E0      		ldi r24,lo8(3)
 483 0212 0E94 0000 		call _ZN3LCD8setDigitEhh
 484               	.LVL16:
 193:main.cpp      **** 	myLCD.setClk(secs%2);
 485               		.loc 1 193 0
 486 0216 8D2F      		mov r24,r29
 487 0218 8170      		andi r24,lo8(1)
 488               	/* epilogue start */
 194:main.cpp      **** }
 489               		.loc 1 194 0
 490 021a DF91      		pop r29
 491 021c CF91      		pop r28
 492 021e 1F91      		pop r17
 493 0220 0F91      		pop r16
 494               	.LVL17:
 193:main.cpp      **** 	myLCD.setClk(secs%2);
 495               		.loc 1 193 0
 496 0222 0C94 0000 		jmp _ZN3LCD6setClkEb
 497               	.LVL18:
 498               	.L11:
 188:main.cpp      **** 	}
 499               		.loc 1 188 0
 500 0226 60E0      		ldi r22,0
 501 0228 80E0      		ldi r24,0
 502 022a 0E94 0000 		call _ZN3LCD8setDigitEhNS_6SymbolE
 503               	.LVL19:
 504 022e 00C0      		rjmp .L12
 505               		.cfi_endproc
 506               	.LFE14:
 508               		.section	.rodata.str1.1,"aMS",@progbits,1
 509               	.LC0:
 510 0000 5374 6172 		.string	"Start verbose streaming"
 510      7420 7665 
 510      7262 6F73 
 510      6520 7374 
 510      7265 616D 
 511               		.section	.text.startup,"ax",@progbits
 512               	.global	main
 514               	main:
 515               	.LFB10:
  46:main.cpp      **** 	
 516               		.loc 1 46 0
 517               		.cfi_startproc
 518               	/* prologue: function */
 519               	/* frame size = 0 */
 520               	/* stack size = 0 */
 521               	.L__stack_usage = 0
  48:main.cpp      **** 	PORTD=0b00110000;			//LED initial state:low, enable BTN pullups
 522               		.loc 1 48 0
 523 0000 80EC      		ldi r24,lo8(-64)
 524 0002 8AB9      		out 0xa,r24
  49:main.cpp      **** 	
 525               		.loc 1 49 0
 526 0004 80E3      		ldi r24,lo8(48)
 527 0006 8BB9      		out 0xb,r24
  51:main.cpp      **** 	PORTE=0b10100000;//Enable IRQ pullup, set LoadCell_en/PWR_en to 1
 528               		.loc 1 51 0
 529 0008 83E6      		ldi r24,lo8(99)
 530 000a 8DB9      		out 0xd,r24
  52:main.cpp      **** 	
 531               		.loc 1 52 0
 532 000c 80EA      		ldi r24,lo8(-96)
 533 000e 8EB9      		out 0xe,r24
  54:main.cpp      **** 	ADCSRA|=(1<<ADEN)|(1<<ADIE)|(1<<ADPS1);//Enable conversion complete interrupt, Clock prescaler 12M
 534               		.loc 1 54 0
 535 0010 8091 7C00 		lds r24,124
 536 0014 8E65      		ori r24,lo8(94)
 537 0016 8093 7C00 		sts 124,r24
  55:main.cpp      **** 	PRR|=(1<<PRSPI)|(1<<PRUSART0);//Disable SPI and UART to save power
 538               		.loc 1 55 0
 539 001a 8091 7A00 		lds r24,122
 540 001e 8A68      		ori r24,lo8(-118)
 541 0020 8093 7A00 		sts 122,r24
  56:main.cpp      **** 	
 542               		.loc 1 56 0
 543 0024 8091 6400 		lds r24,100
 544 0028 8660      		ori r24,lo8(6)
 545 002a 8093 6400 		sts 100,r24
  58:main.cpp      **** 	OCR1A=3332; // 8MHz/256 = 31250Hz -> COMPA_ISR every 100ms
 546               		.loc 1 58 0
 547 002e 8091 8100 		lds r24,129
 548 0032 8C60      		ori r24,lo8(12)
 549 0034 8093 8100 		sts 129,r24
  59:main.cpp      **** 	TIMSK1|=(1<<OCIE1A);
 550               		.loc 1 59 0
 551 0038 84E0      		ldi r24,lo8(4)
 552 003a 9DE0      		ldi r25,lo8(13)
 553 003c 9093 8900 		sts 136+1,r25
 554 0040 8093 8800 		sts 136,r24
  60:main.cpp      **** 	
 555               		.loc 1 60 0
 556 0044 8091 6F00 		lds r24,111
 557 0048 8260      		ori r24,lo8(2)
 558 004a 8093 6F00 		sts 111,r24
  63:main.cpp      **** 	myLCD.setClk(1);
 559               		.loc 1 63 0
 560 004e 81E0      		ldi r24,lo8(1)
 561 0050 0E94 0000 		call _ZN3LCD5setDPEb
 562               	.LVL20:
  64:main.cpp      **** 	myLCD.setBattery(LCD::FULL);
 563               		.loc 1 64 0
 564 0054 81E0      		ldi r24,lo8(1)
 565 0056 0E94 0000 		call _ZN3LCD6setClkEb
 566               	.LVL21:
  65:main.cpp      **** 	
 567               		.loc 1 65 0
 568 005a 87E0      		ldi r24,lo8(7)
 569 005c 0E94 0000 		call _ZN3LCD10setBatteryENS_7BatteryE
 570               	.LVL22:
 571               	.L14:
  67:main.cpp      **** 	
 572               		.loc 1 67 0
 573 0060 8091 0000 		lds r24,total_time_ts
 574 0064 9091 0000 		lds r25,total_time_ts+1
 575 0068 A091 0000 		lds r26,total_time_ts+2
 576 006c B091 0000 		lds r27,total_time_ts+3
 577 0070 0197      		sbiw r24,1
 578 0072 A109      		sbc r26,__zero_reg__
 579 0074 B109      		sbc r27,__zero_reg__
 580 0076 8093 0000 		sts total_time_ts,r24
 581 007a 9093 0000 		sts total_time_ts+1,r25
 582 007e A093 0000 		sts total_time_ts+2,r26
 583 0082 B093 0000 		sts total_time_ts+3,r27
 584 0086 892B      		or r24,r25
 585 0088 8A2B      		or r24,r26
 586 008a 8B2B      		or r24,r27
 587 008c 01F4      		brne .L14
  69:main.cpp      **** 	btn1_state=BTN1;
 588               		.loc 1 69 0
 589 008e 89B1      		in r24,0x9
 590 0090 8071      		andi r24,lo8(16)
 591 0092 8093 0000 		sts btn0_state,r24
  70:main.cpp      **** 	LoadCell_en_OFF;
 592               		.loc 1 70 0
 593 0096 89B1      		in r24,0x9
 594 0098 8072      		andi r24,lo8(32)
 595 009a 8093 0000 		sts btn1_state,r24
  71:main.cpp      **** 	sei();
 596               		.loc 1 71 0
 597 009e 769A      		sbi 0xe,6
  72:main.cpp      **** 	
 598               		.loc 1 72 0
 599               	/* #APP */
 600               	 ;  72 "main.cpp" 1
 601 00a0 7894      		sei
 602               	 ;  0 "" 2
 603               	/* #NOAPP */
 604               	.LBB4:
  85:main.cpp      **** 			}
 605               		.loc 1 85 0
 606 00a2 C1E0      		ldi r28,lo8(1)
 106:main.cpp      **** 				LED1_ON;
 607               		.loc 1 106 0
 608 00a4 D9E0      		ldi r29,lo8(9)
 609               	.L34:
  78:main.cpp      **** 			btn0_state=BTN0;
 610               		.loc 1 78 0
 611 00a6 89B1      		in r24,0x9
 612 00a8 9091 0000 		lds r25,btn0_state
 613 00ac 8071      		andi r24,lo8(16)
 614 00ae 8917      		cp r24,r25
 615 00b0 01F0      		breq .L16
  79:main.cpp      **** 			if(btn0_state){
 616               		.loc 1 79 0
 617 00b2 89B1      		in r24,0x9
 618 00b4 8071      		andi r24,lo8(16)
 619 00b6 8093 0000 		sts btn0_state,r24
  80:main.cpp      **** 				if(!myProgram.started){
 620               		.loc 1 80 0
 621 00ba 8091 0000 		lds r24,btn0_state
 622 00be 8823      		tst r24
 623 00c0 01F0      		breq .L16
  81:main.cpp      **** 					myProgram.selectedProgram++;
 624               		.loc 1 81 0
 625 00c2 8091 0000 		lds r24,myProgram+2
 626 00c6 8111      		cpse r24,__zero_reg__
 627 00c8 00C0      		rjmp .L19
  82:main.cpp      **** 					if(myProgram.selectedProgram>=PGM_CNT)myProgram.selectedProgram=0;
 628               		.loc 1 82 0
 629 00ca 8091 0000 		lds r24,myProgram+1
 630 00ce 8F5F      		subi r24,lo8(-(1))
  83:main.cpp      **** 				}
 631               		.loc 1 83 0
 632 00d0 8530      		cpi r24,lo8(5)
 633 00d2 00F0      		brlo .+2
 634 00d4 00C0      		rjmp .L20
  82:main.cpp      **** 					if(myProgram.selectedProgram>=PGM_CNT)myProgram.selectedProgram=0;
 635               		.loc 1 82 0
 636 00d6 8093 0000 		sts myProgram+1,r24
 637               	.L19:
  85:main.cpp      **** 			}
 638               		.loc 1 85 0
 639 00da C093 0000 		sts loop_cnt,r28
 640               	.L16:
  88:main.cpp      **** 			btn1_state=BTN1;
 641               		.loc 1 88 0
 642 00de 89B1      		in r24,0x9
 643 00e0 9091 0000 		lds r25,btn1_state
 644 00e4 8072      		andi r24,lo8(32)
 645 00e6 8917      		cp r24,r25
 646 00e8 01F0      		breq .L23
  89:main.cpp      **** 			if(btn1_state){
 647               		.loc 1 89 0
 648 00ea 89B1      		in r24,0x9
 649 00ec 8072      		andi r24,lo8(32)
 650 00ee 8093 0000 		sts btn1_state,r24
  90:main.cpp      **** 				LED1_Toggle;
 651               		.loc 1 90 0
 652 00f2 8091 0000 		lds r24,btn1_state
 653 00f6 8823      		tst r24
 654 00f8 01F0      		breq .L23
  91:main.cpp      **** 				if(myProgram.started){
 655               		.loc 1 91 0
 656 00fa 8BB1      		in r24,0xb
 657 00fc 8058      		subi r24,lo8(-(-128))
 658 00fe 8BB9      		out 0xb,r24
  92:main.cpp      **** 					myProgram.stop();
 659               		.loc 1 92 0
 660 0100 8091 0000 		lds r24,myProgram+2
 661 0104 8823      		tst r24
 662 0106 01F4      		brne .+2
 663 0108 00C0      		rjmp .L25
  93:main.cpp      **** 				}else{
 664               		.loc 1 93 0
 665 010a 80E0      		ldi r24,lo8(myProgram)
 666 010c 90E0      		ldi r25,hi8(myProgram)
 667 010e 0E94 0000 		call _ZN7Program4stopEv
 668               	.LVL23:
 669               	.L26:
  97:main.cpp      **** 			}
 670               		.loc 1 97 0
 671 0112 C093 0000 		sts loop_cnt,r28
 672               	.L23:
 100:main.cpp      **** 			flags_state&=~0x01;
 673               		.loc 1 100 0
 674 0116 8091 0000 		lds r24,flags_state
 675 011a 80FF      		sbrs r24,0
 676 011c 00C0      		rjmp .L28
 101:main.cpp      **** 			if(myProgram.started){
 677               		.loc 1 101 0
 678 011e 8091 0000 		lds r24,flags_state
 679 0122 8E7F      		andi r24,lo8(-2)
 680 0124 8093 0000 		sts flags_state,r24
 102:main.cpp      **** 				myProgram.update(total_time_ts);
 681               		.loc 1 102 0
 682 0128 8091 0000 		lds r24,myProgram+2
 683 012c 8823      		tst r24
 684 012e 01F0      		breq .L29
 103:main.cpp      **** 			}
 685               		.loc 1 103 0
 686 0130 4091 0000 		lds r20,total_time_ts
 687 0134 5091 0000 		lds r21,total_time_ts+1
 688 0138 6091 0000 		lds r22,total_time_ts+2
 689 013c 7091 0000 		lds r23,total_time_ts+3
 690 0140 80E0      		ldi r24,lo8(myProgram)
 691 0142 90E0      		ldi r25,hi8(myProgram)
 692 0144 0E94 0000 		call _ZN7Program6updateEm
 693               	.LVL24:
 694               	.L29:
 105:main.cpp      **** 				loop_cnt=9;
 695               		.loc 1 105 0
 696 0148 8091 0000 		lds r24,loop_cnt
 697 014c 8150      		subi r24,lo8(-(-1))
 698 014e 8093 0000 		sts loop_cnt,r24
 699 0152 8111      		cpse r24,__zero_reg__
 700 0154 00C0      		rjmp .L30
 106:main.cpp      **** 				LED1_ON;
 701               		.loc 1 106 0
 702 0156 D093 0000 		sts loop_cnt,r29
 107:main.cpp      **** 				ADCSRA|=(1<<ADSC); //Start single ADC conversion
 703               		.loc 1 107 0
 704 015a 5F9A      		sbi 0xb,7
 108:main.cpp      **** 				writeTime();
 705               		.loc 1 108 0
 706 015c 8091 7A00 		lds r24,122
 707 0160 8064      		ori r24,lo8(64)
 708 0162 8093 7A00 		sts 122,r24
 109:main.cpp      **** 				myProgram.show();
 709               		.loc 1 109 0
 710 0166 0E94 0000 		call _Z9writeTimev
 711               	.LVL25:
 110:main.cpp      **** 				LED0_OFF;
 712               		.loc 1 110 0
 713 016a 80E0      		ldi r24,lo8(myProgram)
 714 016c 90E0      		ldi r25,hi8(myProgram)
 715 016e 0E94 0000 		call _ZN7Program4showEv
 716               	.LVL26:
 111:main.cpp      **** 				LED1_OFF;
 717               		.loc 1 111 0
 718 0172 5E98      		cbi 0xb,6
 112:main.cpp      **** 			}
 719               		.loc 1 112 0
 720 0174 5F98      		cbi 0xb,7
 721               	.L30:
 114:main.cpp      **** 				btn0_pressDuration++;
 722               		.loc 1 114 0
 723 0176 4C99      		sbic 0x9,4
 724 0178 00C0      		rjmp .L31
 115:main.cpp      **** 				if(btn0_pressDuration>20)PWR_en_OFF;
 725               		.loc 1 115 0
 726 017a 8091 0000 		lds r24,btn0_pressDuration
 727 017e 8F5F      		subi r24,lo8(-(1))
 728 0180 8093 0000 		sts btn0_pressDuration,r24
 116:main.cpp      **** 			}else{
 729               		.loc 1 116 0
 730 0184 8091 0000 		lds r24,btn0_pressDuration
 731 0188 8531      		cpi r24,lo8(21)
 732 018a 00F0      		brlo .L28
 116:main.cpp      **** 			}else{
 733               		.loc 1 116 0 is_stmt 0 discriminator 1
 734 018c 7598      		cbi 0xe,5
 735               	.L28:
 736               	.LBB5:
 121:main.cpp      **** 			char *cmd=uart.retrieve();
 737               		.loc 1 121 0 is_stmt 1
 738 018e 80E0      		ldi r24,lo8(uart)
 739 0190 90E0      		ldi r25,hi8(uart)
 740 0192 0E94 0000 		call _ZN4UART15isDataAvailableEv
 741               	.LVL27:
 742 0196 8823      		tst r24
 743 0198 01F0      		breq .L33
 744               	.LBB6:
 122:main.cpp      **** 			uart.sendString("Start verbose streaming",true);
 745               		.loc 1 122 0
 746 019a 80E0      		ldi r24,lo8(uart)
 747 019c 90E0      		ldi r25,hi8(uart)
 748 019e 0E94 0000 		call _ZN4UART8retrieveEv
 749               	.LVL28:
 123:main.cpp      **** 		}
 750               		.loc 1 123 0
 751 01a2 41E0      		ldi r20,lo8(1)
 752 01a4 60E0      		ldi r22,lo8(.LC0)
 753 01a6 70E0      		ldi r23,hi8(.LC0)
 754 01a8 80E0      		ldi r24,lo8(uart)
 755 01aa 90E0      		ldi r25,hi8(uart)
 756 01ac 0E94 0000 		call _ZN4UART10sendStringEPcb
 757               	.LVL29:
 758               	.L33:
 759               	.LBE6:
 760               	.LBE5:
 125:main.cpp      **** 		PRR|=(1<<PRSPI)|(1<<PRUSART0)|(1<<PRADC);//Shut down clock to Timer1, SPI, UART, ADC
 761               		.loc 1 125 0
 762 01b0 8091 7A00 		lds r24,122
 763 01b4 8F77      		andi r24,lo8(127)
 764 01b6 8093 7A00 		sts 122,r24
 126:main.cpp      **** 		set_sleep_mode(SLEEP_MODE_IDLE);
 765               		.loc 1 126 0
 766 01ba 8091 6400 		lds r24,100
 767 01be 8760      		ori r24,lo8(7)
 768 01c0 8093 6400 		sts 100,r24
 127:main.cpp      **** 		//set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 769               		.loc 1 127 0
 770 01c4 83B7      		in r24,0x33
 771 01c6 817F      		andi r24,lo8(-15)
 772 01c8 83BF      		out 0x33,r24
 130:main.cpp      **** 		if (1){
 773               		.loc 1 130 0
 774               	/* #APP */
 775               	 ;  130 "main.cpp" 1
 776 01ca F894      		cli
 777               	 ;  0 "" 2
 132:main.cpp      **** 			sei();
 778               		.loc 1 132 0
 779               	/* #NOAPP */
 780 01cc 83B7      		in r24,0x33
 781 01ce 8160      		ori r24,lo8(1)
 782 01d0 83BF      		out 0x33,r24
 133:main.cpp      **** 			sleep_cpu();
 783               		.loc 1 133 0
 784               	/* #APP */
 785               	 ;  133 "main.cpp" 1
 786 01d2 7894      		sei
 787               	 ;  0 "" 2
 134:main.cpp      **** 			sleep_disable();
 788               		.loc 1 134 0
 789               	 ;  134 "main.cpp" 1
 790 01d4 8895      		sleep
 791               		
 792               	 ;  0 "" 2
 135:main.cpp      **** 		}
 793               		.loc 1 135 0
 794               	/* #NOAPP */
 795 01d6 83B7      		in r24,0x33
 796 01d8 8E7F      		andi r24,lo8(-2)
 797 01da 83BF      		out 0x33,r24
 137:main.cpp      **** 		ADCSRA|=(1<<ADEN);//Enable ADC again
 798               		.loc 1 137 0
 799 01dc 8091 6400 		lds r24,100
 800 01e0 8E7F      		andi r24,lo8(-2)
 801 01e2 8093 6400 		sts 100,r24
 138:main.cpp      **** 		sei();
 802               		.loc 1 138 0
 803 01e6 8091 7A00 		lds r24,122
 804 01ea 8068      		ori r24,lo8(-128)
 805 01ec 8093 7A00 		sts 122,r24
 139:main.cpp      **** 	}
 806               		.loc 1 139 0
 807               	/* #APP */
 808               	 ;  139 "main.cpp" 1
 809 01f0 7894      		sei
 810               	 ;  0 "" 2
 811               	/* #NOAPP */
 812               	.LBE4:
 140:main.cpp      **** 
 813               		.loc 1 140 0
 814 01f2 00C0      		rjmp .L34
 815               	.L20:
 816               	.LBB7:
  83:main.cpp      **** 				}
 817               		.loc 1 83 0 discriminator 1
 818 01f4 1092 0000 		sts myProgram+1,__zero_reg__
 819 01f8 00C0      		rjmp .L19
 820               	.L25:
  95:main.cpp      **** 				}
 821               		.loc 1 95 0
 822 01fa 4091 0000 		lds r20,total_time_ts
 823 01fe 5091 0000 		lds r21,total_time_ts+1
 824 0202 6091 0000 		lds r22,total_time_ts+2
 825 0206 7091 0000 		lds r23,total_time_ts+3
 826 020a 80E0      		ldi r24,lo8(myProgram)
 827 020c 90E0      		ldi r25,hi8(myProgram)
 828 020e 0E94 0000 		call _ZN7Program5startEm
 829               	.LVL30:
 830 0212 00C0      		rjmp .L26
 831               	.L31:
 118:main.cpp      **** 			}			
 832               		.loc 1 118 0
 833 0214 1092 0000 		sts btn0_pressDuration,__zero_reg__
 834 0218 00C0      		rjmp .L28
 835               	.LBE7:
 836               		.cfi_endproc
 837               	.LFE10:
 840               	_GLOBAL__sub_I_uart:
 841               	.LFB16:
 842               		.loc 1 194 0
 843               		.cfi_startproc
 844               	/* prologue: function */
 845               	/* frame size = 0 */
 846               	/* stack size = 0 */
 847               	.L__stack_usage = 0
 848               	.LVL31:
 849               	.LBB10:
 850               	.LBB11:
  27:main.cpp      **** LCD myLCD=LCD(0);//Use 1 for lowest power LCD mode
 851               		.loc 1 27 0
 852 021a 80E0      		ldi r24,lo8(uart)
 853 021c 90E0      		ldi r25,hi8(uart)
 854 021e 0E94 0000 		call _ZN4UARTC1Ev
 855               	.LVL32:
  28:main.cpp      **** Program myProgram(&myLCD);
 856               		.loc 1 28 0
 857 0222 60E0      		ldi r22,0
 858 0224 80E0      		ldi r24,lo8(myLCD)
 859 0226 90E0      		ldi r25,hi8(myLCD)
 860 0228 0E94 0000 		call _ZN3LCDC1Eb
 861               	.LVL33:
  29:main.cpp      **** 
 862               		.loc 1 29 0
 863 022c 60E0      		ldi r22,lo8(myLCD)
 864 022e 70E0      		ldi r23,hi8(myLCD)
 865 0230 80E0      		ldi r24,lo8(myProgram)
 866 0232 90E0      		ldi r25,hi8(myProgram)
 867 0234 0E94 0000 		call _ZN7ProgramC1EP3LCD
 868               	.LVL34:
  41:main.cpp      **** volatile uint8_t btn1_state=BTN1;
 869               		.loc 1 41 0
 870 0238 89B1      		in r24,0x9
 871 023a 8071      		andi r24,lo8(16)
 872 023c 8093 0000 		sts btn0_state,r24
  42:main.cpp      **** volatile uint8_t btn0_pressDuration=0;
 873               		.loc 1 42 0
 874 0240 89B1      		in r24,0x9
 875 0242 8072      		andi r24,lo8(32)
 876 0244 8093 0000 		sts btn1_state,r24
 877               	.LVL35:
 878               	/* epilogue start */
 879               	.LBE11:
 880               	.LBE10:
 881               		.loc 1 194 0
 882 0248 0895      		ret
 883               		.cfi_endproc
 884               	.LFE16:
 886               		.global __do_global_ctors
 887               		.section .ctors,"a",@progbits
 888               		.p2align	1
 889 0000 0000      		.word	gs(_GLOBAL__sub_I_uart)
 890               		.section	.text.exit,"ax",@progbits
 892               	_GLOBAL__sub_D_uart:
 893               	.LFB17:
 894               		.loc 1 194 0
 895               		.cfi_startproc
 896               	/* prologue: function */
 897               	/* frame size = 0 */
 898               	/* stack size = 0 */
 899               	.L__stack_usage = 0
 900               	.LVL36:
 901               	.LBB16:
 902               	.LBB17:
 903               	.LBB18:
  29:main.cpp      **** 
 904               		.loc 1 29 0
 905 0000 80E0      		ldi r24,lo8(myProgram)
 906 0002 90E0      		ldi r25,hi8(myProgram)
 907 0004 0E94 0000 		call _ZN7ProgramD1Ev
 908               	.LVL37:
  28:main.cpp      **** Program myProgram(&myLCD);
 909               		.loc 1 28 0
 910 0008 80E0      		ldi r24,lo8(myLCD)
 911 000a 90E0      		ldi r25,hi8(myLCD)
 912 000c 0E94 0000 		call _ZN3LCDD1Ev
 913               	.LVL38:
  27:main.cpp      **** LCD myLCD=LCD(0);//Use 1 for lowest power LCD mode
 914               		.loc 1 27 0
 915 0010 80E0      		ldi r24,lo8(uart)
 916 0012 90E0      		ldi r25,hi8(uart)
 917 0014 0C94 0000 		jmp _ZN4UARTD1Ev
 918               	.LVL39:
 919               	.LBE18:
 920               	.LBE17:
 921               	.LBE16:
 922               		.cfi_endproc
 923               	.LFE17:
 925               		.global __do_global_dtors
 926               		.section .dtors,"a",@progbits
 927               		.p2align	1
 928 0000 0000      		.word	gs(_GLOBAL__sub_D_uart)
 929               	.global	total_time_ts
 930               		.data
 933               	total_time_ts:
 934 0000 FF        		.byte	-1
 935 0001 FF        		.byte	-1
 936 0002 00        		.byte	0
 937 0003 00        		.byte	0
 938               	.global	btn0_pressDuration
 939               		.section .bss
 942               	btn0_pressDuration:
 943 0000 00        		.zero	1
 944               	.global	btn1_state
 947               	btn1_state:
 948 0001 00        		.zero	1
 949               	.global	btn0_state
 952               	btn0_state:
 953 0002 00        		.zero	1
 954               	.global	flags_state
 957               	flags_state:
 958 0003 00        		.zero	1
 959               	.global	loop_cnt
 960               		.data
 963               	loop_cnt:
 964 0004 01        		.byte	1
 965               	.global	myProgram
 966               		.section .bss
 969               	myProgram:
 970 0004 0000 0000 		.zero	16
 970      0000 0000 
 970      0000 0000 
 970      0000 0000 
 971               	.global	myLCD
 974               	myLCD:
 975 0014 00        		.zero	1
 976               	.global	uart
 979               	uart:
 980 0015 0000 0000 		.zero	22
 980      0000 0000 
 980      0000 0000 
 980      0000 0000 
 980      0000 0000 
 981               		.text
 982               	.Letext0:
 983               		.file 2 "/usr/lib/avr/include/stdint.h"
 984               		.file 3 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 985               		.file 4 "/usr/lib/avr/include/stdlib.h"
 986               		.file 5 "LCD.h"
 987               		.file 6 "UART.h"
 988               		.file 7 "Programs.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccVFVJJl.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccVFVJJl.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccVFVJJl.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccVFVJJl.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccVFVJJl.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccVFVJJl.s:15     .text:0000000000000000 __vector_19
     /tmp/ccVFVJJl.s:185    .text:00000000000000b8 __vector_7
     /tmp/ccVFVJJl.s:933    .data:0000000000000000 total_time_ts
     /tmp/ccVFVJJl.s:969    .bss:0000000000000004 myProgram
     /tmp/ccVFVJJl.s:957    .bss:0000000000000003 flags_state
     /tmp/ccVFVJJl.s:297    .text:0000000000000134 __vector_13
     /tmp/ccVFVJJl.s:979    .bss:0000000000000015 uart
     /tmp/ccVFVJJl.s:393    .text:0000000000000180 _Z9writeTimev
     /tmp/ccVFVJJl.s:514    .text.startup:0000000000000000 main
     /tmp/ccVFVJJl.s:952    .bss:0000000000000002 btn0_state
     /tmp/ccVFVJJl.s:947    .bss:0000000000000001 btn1_state
     /tmp/ccVFVJJl.s:963    .data:0000000000000004 loop_cnt
     /tmp/ccVFVJJl.s:942    .bss:0000000000000000 btn0_pressDuration
     /tmp/ccVFVJJl.s:840    .text.startup:000000000000021a _GLOBAL__sub_I_uart
     /tmp/ccVFVJJl.s:974    .bss:0000000000000014 myLCD
     /tmp/ccVFVJJl.s:892    .text.exit:0000000000000000 _GLOBAL__sub_D_uart

UNDEFINED SYMBOLS
__floatunsisf
__divsf3
__fixunssfsi
_ZN3LCD10setBatteryENS_7BatteryE
_ZN4Beep6updateEv
_ZN4UART7receiveEv
__udivmodsi4
__udivmodqi4
_ZN3LCD8setDigitEhh
_ZN3LCD6setClkEb
_ZN3LCD8setDigitEhNS_6SymbolE
_ZN3LCD5setDPEb
_ZN7Program4stopEv
_ZN7Program6updateEm
_ZN7Program4showEv
_ZN4UART15isDataAvailableEv
_ZN4UART8retrieveEv
_ZN4UART10sendStringEPcb
_ZN7Program5startEm
_ZN4UARTC1Ev
_ZN3LCDC1Eb
_ZN7ProgramC1EP3LCD
__do_global_ctors
_ZN7ProgramD1Ev
_ZN3LCDD1Ev
_ZN4UARTD1Ev
__do_global_dtors
__do_copy_data
__do_clear_bss
