
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d6  00800100  00001b78  00001c0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  008001d6  008001d6  00001ce2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001ce2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cf4  2**2
                  CONTENTS, READONLY
  5 .avr.prop     00000016  00000000  00000000  00001d34  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000098  00000000  00000000  00001d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002f39  00000000  00000000  00001de2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000142b  00000000  00000000  00004d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000bd2  00000000  00000000  00006146  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005c0  00000000  00000000  00006d18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b48  00000000  00000000  000072d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001451  00000000  00000000  00007e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a8  00000000  00000000  00009271  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__dtors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_7>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__vector_13>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      4c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_19>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

0000005c <__trampolines_end>:
      5c:	6e 61       	ori	r22, 0x1E	; 30
      5e:	6e 00       	.word	0x006e	; ????

00000060 <__c.2228>:
      60:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      70:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      80:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      90:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      a0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      b0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      c0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      d0:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      e0:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      f0:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     100:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     110:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     120:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     130:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     140:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     150:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000015e <__ctors_start>:
     15e:	a9 06       	cpc	r10, r25

00000160 <__ctors_end>:
     160:	c1 06       	cpc	r12, r17

00000162 <__dtors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d4 e0       	ldi	r29, 0x04	; 4
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	e8 e7       	ldi	r30, 0x78	; 120
     176:	fb e1       	ldi	r31, 0x1B	; 27
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
     17a:	05 90       	lpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	a6 3d       	cpi	r26, 0xD6	; 214
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
     184:	22 e0       	ldi	r18, 0x02	; 2
     186:	a6 ed       	ldi	r26, 0xD6	; 214
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	a2 30       	cpi	r26, 0x02	; 2
     190:	b2 07       	cpc	r27, r18
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>

00000194 <__do_global_ctors>:
     194:	10 e0       	ldi	r17, 0x00	; 0
     196:	c0 eb       	ldi	r28, 0xB0	; 176
     198:	d0 e0       	ldi	r29, 0x00	; 0
     19a:	04 c0       	rjmp	.+8      	; 0x1a4 <__do_global_ctors+0x10>
     19c:	21 97       	sbiw	r28, 0x01	; 1
     19e:	fe 01       	movw	r30, r28
     1a0:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__tablejump2__>
     1a4:	cf 3a       	cpi	r28, 0xAF	; 175
     1a6:	d1 07       	cpc	r29, r17
     1a8:	c9 f7       	brne	.-14     	; 0x19c <__do_global_ctors+0x8>
     1aa:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
     1ae:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__do_global_dtors>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <__vector_19>:
}




ISR(ADC_vect){
     1b6:	1f 92       	push	r1
     1b8:	0f 92       	push	r0
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	0f 92       	push	r0
     1be:	11 24       	eor	r1, r1
     1c0:	2f 93       	push	r18
     1c2:	3f 93       	push	r19
     1c4:	4f 93       	push	r20
     1c6:	5f 93       	push	r21
     1c8:	6f 93       	push	r22
     1ca:	7f 93       	push	r23
     1cc:	8f 93       	push	r24
     1ce:	9f 93       	push	r25
     1d0:	af 93       	push	r26
     1d2:	bf 93       	push	r27
     1d4:	ef 93       	push	r30
     1d6:	ff 93       	push	r31
	uint16_t ADC_val=ADCL;
     1d8:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fc078>
	ADC_val+=ADCH<<8;
     1dc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fc079>
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	98 2f       	mov	r25, r24
     1e4:	88 27       	eor	r24, r24
     1e6:	68 0f       	add	r22, r24
     1e8:	79 2f       	mov	r23, r25
     1ea:	71 1d       	adc	r23, r1
	//CNT=1.1*1024/Vref
	//Vref=1.1*1024/CNT
	//1.02578
	//1.0127
	//
	uint32_t cnt=(109875.0)/ADC_val;// in tens of mV, i.e. 330=>3.30V
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	0e 94 cf 0a 	call	0x159e	; 0x159e <__floatunsisf>
     1f4:	9b 01       	movw	r18, r22
     1f6:	ac 01       	movw	r20, r24
     1f8:	60 e8       	ldi	r22, 0x80	; 128
     1fa:	79 e9       	ldi	r23, 0x99	; 153
     1fc:	86 ed       	ldi	r24, 0xD6	; 214
     1fe:	97 e4       	ldi	r25, 0x47	; 71
     200:	0e 94 2e 0a 	call	0x145c	; 0x145c <__divsf3>
     204:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__fixunssfsi>
	if(cnt>=BATT_FULL){
     208:	6a 34       	cpi	r22, 0x4A	; 74
     20a:	21 e0       	ldi	r18, 0x01	; 1
     20c:	72 07       	cpc	r23, r18
     20e:	81 05       	cpc	r24, r1
     210:	91 05       	cpc	r25, r1
     212:	a0 f0       	brcs	.+40     	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
		myLCD.setBattery(LCD::FULL);
     214:	87 e0       	ldi	r24, 0x07	; 7
	}else if(cnt>=BATT_ONEBAR){
		myLCD.setBattery(LCD::ONEBAR);
	}else if(cnt>=BATT_EMPTY){
		myLCD.setBattery(LCD::EMPTY);
	}else{
		myLCD.setBattery(LCD::NONE);
     216:	0e 94 81 03 	call	0x702	; 0x702 <_ZN3LCD10setBatteryENS_7BatteryE>
		//we should shutdown here
	}
}
     21a:	ff 91       	pop	r31
     21c:	ef 91       	pop	r30
     21e:	bf 91       	pop	r27
     220:	af 91       	pop	r26
     222:	9f 91       	pop	r25
     224:	8f 91       	pop	r24
     226:	7f 91       	pop	r23
     228:	6f 91       	pop	r22
     22a:	5f 91       	pop	r21
     22c:	4f 91       	pop	r20
     22e:	3f 91       	pop	r19
     230:	2f 91       	pop	r18
     232:	0f 90       	pop	r0
     234:	0f be       	out	0x3f, r0	; 63
     236:	0f 90       	pop	r0
     238:	1f 90       	pop	r1
     23a:	18 95       	reti
	//1.0127
	//
	uint32_t cnt=(109875.0)/ADC_val;// in tens of mV, i.e. 330=>3.30V
	if(cnt>=BATT_FULL){
		myLCD.setBattery(LCD::FULL);
	}else if(cnt>=BATT_TWOBAR){
     23c:	60 34       	cpi	r22, 0x40	; 64
     23e:	21 e0       	ldi	r18, 0x01	; 1
     240:	72 07       	cpc	r23, r18
     242:	81 05       	cpc	r24, r1
     244:	91 05       	cpc	r25, r1
     246:	10 f0       	brcs	.+4      	; 0x24c <__EEPROM_REGION_LENGTH__+0x4c>
		myLCD.setBattery(LCD::TWOBAR);
     248:	86 e0       	ldi	r24, 0x06	; 6
     24a:	e5 cf       	rjmp	.-54     	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
	}else if(cnt>=BATT_ONEBAR){
     24c:	66 33       	cpi	r22, 0x36	; 54
     24e:	21 e0       	ldi	r18, 0x01	; 1
     250:	72 07       	cpc	r23, r18
     252:	81 05       	cpc	r24, r1
     254:	91 05       	cpc	r25, r1
     256:	10 f0       	brcs	.+4      	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
		myLCD.setBattery(LCD::ONEBAR);
     258:	85 e0       	ldi	r24, 0x05	; 5
     25a:	dd cf       	rjmp	.-70     	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
	}else if(cnt>=BATT_EMPTY){
     25c:	6c 32       	cpi	r22, 0x2C	; 44
     25e:	71 40       	sbci	r23, 0x01	; 1
     260:	81 05       	cpc	r24, r1
     262:	91 05       	cpc	r25, r1
     264:	10 f0       	brcs	.+4      	; 0x26a <__EEPROM_REGION_LENGTH__+0x6a>
		myLCD.setBattery(LCD::EMPTY);
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	d6 cf       	rjmp	.-84     	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
	}else{
		myLCD.setBattery(LCD::NONE);
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	d4 cf       	rjmp	.-88     	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>

0000026e <__vector_7>:
		//we should shutdown here
	}
}

ISR(TIMER1_COMPA_vect){//every 100ms
     26e:	1f 92       	push	r1
     270:	0f 92       	push	r0
     272:	0f b6       	in	r0, 0x3f	; 63
     274:	0f 92       	push	r0
     276:	11 24       	eor	r1, r1
     278:	2f 93       	push	r18
     27a:	3f 93       	push	r19
     27c:	4f 93       	push	r20
     27e:	5f 93       	push	r21
     280:	6f 93       	push	r22
     282:	7f 93       	push	r23
     284:	8f 93       	push	r24
     286:	9f 93       	push	r25
     288:	af 93       	push	r26
     28a:	bf 93       	push	r27
     28c:	ef 93       	push	r30
     28e:	ff 93       	push	r31
	total_time_ts++;
     290:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     294:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     298:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     29c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     2a0:	01 96       	adiw	r24, 0x01	; 1
     2a2:	a1 1d       	adc	r26, r1
     2a4:	b1 1d       	adc	r27, r1
     2a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     2aa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2ae:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     2b2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	myProgram.myBeep.update();
     2b6:	8b ed       	ldi	r24, 0xDB	; 219
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN4Beep6updateEv>
	flags_state|=0x01;
     2be:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <flags_state>
     2c2:	81 60       	ori	r24, 0x01	; 1
     2c4:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <flags_state>
}
     2c8:	ff 91       	pop	r31
     2ca:	ef 91       	pop	r30
     2cc:	bf 91       	pop	r27
     2ce:	af 91       	pop	r26
     2d0:	9f 91       	pop	r25
     2d2:	8f 91       	pop	r24
     2d4:	7f 91       	pop	r23
     2d6:	6f 91       	pop	r22
     2d8:	5f 91       	pop	r21
     2da:	4f 91       	pop	r20
     2dc:	3f 91       	pop	r19
     2de:	2f 91       	pop	r18
     2e0:	0f 90       	pop	r0
     2e2:	0f be       	out	0x3f, r0	; 63
     2e4:	0f 90       	pop	r0
     2e6:	1f 90       	pop	r1
     2e8:	18 95       	reti

000002ea <__vector_13>:

ISR(USART0_RX_vect){
     2ea:	1f 92       	push	r1
     2ec:	0f 92       	push	r0
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	0f 92       	push	r0
     2f2:	11 24       	eor	r1, r1
     2f4:	2f 93       	push	r18
     2f6:	3f 93       	push	r19
     2f8:	4f 93       	push	r20
     2fa:	5f 93       	push	r21
     2fc:	6f 93       	push	r22
     2fe:	7f 93       	push	r23
     300:	8f 93       	push	r24
     302:	9f 93       	push	r25
     304:	af 93       	push	r26
     306:	bf 93       	push	r27
     308:	ef 93       	push	r30
     30a:	ff 93       	push	r31
	uart.receive();
     30c:	8c ee       	ldi	r24, 0xEC	; 236
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN4UART7receiveEv>
}
     314:	ff 91       	pop	r31
     316:	ef 91       	pop	r30
     318:	bf 91       	pop	r27
     31a:	af 91       	pop	r26
     31c:	9f 91       	pop	r25
     31e:	8f 91       	pop	r24
     320:	7f 91       	pop	r23
     322:	6f 91       	pop	r22
     324:	5f 91       	pop	r21
     326:	4f 91       	pop	r20
     328:	3f 91       	pop	r19
     32a:	2f 91       	pop	r18
     32c:	0f 90       	pop	r0
     32e:	0f be       	out	0x3f, r0	; 63
     330:	0f 90       	pop	r0
     332:	1f 90       	pop	r1
     334:	18 95       	reti

00000336 <_Z9writeTimev>:

void writeTime(void){
     336:	0f 93       	push	r16
     338:	1f 93       	push	r17
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
	uint8_t mins=total_time_ts/600;
     33e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     342:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     346:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     34a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     34e:	28 e5       	ldi	r18, 0x58	; 88
     350:	32 e0       	ldi	r19, 0x02	; 2
     352:	40 e0       	ldi	r20, 0x00	; 0
     354:	50 e0       	ldi	r21, 0x00	; 0
     356:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__udivmodsi4>
     35a:	c2 2f       	mov	r28, r18
	uint8_t secs=(total_time_ts/10)%60;
     35c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     360:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     364:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     368:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     36c:	2a e0       	ldi	r18, 0x0A	; 10
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	40 e0       	ldi	r20, 0x00	; 0
     372:	50 e0       	ldi	r21, 0x00	; 0
     374:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__udivmodsi4>
     378:	ca 01       	movw	r24, r20
     37a:	b9 01       	movw	r22, r18
     37c:	2c e3       	ldi	r18, 0x3C	; 60
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	40 e0       	ldi	r20, 0x00	; 0
     382:	50 e0       	ldi	r21, 0x00	; 0
     384:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__udivmodsi4>
     388:	d6 2f       	mov	r29, r22
     38a:	06 2f       	mov	r16, r22
	if(mins>9){
     38c:	ca 30       	cpi	r28, 0x0A	; 10
     38e:	30 f1       	brcs	.+76     	; 0x3dc <_Z9writeTimev+0xa6>
		myLCD.setDigit(0,mins/10);
     390:	8c 2f       	mov	r24, r28
     392:	6a e0       	ldi	r22, 0x0A	; 10
     394:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__udivmodqi4>
     398:	68 2f       	mov	r22, r24
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	0e 94 0a 03 	call	0x614	; 0x614 <_ZN3LCD8setDigitEhh>
	}else{
		myLCD.setDigit(0,LCD::Blank);
	}
	myLCD.setDigit(1,mins%10);
     3a0:	1a e0       	ldi	r17, 0x0A	; 10
     3a2:	8c 2f       	mov	r24, r28
     3a4:	61 2f       	mov	r22, r17
     3a6:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__udivmodqi4>
     3aa:	69 2f       	mov	r22, r25
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	0e 94 0a 03 	call	0x614	; 0x614 <_ZN3LCD8setDigitEhh>
	myLCD.setDigit(2,secs/10);
     3b2:	80 2f       	mov	r24, r16
     3b4:	61 2f       	mov	r22, r17
     3b6:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__udivmodqi4>
     3ba:	c9 2f       	mov	r28, r25
     3bc:	68 2f       	mov	r22, r24
     3be:	82 e0       	ldi	r24, 0x02	; 2
     3c0:	0e 94 0a 03 	call	0x614	; 0x614 <_ZN3LCD8setDigitEhh>
	myLCD.setDigit(3,secs%10);
     3c4:	6c 2f       	mov	r22, r28
     3c6:	83 e0       	ldi	r24, 0x03	; 3
     3c8:	0e 94 0a 03 	call	0x614	; 0x614 <_ZN3LCD8setDigitEhh>
	myLCD.setClk(secs%2);
     3cc:	8d 2f       	mov	r24, r29
     3ce:	81 70       	andi	r24, 0x01	; 1
}
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
		myLCD.setDigit(0,LCD::Blank);
	}
	myLCD.setDigit(1,mins%10);
	myLCD.setDigit(2,secs/10);
	myLCD.setDigit(3,secs%10);
	myLCD.setClk(secs%2);
     3d8:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <_ZN3LCD6setClkEb>
	uint8_t mins=total_time_ts/600;
	uint8_t secs=(total_time_ts/10)%60;
	if(mins>9){
		myLCD.setDigit(0,mins/10);
	}else{
		myLCD.setDigit(0,LCD::Blank);
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	0e 94 48 03 	call	0x690	; 0x690 <_ZN3LCD8setDigitEhNS_6SymbolE>
     3e4:	dd cf       	rjmp	.-70     	; 0x3a0 <_Z9writeTimev+0x6a>

000003e6 <_ZN4UARTC1Ev>:
#include "UART.h"

UART::UART(void){
     3e6:	dc 01       	movw	r26, r24
    UBRR0H = (UART_BAUD>>8);
     3e8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
    UBRR0L = UART_BAUD;	// set baud rate
     3ec:	83 e3       	ldi	r24, 0x33	; 51
     3ee:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
    UCSR0B|= (1<<TXEN0)|(1<<RXEN0);	// enable receiver and transmitter
     3f2:	e1 ec       	ldi	r30, 0xC1	; 193
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	90 81       	ld	r25, Z
     3f8:	98 61       	ori	r25, 0x18	; 24
     3fa:	90 83       	st	Z, r25
    // Async. mode, 8bit, No parity, 1 stop bit
    UCSR0C = (0<<UMSEL0)|(0<<UPM00)|(0<<USBS0)|(3<<UCSZ00)|(0<<UCPOL0);
     3fc:	86 e0       	ldi	r24, 0x06	; 6
     3fe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fc0c2>
    
    dataReady=false;
     402:	54 96       	adiw	r26, 0x14	; 20
     404:	1c 92       	st	X, r1
     406:	54 97       	sbiw	r26, 0x14	; 20
    data_len=0;
     408:	55 96       	adiw	r26, 0x15	; 21
     40a:	1c 92       	st	X, r1
    
    UCSR0B |= (1<<RXCIE0);
     40c:	80 81       	ld	r24, Z
     40e:	80 68       	ori	r24, 0x80	; 128
     410:	80 83       	st	Z, r24
}
     412:	08 95       	ret

00000414 <_ZN4UARTD1Ev>:

UART::~UART(void){
    
}
     414:	08 95       	ret

00000416 <_ZN4UART8sendByteEc>:

void UART::sendByte(char b){
    while (!( UCSR0A & (1<<UDRE0)));	// wait while register is free
     416:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
     41a:	85 ff       	sbrs	r24, 5
     41c:	fc cf       	rjmp	.-8      	; 0x416 <_ZN4UART8sendByteEc>
    UDR0 = b;	// load data in the register
     41e:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
}
     422:	08 95       	ret

00000424 <_ZN4UART10sendStringEPc>:

void UART::sendString(char* data){
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	8c 01       	movw	r16, r24
     42e:	eb 01       	movw	r28, r22
    while(*data>0){
     430:	69 91       	ld	r22, Y+
     432:	66 23       	and	r22, r22
     434:	21 f0       	breq	.+8      	; 0x43e <_ZN4UART10sendStringEPc+0x1a>
		sendByte(*data++);
     436:	c8 01       	movw	r24, r16
     438:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN4UART8sendByteEc>
    while (!( UCSR0A & (1<<UDRE0)));	// wait while register is free
    UDR0 = b;	// load data in the register
}

void UART::sendString(char* data){
    while(*data>0){
     43c:	f9 cf       	rjmp	.-14     	; 0x430 <_ZN4UART10sendStringEPc+0xc>
		sendByte(*data++);
	}
}
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	1f 91       	pop	r17
     444:	0f 91       	pop	r16
     446:	08 95       	ret

00000448 <_ZN4UART10sendStringEPcb>:

void UART::sendString(char* data, bool lineReturn){
     448:	ff 92       	push	r15
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	8c 01       	movw	r16, r24
     454:	f4 2e       	mov	r15, r20
     456:	eb 01       	movw	r28, r22
    while(*data>0){
     458:	69 91       	ld	r22, Y+
     45a:	66 23       	and	r22, r22
     45c:	21 f0       	breq	.+8      	; 0x466 <_ZN4UART10sendStringEPcb+0x1e>
		sendByte(*data++);
     45e:	c8 01       	movw	r24, r16
     460:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN4UART8sendByteEc>
		sendByte(*data++);
	}
}

void UART::sendString(char* data, bool lineReturn){
    while(*data>0){
     464:	f9 cf       	rjmp	.-14     	; 0x458 <_ZN4UART10sendStringEPcb+0x10>
		sendByte(*data++);
	}
    if(lineReturn){
     466:	ff 20       	and	r15, r15
     468:	69 f0       	breq	.+26     	; 0x484 <_ZN4UART10sendStringEPcb+0x3c>
        sendByte('\r');
     46a:	6d e0       	ldi	r22, 0x0D	; 13
     46c:	c8 01       	movw	r24, r16
     46e:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN4UART8sendByteEc>
        sendByte('\n');
     472:	6a e0       	ldi	r22, 0x0A	; 10
     474:	c8 01       	movw	r24, r16
    }
}
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	ff 90       	pop	r15
    while(*data>0){
		sendByte(*data++);
	}
    if(lineReturn){
        sendByte('\r');
        sendByte('\n');
     480:	0c 94 0b 02 	jmp	0x416	; 0x416 <_ZN4UART8sendByteEc>
    }
}
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	ff 90       	pop	r15
     48e:	08 95       	ret

00000490 <_ZN4UART6sendNbElhb>:

void UART::sendNb(int32_t nb,uint8_t base, bool lineReturn){
     490:	ef 92       	push	r14
     492:	ff 92       	push	r15
     494:	0f 93       	push	r16
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	a3 97       	sbiw	r28, 0x23	; 35
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	7c 01       	movw	r14, r24
     4ac:	cb 01       	movw	r24, r22
     4ae:	ba 01       	movw	r22, r20
    char buffer [35];
    ltoa(nb,buffer,base);
     4b0:	30 e0       	ldi	r19, 0x00	; 0
extern __inline__ __ATTR_GNU_INLINE__
char *ltoa (long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__ltoa (long, char *, int);
	return __ltoa (__val, __s, __radix);
     4b2:	ae 01       	movw	r20, r28
     4b4:	4f 5f       	subi	r20, 0xFF	; 255
     4b6:	5f 4f       	sbci	r21, 0xFF	; 255
     4b8:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ltoa>
    sendString(buffer,lineReturn);
     4bc:	40 2f       	mov	r20, r16
     4be:	be 01       	movw	r22, r28
     4c0:	6f 5f       	subi	r22, 0xFF	; 255
     4c2:	7f 4f       	sbci	r23, 0xFF	; 255
     4c4:	c7 01       	movw	r24, r14
     4c6:	0e 94 24 02 	call	0x448	; 0x448 <_ZN4UART10sendStringEPcb>
}
     4ca:	a3 96       	adiw	r28, 0x23	; 35
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	f8 94       	cli
     4d0:	de bf       	out	0x3e, r29	; 62
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	cd bf       	out	0x3d, r28	; 61
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	08 95       	ret

000004e2 <_ZN4UART6sendNbEl>:

void UART::sendNb(int32_t nb){
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	2c 97       	sbiw	r28, 0x0c	; 12
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	f8 94       	cli
     4f4:	de bf       	out	0x3e, r29	; 62
     4f6:	0f be       	out	0x3f, r0	; 63
     4f8:	cd bf       	out	0x3d, r28	; 61
     4fa:	8c 01       	movw	r16, r24
     4fc:	cb 01       	movw	r24, r22
     4fe:	ba 01       	movw	r22, r20
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
     500:	2a e0       	ldi	r18, 0x0A	; 10
     502:	ae 01       	movw	r20, r28
     504:	4f 5f       	subi	r20, 0xFF	; 255
     506:	5f 4f       	sbci	r21, 0xFF	; 255
     508:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__ltoa_ncheck>
    char buffer [12];//32 bits in decimal is 4milions, 10 digits
    ltoa(nb,buffer,10);
    sendString(buffer);
     50c:	be 01       	movw	r22, r28
     50e:	6f 5f       	subi	r22, 0xFF	; 255
     510:	7f 4f       	sbci	r23, 0xFF	; 255
     512:	c8 01       	movw	r24, r16
     514:	0e 94 12 02 	call	0x424	; 0x424 <_ZN4UART10sendStringEPc>
    sendByte('\r');
     518:	6d e0       	ldi	r22, 0x0D	; 13
     51a:	c8 01       	movw	r24, r16
     51c:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN4UART8sendByteEc>
    sendByte('\n');
     520:	6a e0       	ldi	r22, 0x0A	; 10
     522:	c8 01       	movw	r24, r16
     524:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN4UART8sendByteEc>
}
     528:	2c 96       	adiw	r28, 0x0c	; 12
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	f8 94       	cli
     52e:	de bf       	out	0x3e, r29	; 62
     530:	0f be       	out	0x3f, r0	; 63
     532:	cd bf       	out	0x3d, r28	; 61
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	1f 91       	pop	r17
     53a:	0f 91       	pop	r16
     53c:	08 95       	ret

0000053e <_ZN4UART7getCharEv>:

char UART::getChar(void){
     53e:	cf 93       	push	r28
    //while(!(UCSRA) & (1<<RXC));	// wait while data is being received
    char d=UDR0;
     540:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
#ifdef UART_ECHO
    sendByte(d);
     544:	6c 2f       	mov	r22, r28
     546:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN4UART8sendByteEc>
#endif
    return d;	// return 8-bit data
}
     54a:	8c 2f       	mov	r24, r28
     54c:	cf 91       	pop	r28
     54e:	08 95       	ret

00000550 <_ZN4UART7receiveEv>:

void UART::receive(void){
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	ec 01       	movw	r28, r24
    char d=getChar();
     556:	0e 94 9f 02 	call	0x53e	; 0x53e <_ZN4UART7getCharEv>
    if(d=='\r'){
     55a:	8d 30       	cpi	r24, 0x0D	; 13
     55c:	29 f4       	brne	.+10     	; 0x568 <_ZN4UART7receiveEv+0x18>
        dataReady=true;
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	8c 8b       	std	Y+20, r24	; 0x14
    }else{    
        data[data_len]=d;
        data_len++;
    }
}
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	08 95       	ret
void UART::receive(void){
    char d=getChar();
    if(d=='\r'){
        dataReady=true;
    }else{    
        data[data_len]=d;
     568:	9d 89       	ldd	r25, Y+21	; 0x15
     56a:	fe 01       	movw	r30, r28
     56c:	e9 0f       	add	r30, r25
     56e:	f1 1d       	adc	r31, r1
     570:	80 83       	st	Z, r24
        data_len++;
     572:	9f 5f       	subi	r25, 0xFF	; 255
     574:	9d 8b       	std	Y+21, r25	; 0x15
    }
}
     576:	f5 cf       	rjmp	.-22     	; 0x562 <_ZN4UART7receiveEv+0x12>

00000578 <_ZN4UART8retrieveEv>:

char* UART::retrieve(void){
    data[data_len]='\0';
     578:	dc 01       	movw	r26, r24
     57a:	55 96       	adiw	r26, 0x15	; 21
     57c:	ec 91       	ld	r30, X
     57e:	55 97       	sbiw	r26, 0x15	; 21
     580:	e8 0f       	add	r30, r24
     582:	f9 2f       	mov	r31, r25
     584:	f1 1d       	adc	r31, r1
     586:	10 82       	st	Z, r1
    dataReady=false;
     588:	54 96       	adiw	r26, 0x14	; 20
     58a:	1c 92       	st	X, r1
     58c:	54 97       	sbiw	r26, 0x14	; 20
    data_len=0;
     58e:	55 96       	adiw	r26, 0x15	; 21
     590:	1c 92       	st	X, r1
    return data;
}
     592:	08 95       	ret

00000594 <_ZN4UART15isDataAvailableEv>:

bool UART::isDataAvailable(void){
     594:	fc 01       	movw	r30, r24
    return dataReady & (data_len!=0);
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	85 89       	ldd	r24, Z+21	; 0x15
     59a:	81 11       	cpse	r24, r1
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <_ZN4UART15isDataAvailableEv+0xc>
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	84 89       	ldd	r24, Z+20	; 0x14
}
     5a2:	89 23       	and	r24, r25
     5a4:	08 95       	ret

000005a6 <_ZN3LCDC1Eb>:
		{{4,4,4,5,5,5,5},{&LCDDR0,&LCDDR5,&LCDDR10,&LCDDR15,&LCDDR10,&LCDDR0,&LCDDR5}},
		{{2,2,2,3,3,3,3},{&LCDDR0,&LCDDR5,&LCDDR10,&LCDDR15,&LCDDR10,&LCDDR0,&LCDDR5}},
		{{0,0,0,1,1,1,1},{&LCDDR0,&LCDDR5,&LCDDR10,&LCDDR15,&LCDDR10,&LCDDR0,&LCDDR5}}};

LCD::LCD(bool lowP){
	DDRB |= (1 << PB0);
     5a6:	20 9a       	sbi	0x04, 0	; 4
	PORTB |= (1<<PB0);
     5a8:	28 9a       	sbi	0x05, 0	; 5
	LCDCRB|=(1<<LCDMUX1)|(1<<LCDMUX0);
     5aa:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
     5ae:	80 63       	ori	r24, 0x30	; 48
     5b0:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	
	if(lowP){
		LCDFRR|=(1<<LCDPS2)|(1<<LCDPS1)|(1<<LCDPS0)|(1<<LCDCD2)|(1<<LCDCD1)|(1<<LCDCD0); // prescaler 4096, division factor 32 & K=8 for duty 1/4
     5b4:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
LCD::LCD(bool lowP){
	DDRB |= (1 << PB0);
	PORTB |= (1<<PB0);
	LCDCRB|=(1<<LCDMUX1)|(1<<LCDMUX0);
	
	if(lowP){
     5b8:	66 23       	and	r22, r22
     5ba:	71 f0       	breq	.+28     	; 0x5d8 <_ZN3LCDC1Eb+0x32>
		LCDFRR|=(1<<LCDPS2)|(1<<LCDPS1)|(1<<LCDPS0)|(1<<LCDCD2)|(1<<LCDCD1)|(1<<LCDCD0); // prescaler 4096, division factor 32 & K=8 for duty 1/4
     5bc:	87 67       	ori	r24, 0x77	; 119
     5be:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
		LCDCCR|=(1<<LCDDC0);// 2.6V 70µs
     5c2:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     5c6:	80 62       	ori	r24, 0x20	; 32
     5c8:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
		LCDCRA|=(1<<LCDEN)|(1<<LCDAB);//LCDAB=low power waveform
     5cc:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
     5d0:	80 6c       	ori	r24, 0xC0	; 192
	}else{
		LCDFRR|=(1<<LCDPS2)|(1<<LCDPS1)|(1<<LCDPS0)|(1<<LCDCD2)|(1<<LCDCD2)|(1<<LCDCD0); // prescaler 4096, division factor 8 & K=8 for duty 1/4
		LCDCCR|=(1<<LCDCC1)|(1<<LCDCC2)|(1<<LCDDC1);//2.7V 1150µs
		LCDCRA|=(1<<LCDEN);
     5d2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	}
}
     5d6:	08 95       	ret
	if(lowP){
		LCDFRR|=(1<<LCDPS2)|(1<<LCDPS1)|(1<<LCDPS0)|(1<<LCDCD2)|(1<<LCDCD1)|(1<<LCDCD0); // prescaler 4096, division factor 32 & K=8 for duty 1/4
		LCDCCR|=(1<<LCDDC0);// 2.6V 70µs
		LCDCRA|=(1<<LCDEN)|(1<<LCDAB);//LCDAB=low power waveform
	}else{
		LCDFRR|=(1<<LCDPS2)|(1<<LCDPS1)|(1<<LCDPS0)|(1<<LCDCD2)|(1<<LCDCD2)|(1<<LCDCD0); // prescaler 4096, division factor 8 & K=8 for duty 1/4
     5d8:	85 67       	ori	r24, 0x75	; 117
     5da:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
		LCDCCR|=(1<<LCDCC1)|(1<<LCDCC2)|(1<<LCDDC1);//2.7V 1150µs
     5de:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     5e2:	86 64       	ori	r24, 0x46	; 70
     5e4:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
		LCDCRA|=(1<<LCDEN);
     5e8:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
     5ec:	80 68       	ori	r24, 0x80	; 128
     5ee:	f1 cf       	rjmp	.-30     	; 0x5d2 <_ZN3LCDC1Eb+0x2c>

000005f0 <_ZN3LCDD1Ev>:
	}
}

LCD::~LCD() {
	LCDCRA|=(1<<LCDBL);
     5f0:	e4 ee       	ldi	r30, 0xE4	; 228
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	80 81       	ld	r24, Z
     5f6:	81 60       	ori	r24, 0x01	; 1
     5f8:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5fa:	2f ef       	ldi	r18, 0xFF	; 255
     5fc:	84 e3       	ldi	r24, 0x34	; 52
     5fe:	9c e0       	ldi	r25, 0x0C	; 12
     600:	21 50       	subi	r18, 0x01	; 1
     602:	80 40       	sbci	r24, 0x00	; 0
     604:	90 40       	sbci	r25, 0x00	; 0
     606:	e1 f7       	brne	.-8      	; 0x600 <_ZN3LCDD1Ev+0x10>
     608:	00 c0       	rjmp	.+0      	; 0x60a <_ZN3LCDD1Ev+0x1a>
     60a:	00 00       	nop
	_delay_ms(500);
	LCDCRA&=~(1<<LCDEN);
     60c:	80 81       	ld	r24, Z
     60e:	8f 77       	andi	r24, 0x7F	; 127
     610:	80 83       	st	Z, r24
}
     612:	08 95       	ret

00000614 <_ZN3LCD8setDigitEhh>:

void LCD::setDigit(uint8_t dig, uint8_t nb) {
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
	for(uint8_t j=0;j<8;j++){
		if(NbMap[nb] & (1<<j)){
     61a:	e6 2f       	mov	r30, r22
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	ee 57       	subi	r30, 0x7E	; 126
     620:	fe 4f       	sbci	r31, 0xFE	; 254
     622:	60 81       	ld	r22, Z
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	15 e1       	ldi	r17, 0x15	; 21
     628:	81 9f       	mul	r24, r17
     62a:	c0 01       	movw	r24, r0
     62c:	11 24       	eor	r1, r1
     62e:	8c 5f       	subi	r24, 0xFC	; 252
     630:	9e 4f       	sbci	r25, 0xFE	; 254
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	a1 e0       	ldi	r26, 0x01	; 1
     638:	b0 e0       	ldi	r27, 0x00	; 0
     63a:	f9 01       	movw	r30, r18
     63c:	ee 0f       	add	r30, r30
     63e:	ff 1f       	adc	r31, r31
     640:	e8 0f       	add	r30, r24
     642:	f9 1f       	adc	r31, r25
     644:	07 80       	ldd	r0, Z+7	; 0x07
     646:	f0 85       	ldd	r31, Z+8	; 0x08
     648:	e0 2d       	mov	r30, r0
     64a:	ec 01       	movw	r28, r24
     64c:	c2 0f       	add	r28, r18
     64e:	d3 1f       	adc	r29, r19
     650:	48 81       	ld	r20, Y
     652:	ed 01       	movw	r28, r26
     654:	02 c0       	rjmp	.+4      	; 0x65a <_ZN3LCD8setDigitEhh+0x46>
     656:	cc 0f       	add	r28, r28
     658:	dd 1f       	adc	r29, r29
     65a:	4a 95       	dec	r20
     65c:	e2 f7       	brpl	.-8      	; 0x656 <_ZN3LCD8setDigitEhh+0x42>
     65e:	ae 01       	movw	r20, r28
     660:	eb 01       	movw	r28, r22
     662:	02 2e       	mov	r0, r18
     664:	02 c0       	rjmp	.+4      	; 0x66a <_ZN3LCD8setDigitEhh+0x56>
     666:	d5 95       	asr	r29
     668:	c7 95       	ror	r28
     66a:	0a 94       	dec	r0
     66c:	e2 f7       	brpl	.-8      	; 0x666 <_ZN3LCD8setDigitEhh+0x52>
			*(digits[dig].dr[j]) |= (1<<digits[dig].s[j]);
     66e:	50 81       	ld	r21, Z
	LCDCRA&=~(1<<LCDEN);
}

void LCD::setDigit(uint8_t dig, uint8_t nb) {
	for(uint8_t j=0;j<8;j++){
		if(NbMap[nb] & (1<<j)){
     670:	c0 ff       	sbrs	r28, 0
     672:	0b c0       	rjmp	.+22     	; 0x68a <_ZN3LCD8setDigitEhh+0x76>
			*(digits[dig].dr[j]) |= (1<<digits[dig].s[j]);
     674:	45 2b       	or	r20, r21
		}else{
			*(digits[dig].dr[j]) &= ~(1<<digits[dig].s[j]);
     676:	40 83       	st	Z, r20
     678:	2f 5f       	subi	r18, 0xFF	; 255
     67a:	3f 4f       	sbci	r19, 0xFF	; 255
	_delay_ms(500);
	LCDCRA&=~(1<<LCDEN);
}

void LCD::setDigit(uint8_t dig, uint8_t nb) {
	for(uint8_t j=0;j<8;j++){
     67c:	28 30       	cpi	r18, 0x08	; 8
     67e:	31 05       	cpc	r19, r1
     680:	e1 f6       	brne	.-72     	; 0x63a <_ZN3LCD8setDigitEhh+0x26>
			*(digits[dig].dr[j]) |= (1<<digits[dig].s[j]);
		}else{
			*(digits[dig].dr[j]) &= ~(1<<digits[dig].s[j]);
		}	
	}
}
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	08 95       	ret
void LCD::setDigit(uint8_t dig, uint8_t nb) {
	for(uint8_t j=0;j<8;j++){
		if(NbMap[nb] & (1<<j)){
			*(digits[dig].dr[j]) |= (1<<digits[dig].s[j]);
		}else{
			*(digits[dig].dr[j]) &= ~(1<<digits[dig].s[j]);
     68a:	40 95       	com	r20
     68c:	45 23       	and	r20, r21
     68e:	f3 cf       	rjmp	.-26     	; 0x676 <_ZN3LCD8setDigitEhh+0x62>

00000690 <_ZN3LCD8setDigitEhNS_6SymbolE>:
		}	
	}
}

void LCD::setDigit(uint8_t dig, Symbol sy) {
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	15 e1       	ldi	r17, 0x15	; 21
     698:	81 9f       	mul	r24, r17
     69a:	c0 01       	movw	r24, r0
     69c:	11 24       	eor	r1, r1
     69e:	8c 5f       	subi	r24, 0xFC	; 252
     6a0:	9e 4f       	sbci	r25, 0xFE	; 254
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	a1 e0       	ldi	r26, 0x01	; 1
     6a8:	b0 e0       	ldi	r27, 0x00	; 0
	for(uint8_t j=0;j<8;j++){
		if(sy & (1<<j)){
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	f9 01       	movw	r30, r18
     6ae:	ee 0f       	add	r30, r30
     6b0:	ff 1f       	adc	r31, r31
     6b2:	e8 0f       	add	r30, r24
     6b4:	f9 1f       	adc	r31, r25
     6b6:	07 80       	ldd	r0, Z+7	; 0x07
     6b8:	f0 85       	ldd	r31, Z+8	; 0x08
     6ba:	e0 2d       	mov	r30, r0
     6bc:	ec 01       	movw	r28, r24
     6be:	c2 0f       	add	r28, r18
     6c0:	d3 1f       	adc	r29, r19
     6c2:	48 81       	ld	r20, Y
     6c4:	ed 01       	movw	r28, r26
     6c6:	02 c0       	rjmp	.+4      	; 0x6cc <_ZN3LCD8setDigitEhNS_6SymbolE+0x3c>
     6c8:	cc 0f       	add	r28, r28
     6ca:	dd 1f       	adc	r29, r29
     6cc:	4a 95       	dec	r20
     6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <_ZN3LCD8setDigitEhNS_6SymbolE+0x38>
     6d0:	ae 01       	movw	r20, r28
     6d2:	eb 01       	movw	r28, r22
     6d4:	02 2e       	mov	r0, r18
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <_ZN3LCD8setDigitEhNS_6SymbolE+0x4c>
     6d8:	d5 95       	asr	r29
     6da:	c7 95       	ror	r28
     6dc:	0a 94       	dec	r0
     6de:	e2 f7       	brpl	.-8      	; 0x6d8 <_ZN3LCD8setDigitEhNS_6SymbolE+0x48>
			*(digits[dig].dr[j]) |= (1<<digits[dig].s[j]);
     6e0:	50 81       	ld	r21, Z
	}
}

void LCD::setDigit(uint8_t dig, Symbol sy) {
	for(uint8_t j=0;j<8;j++){
		if(sy & (1<<j)){
     6e2:	c0 ff       	sbrs	r28, 0
     6e4:	0b c0       	rjmp	.+22     	; 0x6fc <_ZN3LCD8setDigitEhNS_6SymbolE+0x6c>
			*(digits[dig].dr[j]) |= (1<<digits[dig].s[j]);
     6e6:	45 2b       	or	r20, r21
		}else{
			*(digits[dig].dr[j]) &= ~(1<<digits[dig].s[j]);
     6e8:	40 83       	st	Z, r20
     6ea:	2f 5f       	subi	r18, 0xFF	; 255
     6ec:	3f 4f       	sbci	r19, 0xFF	; 255
		}	
	}
}

void LCD::setDigit(uint8_t dig, Symbol sy) {
	for(uint8_t j=0;j<8;j++){
     6ee:	28 30       	cpi	r18, 0x08	; 8
     6f0:	31 05       	cpc	r19, r1
     6f2:	e1 f6       	brne	.-72     	; 0x6ac <_ZN3LCD8setDigitEhNS_6SymbolE+0x1c>
			*(digits[dig].dr[j]) |= (1<<digits[dig].s[j]);
		}else{
			*(digits[dig].dr[j]) &= ~(1<<digits[dig].s[j]);
		}
	}
}
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	08 95       	ret
void LCD::setDigit(uint8_t dig, Symbol sy) {
	for(uint8_t j=0;j<8;j++){
		if(sy & (1<<j)){
			*(digits[dig].dr[j]) |= (1<<digits[dig].s[j]);
		}else{
			*(digits[dig].dr[j]) &= ~(1<<digits[dig].s[j]);
     6fc:	40 95       	com	r20
     6fe:	45 23       	and	r20, r21
     700:	f3 cf       	rjmp	.-26     	; 0x6e8 <_ZN3LCD8setDigitEhNS_6SymbolE+0x58>

00000702 <_ZN3LCD10setBatteryENS_7BatteryE>:
		}
	}
}

void LCD::setBattery(Battery b) {
	switch(b){
     702:	88 30       	cpi	r24, 0x08	; 8
     704:	08 f0       	brcs	.+2      	; 0x708 <_ZN3LCD10setBatteryENS_7BatteryE+0x6>
     706:	41 c0       	rjmp	.+130    	; 0x78a <_ZN3LCD10setBatteryENS_7BatteryE+0x88>
     708:	e8 2f       	mov	r30, r24
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	e4 57       	subi	r30, 0x74	; 116
     70e:	fc 4f       	sbci	r31, 0xFC	; 252
		LCDDR6 &=~(1<<4);
		LCDDR11 |=(1<<4);
		LCDDR16 |=(1<<4);
		break;
	case FULL:
		LCDDR1 |=(1<<4);
     710:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
		}
	}
}

void LCD::setBattery(Battery b) {
	switch(b){
     714:	0c 94 aa 0b 	jmp	0x1754	; 0x1754 <__tablejump2__>
     718:	94 03       	fmuls	r17, r20
     71a:	a0 03       	fmuls	r18, r16
     71c:	a2 03       	fmuls	r18, r18
     71e:	b3 03       	fmuls	r19, r19
     720:	c6 03       	fmuls	r20, r22
     722:	cd 03       	fmulsu	r20, r21
     724:	cf 03       	fmulsu	r20, r23
     726:	db 03       	fmulsu	r21, r19
	case NONE:
		LCDDR1 &=~(1<<4);
     728:	8f 7e       	andi	r24, 0xEF	; 239
		LCDDR6 &=~(1<<4);
		LCDDR11 &=~(1<<4);
		LCDDR16 &=~(1<<4);
		break;
	case EMPTY:
		LCDDR1 |=(1<<4);
     72a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
		LCDDR6 &=~(1<<4);
     72e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
     732:	8f 7e       	andi	r24, 0xEF	; 239
		LCDDR11 |=(1<<4);
		LCDDR16 &=~(1<<4);
		break;
	case THIRD:
		LCDDR1 &=~(1<<4);
		LCDDR6 |=(1<<4);
     734:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
		LCDDR11 &=~(1<<4);
     738:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
     73c:	8f 7e       	andi	r24, 0xEF	; 239
     73e:	1e c0       	rjmp	.+60     	; 0x77c <_ZN3LCD10setBatteryENS_7BatteryE+0x7a>
		LCDDR6 &=~(1<<4);
		LCDDR11 &=~(1<<4);
		LCDDR16 &=~(1<<4);
		break;
	case EMPTY:
		LCDDR1 |=(1<<4);
     740:	80 61       	ori	r24, 0x10	; 16
     742:	f3 cf       	rjmp	.-26     	; 0x72a <_ZN3LCD10setBatteryENS_7BatteryE+0x28>
		LCDDR6 &=~(1<<4);
		LCDDR11 &=~(1<<4);
		LCDDR16 &=~(1<<4);
		break;
	case FIRST:
		LCDDR1 &=~(1<<4);
     744:	8f 7e       	andi	r24, 0xEF	; 239
		LCDDR6 |=(1<<4);
		LCDDR11 &=~(1<<4);
		LCDDR16 &=~(1<<4);
		break;
	case ONEBAR:
		LCDDR1 |=(1<<4);
     746:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
		LCDDR6 &=~(1<<4);
     74a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
     74e:	8f 7e       	andi	r24, 0xEF	; 239
     750:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
		LCDDR11 &=~(1<<4);
     754:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
     758:	8f 7e       	andi	r24, 0xEF	; 239
		LCDDR16 |=(1<<4);
		break;
	case FULL:
		LCDDR1 |=(1<<4);
		LCDDR6 |=(1<<4);
		LCDDR11 |=(1<<4);
     75a:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
		LCDDR16 |=(1<<4);
     75e:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
     762:	80 61       	ori	r24, 0x10	; 16
     764:	10 c0       	rjmp	.+32     	; 0x786 <_ZN3LCD10setBatteryENS_7BatteryE+0x84>
		LCDDR6 &=~(1<<4);
		LCDDR11 &=~(1<<4);
		LCDDR16 |=(1<<4);
		break;
	case SECOND:
		LCDDR1 &=~(1<<4);
     766:	8f 7e       	andi	r24, 0xEF	; 239
     768:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
		LCDDR6 &=~(1<<4);
     76c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
     770:	8f 7e       	andi	r24, 0xEF	; 239
     772:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
		LCDDR11 |=(1<<4);
     776:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
     77a:	80 61       	ori	r24, 0x10	; 16
		LCDDR16 &=~(1<<4);
		break;
	case THIRD:
		LCDDR1 &=~(1<<4);
		LCDDR6 |=(1<<4);
		LCDDR11 &=~(1<<4);
     77c:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
		LCDDR16 &=~(1<<4);
     780:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
     784:	8f 7e       	andi	r24, 0xEF	; 239
		break;
	case FULL:
		LCDDR1 |=(1<<4);
		LCDDR6 |=(1<<4);
		LCDDR11 |=(1<<4);
		LCDDR16 |=(1<<4);
     786:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
		break;
	}
}
     78a:	08 95       	ret
		LCDDR6 &=~(1<<4);
		LCDDR11 |=(1<<4);
		LCDDR16 &=~(1<<4);
		break;
	case THIRD:
		LCDDR1 &=~(1<<4);
     78c:	8f 7e       	andi	r24, 0xEF	; 239
     78e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
		LCDDR6 |=(1<<4);
     792:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
     796:	80 61       	ori	r24, 0x10	; 16
     798:	cd cf       	rjmp	.-102    	; 0x734 <_ZN3LCD10setBatteryENS_7BatteryE+0x32>
		LCDDR11 &=~(1<<4);
		LCDDR16 &=~(1<<4);
		break;
	case ONEBAR:
		LCDDR1 |=(1<<4);
     79a:	80 61       	ori	r24, 0x10	; 16
     79c:	d4 cf       	rjmp	.-88     	; 0x746 <_ZN3LCD10setBatteryENS_7BatteryE+0x44>
		LCDDR6 &=~(1<<4);
		LCDDR11 &=~(1<<4);
		LCDDR16 |=(1<<4);
		break;
	case TWOBAR:
		LCDDR1 |=(1<<4);
     79e:	80 61       	ori	r24, 0x10	; 16
     7a0:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
		LCDDR6 &=~(1<<4);
     7a4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
     7a8:	8f 7e       	andi	r24, 0xEF	; 239
		LCDDR11 |=(1<<4);
		LCDDR16 |=(1<<4);
		break;
	case FULL:
		LCDDR1 |=(1<<4);
		LCDDR6 |=(1<<4);
     7aa:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
		LCDDR11 |=(1<<4);
     7ae:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
     7b2:	80 61       	ori	r24, 0x10	; 16
     7b4:	d2 cf       	rjmp	.-92     	; 0x75a <_ZN3LCD10setBatteryENS_7BatteryE+0x58>
		LCDDR6 &=~(1<<4);
		LCDDR11 |=(1<<4);
		LCDDR16 |=(1<<4);
		break;
	case FULL:
		LCDDR1 |=(1<<4);
     7b6:	80 61       	ori	r24, 0x10	; 16
     7b8:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
		LCDDR6 |=(1<<4);
     7bc:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
     7c0:	80 61       	ori	r24, 0x10	; 16
     7c2:	f3 cf       	rjmp	.-26     	; 0x7aa <_ZN3LCD10setBatteryENS_7BatteryE+0xa8>

000007c4 <_ZN3LCD5setDPEb>:
		break;
	}
}

void LCD::setDP(bool b) {
	if(b){
     7c4:	88 23       	and	r24, r24
     7c6:	31 f0       	breq	.+12     	; 0x7d4 <_ZN3LCD5setDPEb+0x10>
		LCDDR15|=(1<<4);
     7c8:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7fc0fb>
     7cc:	80 61       	ori	r24, 0x10	; 16
	}else{
		LCDDR15&=~(1<<4);
     7ce:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7fc0fb>
	}
}
     7d2:	08 95       	ret

void LCD::setDP(bool b) {
	if(b){
		LCDDR15|=(1<<4);
	}else{
		LCDDR15&=~(1<<4);
     7d4:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7fc0fb>
     7d8:	8f 7e       	andi	r24, 0xEF	; 239
     7da:	f9 cf       	rjmp	.-14     	; 0x7ce <_ZN3LCD5setDPEb+0xa>

000007dc <_ZN3LCD6setClkEb>:
	}
}

void LCD::setClk(bool b) {
	if(b){
     7dc:	88 23       	and	r24, r24
     7de:	31 f0       	breq	.+12     	; 0x7ec <_ZN3LCD6setClkEb+0x10>
		LCDDR16|=1;
     7e0:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
     7e4:	81 60       	ori	r24, 0x01	; 1
	}else{
		LCDDR16&=~1;
     7e6:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
	}
}
     7ea:	08 95       	ret

void LCD::setClk(bool b) {
	if(b){
		LCDDR16|=1;
	}else{
		LCDDR16&=~1;
     7ec:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
     7f0:	8e 7f       	andi	r24, 0xFE	; 254
     7f2:	f9 cf       	rjmp	.-14     	; 0x7e6 <_ZN3LCD6setClkEb+0xa>

000007f4 <_ZN3LCD5getDPEv>:
	}
}

bool LCD::getDP(void) {
	return (LCDDR15 & (1<<4));
     7f4:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7fc0fb>
}
     7f8:	82 95       	swap	r24
     7fa:	81 70       	andi	r24, 0x01	; 1
     7fc:	08 95       	ret

000007fe <_ZN3LCD6getClkEv>:

bool LCD::getClk(void) {
	return (LCDDR16 & 1);
     7fe:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
}
     802:	81 70       	andi	r24, 0x01	; 1
     804:	08 95       	ret

00000806 <_ZN3LCD5setNbElh>:



uint8_t LCD::setNb(int32_t nb, uint8_t dig) {
     806:	4f 92       	push	r4
     808:	5f 92       	push	r5
     80a:	6f 92       	push	r6
     80c:	7f 92       	push	r7
     80e:	8f 92       	push	r8
     810:	9f 92       	push	r9
     812:	af 92       	push	r10
     814:	bf 92       	push	r11
     816:	cf 92       	push	r12
     818:	df 92       	push	r13
     81a:	ef 92       	push	r14
     81c:	ff 92       	push	r15
     81e:	0f 93       	push	r16
     820:	1f 93       	push	r17
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	6b 01       	movw	r12, r22
     828:	7c 01       	movw	r14, r24
     82a:	c4 2f       	mov	r28, r20
	if(nb>999999 || nb <-99999){
     82c:	dc 01       	movw	r26, r24
     82e:	cb 01       	movw	r24, r22
     830:	81 56       	subi	r24, 0x61	; 97
     832:	99 47       	sbci	r25, 0x79	; 121
     834:	ae 4f       	sbci	r26, 0xFE	; 254
     836:	bf 4f       	sbci	r27, 0xFF	; 255
     838:	8f 3d       	cpi	r24, 0xDF	; 223
     83a:	98 4c       	sbci	r25, 0xC8	; 200
     83c:	a0 41       	sbci	r26, 0x10	; 16
     83e:	b1 05       	cpc	r27, r1
     840:	08 f0       	brcs	.+2      	; 0x844 <_ZN3LCD5setNbElh+0x3e>
     842:	52 c0       	rjmp	.+164    	; 0x8e8 <_ZN3LCD5setNbElh+0xe2>
		return 1;
	}
	int8_t d=5;
	uint8_t min=6-dig;
     844:	86 e0       	ldi	r24, 0x06	; 6
     846:	84 1b       	sub	r24, r20
	if(nb<0){
     848:	f7 fe       	sbrs	r15, 7
     84a:	0d c0       	rjmp	.+26     	; 0x866 <_ZN3LCD5setNbElh+0x60>
		setDigit(min,Minus);
     84c:	60 e4       	ldi	r22, 0x40	; 64
     84e:	0e 94 48 03 	call	0x690	; 0x690 <_ZN3LCD8setDigitEhNS_6SymbolE>
		min++;
     852:	87 e0       	ldi	r24, 0x07	; 7
     854:	8c 1b       	sub	r24, r28
		nb=(~nb)+1;
     856:	f0 94       	com	r15
     858:	e0 94       	com	r14
     85a:	d0 94       	com	r13
     85c:	c0 94       	com	r12
     85e:	c1 1c       	adc	r12, r1
     860:	d1 1c       	adc	r13, r1
     862:	e1 1c       	adc	r14, r1
     864:	f1 1c       	adc	r15, r1
	return (LCDDR16 & 1);
}



uint8_t LCD::setNb(int32_t nb, uint8_t dig) {
     866:	15 e0       	ldi	r17, 0x05	; 5
	if(nb<0){
		setDigit(min,Minus);
		min++;
		nb=(~nb)+1;
	}
	while(d>=min){
     868:	c8 2f       	mov	r28, r24
     86a:	d0 e0       	ldi	r29, 0x00	; 0
		setDigit(d--,nb%10);
     86c:	8a e0       	ldi	r24, 0x0A	; 10
     86e:	48 2e       	mov	r4, r24
     870:	51 2c       	mov	r5, r1
     872:	61 2c       	mov	r6, r1
     874:	71 2c       	mov	r7, r1
	if(nb<0){
		setDigit(min,Minus);
		min++;
		nb=(~nb)+1;
	}
	while(d>=min){
     876:	81 2f       	mov	r24, r17
     878:	01 2e       	mov	r0, r17
     87a:	00 0c       	add	r0, r0
     87c:	99 0b       	sbc	r25, r25
     87e:	8c 17       	cp	r24, r28
     880:	9d 07       	cpc	r25, r29
     882:	94 f4       	brge	.+36     	; 0x8a8 <_ZN3LCD5setNbElh+0xa2>



uint8_t LCD::setNb(int32_t nb, uint8_t dig) {
	if(nb>999999 || nb <-99999){
		return 1;
     884:	80 e0       	ldi	r24, 0x00	; 0
		nb/=10;
		if(nb==0)break;
	}
	while(d>=min)setDigit(d--,Blank);
	return 0;
}
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	ff 90       	pop	r15
     890:	ef 90       	pop	r14
     892:	df 90       	pop	r13
     894:	cf 90       	pop	r12
     896:	bf 90       	pop	r11
     898:	af 90       	pop	r10
     89a:	9f 90       	pop	r9
     89c:	8f 90       	pop	r8
     89e:	7f 90       	pop	r7
     8a0:	6f 90       	pop	r6
     8a2:	5f 90       	pop	r5
     8a4:	4f 90       	pop	r4
     8a6:	08 95       	ret
		setDigit(min,Minus);
		min++;
		nb=(~nb)+1;
	}
	while(d>=min){
		setDigit(d--,nb%10);
     8a8:	c7 01       	movw	r24, r14
     8aa:	b6 01       	movw	r22, r12
     8ac:	a3 01       	movw	r20, r6
     8ae:	92 01       	movw	r18, r4
     8b0:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__divmodsi4>
     8b4:	49 01       	movw	r8, r18
     8b6:	5a 01       	movw	r10, r20
     8b8:	81 2f       	mov	r24, r17
     8ba:	11 50       	subi	r17, 0x01	; 1
     8bc:	0e 94 0a 03 	call	0x614	; 0x614 <_ZN3LCD8setDigitEhh>
		nb/=10;
     8c0:	64 01       	movw	r12, r8
     8c2:	75 01       	movw	r14, r10
		if(nb==0)break;
     8c4:	c1 14       	cp	r12, r1
     8c6:	d1 04       	cpc	r13, r1
     8c8:	e1 04       	cpc	r14, r1
     8ca:	f1 04       	cpc	r15, r1
     8cc:	a1 f6       	brne	.-88     	; 0x876 <_ZN3LCD5setNbElh+0x70>
	}
	while(d>=min)setDigit(d--,Blank);
     8ce:	81 2f       	mov	r24, r17
     8d0:	01 2e       	mov	r0, r17
     8d2:	00 0c       	add	r0, r0
     8d4:	99 0b       	sbc	r25, r25
     8d6:	8c 17       	cp	r24, r28
     8d8:	9d 07       	cpc	r25, r29
     8da:	a4 f2       	brlt	.-88     	; 0x884 <_ZN3LCD5setNbElh+0x7e>
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	81 2f       	mov	r24, r17
     8e0:	0e 94 48 03 	call	0x690	; 0x690 <_ZN3LCD8setDigitEhNS_6SymbolE>
     8e4:	11 50       	subi	r17, 0x01	; 1
     8e6:	f3 cf       	rjmp	.-26     	; 0x8ce <_ZN3LCD5setNbElh+0xc8>



uint8_t LCD::setNb(int32_t nb, uint8_t dig) {
	if(nb>999999 || nb <-99999){
		return 1;
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	cd cf       	rjmp	.-102    	; 0x886 <_ZN3LCD5setNbElh+0x80>

000008ec <_ZN3LCD5setNbEl>:
	while(d>=min)setDigit(d--,Blank);
	return 0;
}

uint8_t LCD::setNb(int32_t nb) {
	return setNb(nb,6);
     8ec:	46 e0       	ldi	r20, 0x06	; 6
     8ee:	0c 94 03 04 	jmp	0x806	; 0x806 <_ZN3LCD5setNbElh>

000008f2 <_ZN3LCD5clearEb>:
}

void LCD::clear(void) {
	clear(true);
}
void LCD::clear(bool clearBatt) {
     8f2:	cf 93       	push	r28
	if(clearBatt)setBattery(NONE);
     8f4:	88 23       	and	r24, r24
     8f6:	19 f0       	breq	.+6      	; 0x8fe <_ZN3LCD5clearEb+0xc>
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	0e 94 81 03 	call	0x702	; 0x702 <_ZN3LCD10setBatteryENS_7BatteryE>
	setClk(false);
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_ZN3LCD6setClkEb>
	setDP(false);
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_ZN3LCD5setDPEb>
	for(int8_t i=5;i>=0;i--)setDigit(i,Blank);
     90a:	c5 e0       	ldi	r28, 0x05	; 5
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	8c 2f       	mov	r24, r28
     910:	0e 94 48 03 	call	0x690	; 0x690 <_ZN3LCD8setDigitEhNS_6SymbolE>
     914:	c1 50       	subi	r28, 0x01	; 1
     916:	d0 f7       	brcc	.-12     	; 0x90c <_ZN3LCD5clearEb+0x1a>
}
     918:	cf 91       	pop	r28
     91a:	08 95       	ret

0000091c <_ZN3LCD5clearEv>:
uint8_t LCD::setNb(int32_t nb) {
	return setNb(nb,6);
}

void LCD::clear(void) {
	clear(true);
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <_ZN3LCD5clearEb>

00000922 <_ZN7ProgramD1Ev>:
	LED1_OFF;
}

Program::~Program(){
    
}
     922:	08 95       	ret

00000924 <_ZN7Program4showEv>:
            break;
        }
    }
}

void Program::show(void){
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	ec 01       	movw	r28, r24
    if(started){
     92a:	2a 81       	ldd	r18, Y+2	; 0x02
     92c:	22 23       	and	r18, r18
     92e:	49 f0       	breq	.+18     	; 0x942 <_ZN7Program4showEv+0x1e>
        myLCD->setNb(lapNb,2);        
     930:	6f 85       	ldd	r22, Y+15	; 0x0f
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	42 e0       	ldi	r20, 0x02	; 2
    }else{
        myLCD->setDigit(4,Sym1[selectedProgram]);
        myLCD->setDigit(5,Sym2[selectedProgram]);
    }
}
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
    }
}

void Program::show(void){
    if(started){
        myLCD->setNb(lapNb,2);        
     93e:	0c 94 03 04 	jmp	0x806	; 0x806 <_ZN3LCD5setNbElh>
    }else{
        myLCD->setDigit(4,Sym1[selectedProgram]);
     942:	e9 81       	ldd	r30, Y+1	; 0x01
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	e8 54       	subi	r30, 0x48	; 72
     948:	fe 4f       	sbci	r31, 0xFE	; 254
     94a:	60 81       	ld	r22, Z
     94c:	84 e0       	ldi	r24, 0x04	; 4
     94e:	0e 94 48 03 	call	0x690	; 0x690 <_ZN3LCD8setDigitEhNS_6SymbolE>
        myLCD->setDigit(5,Sym2[selectedProgram]);
     952:	e9 81       	ldd	r30, Y+1	; 0x01
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	ed 54       	subi	r30, 0x4D	; 77
     958:	fe 4f       	sbci	r31, 0xFE	; 254
     95a:	60 81       	ld	r22, Z
     95c:	85 e0       	ldi	r24, 0x05	; 5
    }
}
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
void Program::show(void){
    if(started){
        myLCD->setNb(lapNb,2);        
    }else{
        myLCD->setDigit(4,Sym1[selectedProgram]);
        myLCD->setDigit(5,Sym2[selectedProgram]);
     962:	0c 94 0a 03 	jmp	0x614	; 0x614 <_ZN3LCD8setDigitEhh>

00000966 <_ZN4BeepC1Ev>:
    }
}

Beep::Beep(void){
    DDRB|=(1<<PINB4);//buzzer output is PINB4
     966:	24 9a       	sbi	0x04, 4	; 4
    PORTB&=~(1<<PINB4);
     968:	2c 98       	cbi	0x05, 4	; 5
    //TCCR0A|=(1<<WGM01)|(1<<COM0A0)|(1<<CS01)|(1<<CS00);//toggle OC0A on compare match, 64 prescaler, start timer
    OCR0A=195;// 8MHz/8 /2 /(191+1) = 2.6kHz
     96a:	83 ec       	ldi	r24, 0xC3	; 195
     96c:	87 bd       	out	0x27, r24	; 39
}
     96e:	08 95       	ret

00000970 <_ZN7ProgramC1EP3LCD>:
const uint8_t Program::Sym2[]={3,4,3,4,0};

const uint8_t Program::LL_Tlap[]={90,85,80,76,72,69,65,58,55,53,51,50,48};
const uint16_t Program::LL_Tnext[]={1170,1763,2323,2929,3577,4126,4716,5292,5901,6487,7104,7700,8324};

Program::Program(LCD *l){
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	ec 01       	movw	r28, r24
     97a:	8b 01       	movw	r16, r22
     97c:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN4BeepC1Ev>
    myLCD=l;
     980:	1c 83       	std	Y+4, r17	; 0x04
     982:	0b 83       	std	Y+3, r16	; 0x03
    selectedProgram=0;
     984:	19 82       	std	Y+1, r1	; 0x01
    started=0;
     986:	1a 82       	std	Y+2, r1	; 0x02
	LED0_OFF;
     988:	5e 98       	cbi	0x0b, 6	; 11
	LED1_OFF;
     98a:	5f 98       	cbi	0x0b, 7	; 11
}
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	08 95       	ret

00000996 <_ZN4BeepD1Ev>:
    //TCCR0A|=(1<<WGM01)|(1<<COM0A0)|(1<<CS01)|(1<<CS00);//toggle OC0A on compare match, 64 prescaler, start timer
    OCR0A=195;// 8MHz/8 /2 /(191+1) = 2.6kHz
}
Beep::~Beep(void){
    
}
     996:	08 95       	ret

00000998 <_ZN4Beep2onEv>:
    }else{
        off();
    }
}
void Beep::on(void){
    TCCR0A|=(1<<WGM01)|(1<<COM0A0)|(1<<CS01);//|(1<<CS00);//toggle OC0A on compare match, 8 prescaler, start timer
     998:	84 b5       	in	r24, 0x24	; 36
     99a:	8a 61       	ori	r24, 0x1A	; 26
     99c:	84 bd       	out	0x24, r24	; 36
}
     99e:	08 95       	ret

000009a0 <_ZN4Beep7singleBEv>:
Beep::~Beep(void){
    
}

void Beep::singleB(void){
    cnt=3;
     9a0:	23 e0       	ldi	r18, 0x03	; 3
     9a2:	fc 01       	movw	r30, r24
     9a4:	20 83       	st	Z, r18
    on();
     9a6:	0c 94 cc 04 	jmp	0x998	; 0x998 <_ZN4Beep2onEv>

000009aa <_ZN4Beep5dualBEv>:
}
void Beep::dualB(void){
    cnt=5;
     9aa:	25 e0       	ldi	r18, 0x05	; 5
     9ac:	fc 01       	movw	r30, r24
     9ae:	20 83       	st	Z, r18
    on();
     9b0:	0c 94 cc 04 	jmp	0x998	; 0x998 <_ZN4Beep2onEv>

000009b4 <_ZN4Beep5longBEv>:
}
void Beep::longB(void){
    cnt=7;
     9b4:	27 e0       	ldi	r18, 0x07	; 7
     9b6:	fc 01       	movw	r30, r24
     9b8:	20 83       	st	Z, r18
    on();
     9ba:	0c 94 cc 04 	jmp	0x998	; 0x998 <_ZN4Beep2onEv>

000009be <_ZN7Program5startEm>:
Program::~Program(){
    
}


void Program::start(uint32_t time){
     9be:	cf 92       	push	r12
     9c0:	df 92       	push	r13
     9c2:	ef 92       	push	r14
     9c4:	ff 92       	push	r15
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	ec 01       	movw	r28, r24
     9cc:	6a 01       	movw	r12, r20
     9ce:	7b 01       	movw	r14, r22
    myBeep.longB();
     9d0:	0e 94 da 04 	call	0x9b4	; 0x9b4 <_ZN4Beep5longBEv>
    started=1;
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	8a 83       	std	Y+2, r24	; 0x02
    pTime=time;
     9d8:	cf 82       	std	Y+7, r12	; 0x07
     9da:	d8 86       	std	Y+8, r13	; 0x08
     9dc:	e9 86       	std	Y+9, r14	; 0x09
     9de:	fa 86       	std	Y+10, r15	; 0x0a
    LED1_ON;
     9e0:	5f 9a       	sbi	0x0b, 7	; 11
    LED0_OFF;
     9e2:	5e 98       	cbi	0x0b, 6	; 11
    switch(selectedProgram){
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	82 30       	cpi	r24, 0x02	; 2
     9e8:	31 f1       	breq	.+76     	; 0xa36 <_ZN7Program5startEm+0x78>
     9ea:	58 f4       	brcc	.+22     	; 0xa02 <_ZN7Program5startEm+0x44>
     9ec:	88 23       	and	r24, r24
     9ee:	b9 f0       	breq	.+46     	; 0xa1e <_ZN7Program5startEm+0x60>
     9f0:	81 30       	cpi	r24, 0x01	; 1
     9f2:	e1 f0       	breq	.+56     	; 0xa2c <_ZN7Program5startEm+0x6e>
        case 4:
            lapNb=0;
            lapTime=LL_Tlap[lapNb];
            startTime=time;
    }
}
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	ff 90       	pop	r15
     9fa:	ef 90       	pop	r14
     9fc:	df 90       	pop	r13
     9fe:	cf 90       	pop	r12
     a00:	08 95       	ret
    myBeep.longB();
    started=1;
    pTime=time;
    LED1_ON;
    LED0_OFF;
    switch(selectedProgram){
     a02:	83 30       	cpi	r24, 0x03	; 3
     a04:	d1 f0       	breq	.+52     	; 0xa3a <_ZN7Program5startEm+0x7c>
     a06:	84 30       	cpi	r24, 0x04	; 4
     a08:	a9 f7       	brne	.-22     	; 0x9f4 <_ZN7Program5startEm+0x36>
        case 3:
            lapNb=30;
            lapTime=450;
        break;
        case 4:
            lapNb=0;
     a0a:	1f 86       	std	Y+15, r1	; 0x0f
            lapTime=LL_Tlap[lapNb];
     a0c:	8a e5       	ldi	r24, 0x5A	; 90
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	9e 83       	std	Y+6, r25	; 0x06
     a12:	8d 83       	std	Y+5, r24	; 0x05
            startTime=time;
     a14:	cb 86       	std	Y+11, r12	; 0x0b
     a16:	dc 86       	std	Y+12, r13	; 0x0c
     a18:	ed 86       	std	Y+13, r14	; 0x0d
     a1a:	fe 86       	std	Y+14, r15	; 0x0e
    }
}
     a1c:	eb cf       	rjmp	.-42     	; 0x9f4 <_ZN7Program5startEm+0x36>
    pTime=time;
    LED1_ON;
    LED0_OFF;
    switch(selectedProgram){
        case 0:
            lapNb=20;
     a1e:	84 e1       	ldi	r24, 0x14	; 20
        case 1:
            lapNb=20;
            lapTime=450;
        break;
        case 2:
            lapNb=30;
     a20:	8f 87       	std	Y+15, r24	; 0x0f
            lapTime=300;
     a22:	8c e2       	ldi	r24, 0x2C	; 44
     a24:	91 e0       	ldi	r25, 0x01	; 1
        break;
        case 3:
            lapNb=30;
            lapTime=450;
     a26:	9e 83       	std	Y+6, r25	; 0x06
     a28:	8d 83       	std	Y+5, r24	; 0x05
        break;
     a2a:	e4 cf       	rjmp	.-56     	; 0x9f4 <_ZN7Program5startEm+0x36>
        case 0:
            lapNb=20;
            lapTime=300;
        break;
        case 1:
            lapNb=20;
     a2c:	84 e1       	ldi	r24, 0x14	; 20
        case 2:
            lapNb=30;
            lapTime=300;
        break;
        case 3:
            lapNb=30;
     a2e:	8f 87       	std	Y+15, r24	; 0x0f
            lapTime=450;
     a30:	82 ec       	ldi	r24, 0xC2	; 194
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	f8 cf       	rjmp	.-16     	; 0xa26 <_ZN7Program5startEm+0x68>
        case 1:
            lapNb=20;
            lapTime=450;
        break;
        case 2:
            lapNb=30;
     a36:	8e e1       	ldi	r24, 0x1E	; 30
     a38:	f3 cf       	rjmp	.-26     	; 0xa20 <_ZN7Program5startEm+0x62>
            lapTime=300;
        break;
        case 3:
            lapNb=30;
     a3a:	8e e1       	ldi	r24, 0x1E	; 30
     a3c:	f8 cf       	rjmp	.-16     	; 0xa2e <_ZN7Program5startEm+0x70>

00000a3e <_ZN7Program4stopEv>:
            lapNb=0;
            lapTime=LL_Tlap[lapNb];
            startTime=time;
    }
}
void Program::stop(void){
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	ec 01       	movw	r28, r24
    myBeep.longB();    
     a44:	0e 94 da 04 	call	0x9b4	; 0x9b4 <_ZN4Beep5longBEv>
    LED0_ON;
     a48:	5e 9a       	sbi	0x0b, 6	; 11
    LED1_OFF;
     a4a:	5f 98       	cbi	0x0b, 7	; 11
    started=0;
     a4c:	1a 82       	std	Y+2, r1	; 0x02
}
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	08 95       	ret

00000a54 <_ZN7Program6updateEm>:
void Program::update(uint32_t time){
     a54:	cf 92       	push	r12
     a56:	df 92       	push	r13
     a58:	ef 92       	push	r14
     a5a:	ff 92       	push	r15
    if (time>(pTime+lapTime)){
     a5c:	fc 01       	movw	r30, r24
     a5e:	25 81       	ldd	r18, Z+5	; 0x05
     a60:	36 81       	ldd	r19, Z+6	; 0x06
     a62:	c7 80       	ldd	r12, Z+7	; 0x07
     a64:	d0 84       	ldd	r13, Z+8	; 0x08
     a66:	e1 84       	ldd	r14, Z+9	; 0x09
     a68:	f2 84       	ldd	r15, Z+10	; 0x0a
     a6a:	c2 0e       	add	r12, r18
     a6c:	d3 1e       	adc	r13, r19
     a6e:	e1 1c       	adc	r14, r1
     a70:	f1 1c       	adc	r15, r1
     a72:	c4 16       	cp	r12, r20
     a74:	d5 06       	cpc	r13, r21
     a76:	e6 06       	cpc	r14, r22
     a78:	f7 06       	cpc	r15, r23
     a7a:	08 f0       	brcs	.+2      	; 0xa7e <_ZN7Program6updateEm+0x2a>
     a7c:	49 c0       	rjmp	.+146    	; 0xb10 <_ZN7Program6updateEm+0xbc>
     a7e:	27 85       	ldd	r18, Z+15	; 0x0f
        switch(selectedProgram){
     a80:	31 81       	ldd	r19, Z+1	; 0x01
     a82:	34 30       	cpi	r19, 0x04	; 4
     a84:	a9 f5       	brne	.+106    	; 0xaf0 <_ZN7Program6updateEm+0x9c>
            case 4:
                pTime+=lapTime;
     a86:	c7 82       	std	Z+7, r12	; 0x07
     a88:	d0 86       	std	Z+8, r13	; 0x08
     a8a:	e1 86       	std	Z+9, r14	; 0x09
     a8c:	f2 86       	std	Z+10, r15	; 0x0a
                if((time-startTime)>LL_Tnext[lapNb]){
     a8e:	c3 84       	ldd	r12, Z+11	; 0x0b
     a90:	d4 84       	ldd	r13, Z+12	; 0x0c
     a92:	e5 84       	ldd	r14, Z+13	; 0x0d
     a94:	f6 84       	ldd	r15, Z+14	; 0x0e
     a96:	4c 19       	sub	r20, r12
     a98:	5d 09       	sbc	r21, r13
     a9a:	6e 09       	sbc	r22, r14
     a9c:	7f 09       	sbc	r23, r15
     a9e:	e2 2f       	mov	r30, r18
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	ee 0f       	add	r30, r30
     aa4:	ff 1f       	adc	r31, r31
     aa6:	e4 57       	subi	r30, 0x74	; 116
     aa8:	fe 4f       	sbci	r31, 0xFE	; 254
     aaa:	c0 80       	ld	r12, Z
     aac:	d1 80       	ldd	r13, Z+1	; 0x01
     aae:	f1 2c       	mov	r15, r1
     ab0:	e1 2c       	mov	r14, r1
     ab2:	c4 16       	cp	r12, r20
     ab4:	d5 06       	cpc	r13, r21
     ab6:	e6 06       	cpc	r14, r22
     ab8:	f7 06       	cpc	r15, r23
     aba:	20 f5       	brcc	.+72     	; 0xb04 <_ZN7Program6updateEm+0xb0>
                    if(++lapNb>12){
     abc:	2f 5f       	subi	r18, 0xFF	; 255
     abe:	fc 01       	movw	r30, r24
     ac0:	27 87       	std	Z+15, r18	; 0x0f
     ac2:	2d 30       	cpi	r18, 0x0D	; 13
     ac4:	30 f0       	brcs	.+12     	; 0xad2 <_ZN7Program6updateEm+0x7e>
                    myBeep.dualB();
                }
            break;
        }
    }
}
     ac6:	ff 90       	pop	r15
     ac8:	ef 90       	pop	r14
     aca:	df 90       	pop	r13
     acc:	cf 90       	pop	r12
        switch(selectedProgram){
            case 4:
                pTime+=lapTime;
                if((time-startTime)>LL_Tnext[lapNb]){
                    if(++lapNb>12){
                        stop();
     ace:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <_ZN7Program4stopEv>
                        return;
                    }
                    lapTime=LL_Tlap[lapNb];
     ad2:	e2 2f       	mov	r30, r18
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	ea 55       	subi	r30, 0x5A	; 90
     ad8:	fe 4f       	sbci	r31, 0xFE	; 254
     ada:	20 81       	ld	r18, Z
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	fc 01       	movw	r30, r24
     ae0:	36 83       	std	Z+6, r19	; 0x06
     ae2:	25 83       	std	Z+5, r18	; 0x05
                    myBeep.dualB();
                }
            break;
        }
    }
}
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	cf 90       	pop	r12
                    return;
                }
                if(lapNb%2){
                    myBeep.singleB();
                }else{
                    myBeep.dualB();
     aec:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <_ZN4Beep5dualBEv>
                }else{
                    myBeep.singleB();//single when in same palier
                }
            break;
            default:
                lapNb--;
     af0:	21 50       	subi	r18, 0x01	; 1
     af2:	27 87       	std	Z+15, r18	; 0x0f
                pTime+=lapTime;
     af4:	c7 82       	std	Z+7, r12	; 0x07
     af6:	d0 86       	std	Z+8, r13	; 0x08
     af8:	e1 86       	std	Z+9, r14	; 0x09
     afa:	f2 86       	std	Z+10, r15	; 0x0a
                if(lapNb==0){
     afc:	22 23       	and	r18, r18
     afe:	19 f3       	breq	.-58     	; 0xac6 <_ZN7Program6updateEm+0x72>
                    stop();
                    return;
                }
                if(lapNb%2){
     b00:	20 ff       	sbrs	r18, 0
     b02:	f0 cf       	rjmp	.-32     	; 0xae4 <_ZN7Program6updateEm+0x90>
                    myBeep.dualB();
                }
            break;
        }
    }
}
     b04:	ff 90       	pop	r15
     b06:	ef 90       	pop	r14
     b08:	df 90       	pop	r13
     b0a:	cf 90       	pop	r12
                if(lapNb==0){
                    stop();
                    return;
                }
                if(lapNb%2){
                    myBeep.singleB();
     b0c:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <_ZN4Beep7singleBEv>
                    myBeep.dualB();
                }
            break;
        }
    }
}
     b10:	ff 90       	pop	r15
     b12:	ef 90       	pop	r14
     b14:	df 90       	pop	r13
     b16:	cf 90       	pop	r12
     b18:	08 95       	ret

00000b1a <_ZN4Beep6updateEv>:
}
void Beep::longB(void){
    cnt=7;
    on();
}
void Beep::update(void){
     b1a:	fc 01       	movw	r30, r24
    if(cnt==0)return;
     b1c:	90 81       	ld	r25, Z
     b1e:	99 23       	and	r25, r25
     b20:	79 f0       	breq	.+30     	; 0xb40 <_ZN4Beep6updateEv+0x26>
    cnt--;
     b22:	91 50       	subi	r25, 0x01	; 1
     b24:	90 83       	st	Z, r25
    if(cnt>6)return;
     b26:	97 30       	cpi	r25, 0x07	; 7
     b28:	58 f4       	brcc	.+22     	; 0xb40 <_ZN4Beep6updateEv+0x26>
    if(cnt==6)cnt=1;
     b2a:	96 30       	cpi	r25, 0x06	; 6
     b2c:	11 f4       	brne	.+4      	; 0xb32 <_ZN4Beep6updateEv+0x18>
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	80 83       	st	Z, r24
    if(cnt%2){
     b32:	80 81       	ld	r24, Z
     b34:	80 ff       	sbrs	r24, 0
     b36:	03 c0       	rjmp	.+6      	; 0xb3e <_ZN4Beep6updateEv+0x24>
        on();
     b38:	cf 01       	movw	r24, r30
     b3a:	0c 94 cc 04 	jmp	0x998	; 0x998 <_ZN4Beep2onEv>
}
void Beep::on(void){
    TCCR0A|=(1<<WGM01)|(1<<COM0A0)|(1<<CS01);//|(1<<CS00);//toggle OC0A on compare match, 8 prescaler, start timer
}
void Beep::off(void){
    TCCR0A=0;
     b3e:	14 bc       	out	0x24, r1	; 36
    if(cnt%2){
        on();
    }else{
        off();
    }
}
     b40:	08 95       	ret

00000b42 <_ZN4Beep3offEv>:
void Beep::on(void){
    TCCR0A|=(1<<WGM01)|(1<<COM0A0)|(1<<CS01);//|(1<<CS00);//toggle OC0A on compare match, 8 prescaler, start timer
}
void Beep::off(void){
    TCCR0A=0;
     b42:	14 bc       	out	0x24, r1	; 36
}
     b44:	08 95       	ret

00000b46 <main>:
volatile uint8_t btn0_pressDuration=0;
volatile uint32_t total_time_ts=65535; // in tenths of second

int main(void){
	
	DDRD=0b11000000; 	//LED0, LED1 as outputs, BTN 0/1 as inputs
     b46:	80 ec       	ldi	r24, 0xC0	; 192
     b48:	8a b9       	out	0x0a, r24	; 10
	PORTD=0b00110000;			//LED initial state:low, enable BTN pullups
     b4a:	80 e3       	ldi	r24, 0x30	; 48
     b4c:	8b b9       	out	0x0b, r24	; 11
	
	DDRE=0b01100011;//IRQ as input, LoadCell_en/PWR_en as outputs, TX as output, RX as input
     b4e:	83 e6       	ldi	r24, 0x63	; 99
     b50:	8d b9       	out	0x0d, r24	; 13
	PORTE=0b10100000;//Enable IRQ pullup, set LoadCell_en/PWR_en to 1
     b52:	80 ea       	ldi	r24, 0xA0	; 160
     b54:	8e b9       	out	0x0e, r24	; 14
	
	ADMUX|=(1<<REFS0)|0b11110;//Set AVCC as reference voltage for ADC, ADC MUX input to 1.1V BG
     b56:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fc07c>
     b5a:	8e 65       	ori	r24, 0x5E	; 94
     b5c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fc07c>
	ADCSRA|=(1<<ADEN)|(1<<ADIE)|(1<<ADPS1);//Enable conversion complete interrupt, Clock prescaler 12MHz/64=187kHz
     b60:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fc07a>
     b64:	8a 68       	ori	r24, 0x8A	; 138
     b66:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fc07a>
	PRR|=(1<<PRSPI)|(1<<PRUSART0);//Disable SPI and UART to save power
     b6a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7fc064>
     b6e:	86 60       	ori	r24, 0x06	; 6
     b70:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7fc064>
	
	TCCR1B |=(1<<WGM12)|(1<<CS12);// prescaler=clk/256, OCR1A is top.
     b74:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     b78:	8c 60       	ori	r24, 0x0C	; 12
     b7a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
	OCR1A=3332; // 8MHz/256 = 31250Hz -> COMPA_ISR every 100ms
     b7e:	84 e0       	ldi	r24, 0x04	; 4
     b80:	9d e0       	ldi	r25, 0x0D	; 13
     b82:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
     b86:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
	TIMSK1|=(1<<OCIE1A);
     b8a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     b8e:	82 60       	ori	r24, 0x02	; 2
     b90:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
	
	
	myLCD.setDP(1);
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_ZN3LCD5setDPEb>
	myLCD.setClk(1);
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_ZN3LCD6setClkEb>
	myLCD.setBattery(LCD::FULL);
     ba0:	87 e0       	ldi	r24, 0x07	; 7
     ba2:	0e 94 81 03 	call	0x702	; 0x702 <_ZN3LCD10setBatteryENS_7BatteryE>
	
	while(--total_time_ts);
     ba6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     baa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     bae:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     bb2:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	a1 09       	sbc	r26, r1
     bba:	b1 09       	sbc	r27, r1
     bbc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     bc0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     bc4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     bc8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     bcc:	89 2b       	or	r24, r25
     bce:	8a 2b       	or	r24, r26
     bd0:	8b 2b       	or	r24, r27
     bd2:	49 f7       	brne	.-46     	; 0xba6 <main+0x60>
	
	btn0_state=BTN0;
     bd4:	89 b1       	in	r24, 0x09	; 9
     bd6:	80 71       	andi	r24, 0x10	; 16
     bd8:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <btn0_state>
	btn1_state=BTN1;
     bdc:	89 b1       	in	r24, 0x09	; 9
     bde:	80 72       	andi	r24, 0x20	; 32
     be0:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <btn1_state>
	LoadCell_en_OFF;
     be4:	76 9a       	sbi	0x0e, 6	; 14
	sei();
     be6:	78 94       	sei
	
	while(1){
	
		

		if(BTN0!=btn0_state){
     be8:	89 b1       	in	r24, 0x09	; 9
     bea:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <btn0_state>
     bee:	80 71       	andi	r24, 0x10	; 16
     bf0:	89 17       	cp	r24, r25
     bf2:	a1 f0       	breq	.+40     	; 0xc1c <main+0xd6>
			btn0_state=BTN0;
     bf4:	89 b1       	in	r24, 0x09	; 9
     bf6:	80 71       	andi	r24, 0x10	; 16
     bf8:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <btn0_state>
			if(btn0_state){
     bfc:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <btn0_state>
     c00:	88 23       	and	r24, r24
     c02:	61 f0       	breq	.+24     	; 0xc1c <main+0xd6>
				if(!myProgram.started){
     c04:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <myProgram+0x2>
     c08:	81 11       	cpse	r24, r1
     c0a:	08 c0       	rjmp	.+16     	; 0xc1c <main+0xd6>
					myProgram.selectedProgram++;
     c0c:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <myProgram+0x1>
     c10:	8f 5f       	subi	r24, 0xFF	; 255
					if(myProgram.selectedProgram>=PGM_CNT)myProgram.selectedProgram=0;
     c12:	85 30       	cpi	r24, 0x05	; 5
     c14:	08 f0       	brcs	.+2      	; 0xc18 <main+0xd2>
     c16:	8a c0       	rjmp	.+276    	; 0xd2c <main+0x1e6>

		if(BTN0!=btn0_state){
			btn0_state=BTN0;
			if(btn0_state){
				if(!myProgram.started){
					myProgram.selectedProgram++;
     c18:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <myProgram+0x1>
					if(myProgram.selectedProgram>=PGM_CNT)myProgram.selectedProgram=0;
				}
			}
		}
		if(BTN1!=btn1_state){
     c1c:	89 b1       	in	r24, 0x09	; 9
     c1e:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <btn1_state>
     c22:	80 72       	andi	r24, 0x20	; 32
     c24:	89 17       	cp	r24, r25
     c26:	a1 f0       	breq	.+40     	; 0xc50 <main+0x10a>
			btn1_state=BTN1;
     c28:	89 b1       	in	r24, 0x09	; 9
     c2a:	80 72       	andi	r24, 0x20	; 32
     c2c:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <btn1_state>
			if(btn1_state){
     c30:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <btn1_state>
     c34:	88 23       	and	r24, r24
     c36:	61 f0       	breq	.+24     	; 0xc50 <main+0x10a>
				LED1_Toggle;
     c38:	8b b1       	in	r24, 0x0b	; 11
     c3a:	80 58       	subi	r24, 0x80	; 128
     c3c:	8b b9       	out	0x0b, r24	; 11
				if(myProgram.started){
     c3e:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <myProgram+0x2>
     c42:	88 23       	and	r24, r24
     c44:	09 f4       	brne	.+2      	; 0xc48 <main+0x102>
     c46:	75 c0       	rjmp	.+234    	; 0xd32 <main+0x1ec>
					myProgram.stop();
     c48:	8b ed       	ldi	r24, 0xDB	; 219
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN7Program4stopEv>
				}else{
					myProgram.start(total_time_ts);
				}
			}
		}
		if(flags_state&0x01){
     c50:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <flags_state>
     c54:	80 ff       	sbrs	r24, 0
     c56:	38 c0       	rjmp	.+112    	; 0xcc8 <main+0x182>
			flags_state&=~0x01;
     c58:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <flags_state>
     c5c:	8e 7f       	andi	r24, 0xFE	; 254
     c5e:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <flags_state>
			if(myProgram.started){
     c62:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <myProgram+0x2>
     c66:	88 23       	and	r24, r24
     c68:	61 f0       	breq	.+24     	; 0xc82 <main+0x13c>
				myProgram.update(total_time_ts);
     c6a:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c6e:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c72:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     c76:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     c7a:	8b ed       	ldi	r24, 0xDB	; 219
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN7Program6updateEm>
			}
			if(++loop_cnt>9){
     c82:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <loop_cnt>
     c86:	8f 5f       	subi	r24, 0xFF	; 255
     c88:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <loop_cnt>
     c8c:	8a 30       	cpi	r24, 0x0A	; 10
     c8e:	80 f0       	brcs	.+32     	; 0xcb0 <main+0x16a>
				loop_cnt=0;
     c90:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <loop_cnt>
				LED1_ON;
     c94:	5f 9a       	sbi	0x0b, 7	; 11
				ADCSRA|=(1<<ADSC); //Start single ADC conversion
     c96:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fc07a>
     c9a:	80 64       	ori	r24, 0x40	; 64
     c9c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fc07a>
				writeTime();
     ca0:	0e 94 9b 01 	call	0x336	; 0x336 <_Z9writeTimev>
				myProgram.show();
     ca4:	8b ed       	ldi	r24, 0xDB	; 219
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	0e 94 92 04 	call	0x924	; 0x924 <_ZN7Program4showEv>
				LED0_OFF;
     cac:	5e 98       	cbi	0x0b, 6	; 11
				LED1_OFF;
     cae:	5f 98       	cbi	0x0b, 7	; 11
			}
			if(BTN0==0){
     cb0:	4c 99       	sbic	0x09, 4	; 9
     cb2:	4c c0       	rjmp	.+152    	; 0xd4c <main+0x206>
				btn0_pressDuration++;
     cb4:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <__data_end>
     cb8:	8f 5f       	subi	r24, 0xFF	; 255
     cba:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <__data_end>
				if(btn0_pressDuration>20)PWR_en_OFF;
     cbe:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <__data_end>
     cc2:	85 31       	cpi	r24, 0x15	; 21
     cc4:	08 f0       	brcs	.+2      	; 0xcc8 <main+0x182>
     cc6:	75 98       	cbi	0x0e, 5	; 14
			}else{
				btn0_pressDuration=0;
			}			
		}
		if(uart.isDataAvailable()){
     cc8:	8c ee       	ldi	r24, 0xEC	; 236
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	0e 94 ca 02 	call	0x594	; 0x594 <_ZN4UART15isDataAvailableEv>
     cd0:	88 23       	and	r24, r24
     cd2:	59 f0       	breq	.+22     	; 0xcea <main+0x1a4>
			char *cmd=uart.retrieve();
     cd4:	8c ee       	ldi	r24, 0xEC	; 236
     cd6:	91 e0       	ldi	r25, 0x01	; 1
     cd8:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN4UART8retrieveEv>
			uart.sendString("Start verbose streaming",true);
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	6d eb       	ldi	r22, 0xBD	; 189
     ce0:	71 e0       	ldi	r23, 0x01	; 1
     ce2:	8c ee       	ldi	r24, 0xEC	; 236
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	0e 94 24 02 	call	0x448	; 0x448 <_ZN4UART10sendStringEPcb>
		}
		ADCSRA&=~(1<<ADEN);//Disable ADC
     cea:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fc07a>
     cee:	8f 77       	andi	r24, 0x7F	; 127
     cf0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fc07a>
		PRR|=(1<<PRSPI)|(1<<PRUSART0)|(1<<PRADC);//Shut down clock to Timer1, SPI, UART, ADC
     cf4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7fc064>
     cf8:	87 60       	ori	r24, 0x07	; 7
     cfa:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7fc064>
		set_sleep_mode(SLEEP_MODE_IDLE);
     cfe:	83 b7       	in	r24, 0x33	; 51
     d00:	81 7f       	andi	r24, 0xF1	; 241
     d02:	83 bf       	out	0x33, r24	; 51
		//set_sleep_mode(SLEEP_MODE_PWR_SAVE);
		//set_sleep_mode(SLEEP_MODE_PWR_DOWN);
		cli();
     d04:	f8 94       	cli
		if (1){
			sleep_enable();
     d06:	83 b7       	in	r24, 0x33	; 51
     d08:	81 60       	ori	r24, 0x01	; 1
     d0a:	83 bf       	out	0x33, r24	; 51
			sei();
     d0c:	78 94       	sei
			sleep_cpu();
     d0e:	88 95       	sleep
			sleep_disable();
     d10:	83 b7       	in	r24, 0x33	; 51
     d12:	8e 7f       	andi	r24, 0xFE	; 254
     d14:	83 bf       	out	0x33, r24	; 51
		}
		PRR&=~(1<<PRADC);//Enable power to ADC, UART and SPI  again
     d16:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7fc064>
     d1a:	8e 7f       	andi	r24, 0xFE	; 254
     d1c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7fc064>
		ADCSRA|=(1<<ADEN);//Enable ADC again
     d20:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fc07a>
     d24:	80 68       	ori	r24, 0x80	; 128
     d26:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fc07a>
     d2a:	5d cf       	rjmp	.-326    	; 0xbe6 <main+0xa0>
		if(BTN0!=btn0_state){
			btn0_state=BTN0;
			if(btn0_state){
				if(!myProgram.started){
					myProgram.selectedProgram++;
					if(myProgram.selectedProgram>=PGM_CNT)myProgram.selectedProgram=0;
     d2c:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <myProgram+0x1>
     d30:	75 cf       	rjmp	.-278    	; 0xc1c <main+0xd6>
			if(btn1_state){
				LED1_Toggle;
				if(myProgram.started){
					myProgram.stop();
				}else{
					myProgram.start(total_time_ts);
     d32:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d36:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d3a:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     d3e:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     d42:	8b ed       	ldi	r24, 0xDB	; 219
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	0e 94 df 04 	call	0x9be	; 0x9be <_ZN7Program5startEm>
     d4a:	82 cf       	rjmp	.-252    	; 0xc50 <main+0x10a>
			}
			if(BTN0==0){
				btn0_pressDuration++;
				if(btn0_pressDuration>20)PWR_en_OFF;
			}else{
				btn0_pressDuration=0;
     d4c:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <__data_end>
     d50:	bb cf       	rjmp	.-138    	; 0xcc8 <main+0x182>

00000d52 <_GLOBAL__sub_I_uart>:
#define BATT_EMPTY 300
#define BATT_ONEBAR 310
#define BATT_TWOBAR 320
#define BATT_FULL 330

UART uart;
     d52:	8c ee       	ldi	r24, 0xEC	; 236
     d54:	91 e0       	ldi	r25, 0x01	; 1
     d56:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN4UARTC1Ev>
LCD myLCD=LCD(0);//Use 1 for lowest power LCD mode
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	8b ee       	ldi	r24, 0xEB	; 235
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN3LCDC1Eb>
Program myProgram(&myLCD);
     d64:	6b ee       	ldi	r22, 0xEB	; 235
     d66:	71 e0       	ldi	r23, 0x01	; 1
     d68:	8b ed       	ldi	r24, 0xDB	; 219
     d6a:	91 e0       	ldi	r25, 0x01	; 1
     d6c:	0e 94 b8 04 	call	0x970	; 0x970 <_ZN7ProgramC1EP3LCD>

void writeTime(void);

volatile uint8_t loop_cnt=0;
volatile uint8_t flags_state=0;
volatile uint8_t btn0_state=BTN0;
     d70:	89 b1       	in	r24, 0x09	; 9
     d72:	80 71       	andi	r24, 0x10	; 16
     d74:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <btn0_state>
volatile uint8_t btn1_state=BTN1;
     d78:	89 b1       	in	r24, 0x09	; 9
     d7a:	80 72       	andi	r24, 0x20	; 32
     d7c:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <btn1_state>
	}
	myLCD.setDigit(1,mins%10);
	myLCD.setDigit(2,secs/10);
	myLCD.setDigit(3,secs%10);
	myLCD.setClk(secs%2);
}
     d80:	08 95       	ret

00000d82 <_GLOBAL__sub_D_uart>:
#define BATT_TWOBAR 320
#define BATT_FULL 330

UART uart;
LCD myLCD=LCD(0);//Use 1 for lowest power LCD mode
Program myProgram(&myLCD);
     d82:	8b ed       	ldi	r24, 0xDB	; 219
     d84:	91 e0       	ldi	r25, 0x01	; 1
     d86:	0e 94 91 04 	call	0x922	; 0x922 <_ZN7ProgramD1Ev>
#define BATT_ONEBAR 310
#define BATT_TWOBAR 320
#define BATT_FULL 330

UART uart;
LCD myLCD=LCD(0);//Use 1 for lowest power LCD mode
     d8a:	8b ee       	ldi	r24, 0xEB	; 235
     d8c:	91 e0       	ldi	r25, 0x01	; 1
     d8e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN3LCDD1Ev>
#define BATT_EMPTY 300
#define BATT_ONEBAR 310
#define BATT_TWOBAR 320
#define BATT_FULL 330

UART uart;
     d92:	8c ee       	ldi	r24, 0xEC	; 236
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	0c 94 0a 02 	jmp	0x414	; 0x414 <_ZN4UARTD1Ev>

00000d9a <vfprintf>:
     d9a:	af e0       	ldi	r26, 0x0F	; 15
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e3 ed       	ldi	r30, 0xD3	; 211
     da0:	f6 e0       	ldi	r31, 0x06	; 6
     da2:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <__prologue_saves__>
     da6:	6c 01       	movw	r12, r24
     da8:	1b 01       	movw	r2, r22
     daa:	5a 01       	movw	r10, r20
     dac:	fc 01       	movw	r30, r24
     dae:	17 82       	std	Z+7, r1	; 0x07
     db0:	16 82       	std	Z+6, r1	; 0x06
     db2:	83 81       	ldd	r24, Z+3	; 0x03
     db4:	81 ff       	sbrs	r24, 1
     db6:	48 c3       	rjmp	.+1680   	; 0x1448 <vfprintf+0x6ae>
     db8:	9e 01       	movw	r18, r28
     dba:	2f 5f       	subi	r18, 0xFF	; 255
     dbc:	3f 4f       	sbci	r19, 0xFF	; 255
     dbe:	49 01       	movw	r8, r18
     dc0:	f6 01       	movw	r30, r12
     dc2:	93 81       	ldd	r25, Z+3	; 0x03
     dc4:	f1 01       	movw	r30, r2
     dc6:	93 fd       	sbrc	r25, 3
     dc8:	85 91       	lpm	r24, Z+
     dca:	93 ff       	sbrs	r25, 3
     dcc:	81 91       	ld	r24, Z+
     dce:	1f 01       	movw	r2, r30
     dd0:	88 23       	and	r24, r24
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <vfprintf+0x3c>
     dd4:	e7 c2       	rjmp	.+1486   	; 0x13a4 <vfprintf+0x60a>
     dd6:	85 32       	cpi	r24, 0x25	; 37
     dd8:	39 f4       	brne	.+14     	; 0xde8 <vfprintf+0x4e>
     dda:	93 fd       	sbrc	r25, 3
     ddc:	85 91       	lpm	r24, Z+
     dde:	93 ff       	sbrs	r25, 3
     de0:	81 91       	ld	r24, Z+
     de2:	1f 01       	movw	r2, r30
     de4:	85 32       	cpi	r24, 0x25	; 37
     de6:	39 f4       	brne	.+14     	; 0xdf6 <vfprintf+0x5c>
     de8:	b6 01       	movw	r22, r12
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
     df0:	35 01       	movw	r6, r10
     df2:	53 01       	movw	r10, r6
     df4:	e5 cf       	rjmp	.-54     	; 0xdc0 <vfprintf+0x26>
     df6:	f1 2c       	mov	r15, r1
     df8:	51 2c       	mov	r5, r1
     dfa:	00 e0       	ldi	r16, 0x00	; 0
     dfc:	00 32       	cpi	r16, 0x20	; 32
     dfe:	38 f4       	brcc	.+14     	; 0xe0e <vfprintf+0x74>
     e00:	8b 32       	cpi	r24, 0x2B	; 43
     e02:	09 f1       	breq	.+66     	; 0xe46 <vfprintf+0xac>
     e04:	90 f4       	brcc	.+36     	; 0xe2a <vfprintf+0x90>
     e06:	80 32       	cpi	r24, 0x20	; 32
     e08:	f9 f0       	breq	.+62     	; 0xe48 <vfprintf+0xae>
     e0a:	83 32       	cpi	r24, 0x23	; 35
     e0c:	09 f1       	breq	.+66     	; 0xe50 <vfprintf+0xb6>
     e0e:	07 fd       	sbrc	r16, 7
     e10:	34 c0       	rjmp	.+104    	; 0xe7a <vfprintf+0xe0>
     e12:	20 ed       	ldi	r18, 0xD0	; 208
     e14:	28 0f       	add	r18, r24
     e16:	2a 30       	cpi	r18, 0x0A	; 10
     e18:	20 f5       	brcc	.+72     	; 0xe62 <vfprintf+0xc8>
     e1a:	06 ff       	sbrs	r16, 6
     e1c:	1b c0       	rjmp	.+54     	; 0xe54 <vfprintf+0xba>
     e1e:	fa e0       	ldi	r31, 0x0A	; 10
     e20:	ff 9e       	mul	r15, r31
     e22:	20 0d       	add	r18, r0
     e24:	11 24       	eor	r1, r1
     e26:	f2 2e       	mov	r15, r18
     e28:	05 c0       	rjmp	.+10     	; 0xe34 <vfprintf+0x9a>
     e2a:	8d 32       	cpi	r24, 0x2D	; 45
     e2c:	79 f0       	breq	.+30     	; 0xe4c <vfprintf+0xb2>
     e2e:	80 33       	cpi	r24, 0x30	; 48
     e30:	71 f7       	brne	.-36     	; 0xe0e <vfprintf+0x74>
     e32:	01 60       	ori	r16, 0x01	; 1
     e34:	f1 01       	movw	r30, r2
     e36:	93 fd       	sbrc	r25, 3
     e38:	85 91       	lpm	r24, Z+
     e3a:	93 ff       	sbrs	r25, 3
     e3c:	81 91       	ld	r24, Z+
     e3e:	1f 01       	movw	r2, r30
     e40:	81 11       	cpse	r24, r1
     e42:	dc cf       	rjmp	.-72     	; 0xdfc <vfprintf+0x62>
     e44:	1a c0       	rjmp	.+52     	; 0xe7a <vfprintf+0xe0>
     e46:	02 60       	ori	r16, 0x02	; 2
     e48:	04 60       	ori	r16, 0x04	; 4
     e4a:	f4 cf       	rjmp	.-24     	; 0xe34 <vfprintf+0x9a>
     e4c:	08 60       	ori	r16, 0x08	; 8
     e4e:	f2 cf       	rjmp	.-28     	; 0xe34 <vfprintf+0x9a>
     e50:	00 61       	ori	r16, 0x10	; 16
     e52:	f0 cf       	rjmp	.-32     	; 0xe34 <vfprintf+0x9a>
     e54:	3a e0       	ldi	r19, 0x0A	; 10
     e56:	53 9e       	mul	r5, r19
     e58:	20 0d       	add	r18, r0
     e5a:	11 24       	eor	r1, r1
     e5c:	52 2e       	mov	r5, r18
     e5e:	00 62       	ori	r16, 0x20	; 32
     e60:	e9 cf       	rjmp	.-46     	; 0xe34 <vfprintf+0x9a>
     e62:	8e 32       	cpi	r24, 0x2E	; 46
     e64:	21 f4       	brne	.+8      	; 0xe6e <vfprintf+0xd4>
     e66:	06 fd       	sbrc	r16, 6
     e68:	9d c2       	rjmp	.+1338   	; 0x13a4 <vfprintf+0x60a>
     e6a:	00 64       	ori	r16, 0x40	; 64
     e6c:	e3 cf       	rjmp	.-58     	; 0xe34 <vfprintf+0x9a>
     e6e:	8c 36       	cpi	r24, 0x6C	; 108
     e70:	11 f4       	brne	.+4      	; 0xe76 <vfprintf+0xdc>
     e72:	00 68       	ori	r16, 0x80	; 128
     e74:	df cf       	rjmp	.-66     	; 0xe34 <vfprintf+0x9a>
     e76:	88 36       	cpi	r24, 0x68	; 104
     e78:	e9 f2       	breq	.-70     	; 0xe34 <vfprintf+0x9a>
     e7a:	9b eb       	ldi	r25, 0xBB	; 187
     e7c:	98 0f       	add	r25, r24
     e7e:	93 30       	cpi	r25, 0x03	; 3
     e80:	08 f0       	brcs	.+2      	; 0xe84 <vfprintf+0xea>
     e82:	5f c0       	rjmp	.+190    	; 0xf42 <vfprintf+0x1a8>
     e84:	00 61       	ori	r16, 0x10	; 16
     e86:	80 5e       	subi	r24, 0xE0	; 224
     e88:	06 fd       	sbrc	r16, 6
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <vfprintf+0xf6>
     e8c:	46 e0       	ldi	r20, 0x06	; 6
     e8e:	f4 2e       	mov	r15, r20
     e90:	10 2f       	mov	r17, r16
     e92:	1f 73       	andi	r17, 0x3F	; 63
     e94:	85 36       	cpi	r24, 0x65	; 101
     e96:	09 f0       	breq	.+2      	; 0xe9a <vfprintf+0x100>
     e98:	5b c0       	rjmp	.+182    	; 0xf50 <vfprintf+0x1b6>
     e9a:	10 64       	ori	r17, 0x40	; 64
     e9c:	17 ff       	sbrs	r17, 7
     e9e:	61 c0       	rjmp	.+194    	; 0xf62 <vfprintf+0x1c8>
     ea0:	8f 2d       	mov	r24, r15
     ea2:	9b e3       	ldi	r25, 0x3B	; 59
     ea4:	9f 15       	cp	r25, r15
     ea6:	08 f4       	brcc	.+2      	; 0xeaa <vfprintf+0x110>
     ea8:	8b e3       	ldi	r24, 0x3B	; 59
     eaa:	44 24       	eor	r4, r4
     eac:	43 94       	inc	r4
     eae:	48 0e       	add	r4, r24
     eb0:	27 e0       	ldi	r18, 0x07	; 7
     eb2:	35 01       	movw	r6, r10
     eb4:	f4 e0       	ldi	r31, 0x04	; 4
     eb6:	6f 0e       	add	r6, r31
     eb8:	71 1c       	adc	r7, r1
     eba:	f5 01       	movw	r30, r10
     ebc:	60 81       	ld	r22, Z
     ebe:	71 81       	ldd	r23, Z+1	; 0x01
     ec0:	82 81       	ldd	r24, Z+2	; 0x02
     ec2:	93 81       	ldd	r25, Z+3	; 0x03
     ec4:	04 2d       	mov	r16, r4
     ec6:	a4 01       	movw	r20, r8
     ec8:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <__ftoa_engine>
     ecc:	5c 01       	movw	r10, r24
     ece:	f9 81       	ldd	r31, Y+1	; 0x01
     ed0:	fc 87       	std	Y+12, r31	; 0x0c
     ed2:	f0 ff       	sbrs	r31, 0
     ed4:	03 c0       	rjmp	.+6      	; 0xedc <vfprintf+0x142>
     ed6:	0d e2       	ldi	r16, 0x2D	; 45
     ed8:	f3 ff       	sbrs	r31, 3
     eda:	07 c0       	rjmp	.+14     	; 0xeea <vfprintf+0x150>
     edc:	0b e2       	ldi	r16, 0x2B	; 43
     ede:	11 fd       	sbrc	r17, 1
     ee0:	04 c0       	rjmp	.+8      	; 0xeea <vfprintf+0x150>
     ee2:	01 2f       	mov	r16, r17
     ee4:	04 70       	andi	r16, 0x04	; 4
     ee6:	12 fd       	sbrc	r17, 2
     ee8:	00 e2       	ldi	r16, 0x20	; 32
     eea:	2c 85       	ldd	r18, Y+12	; 0x0c
     eec:	2c 70       	andi	r18, 0x0C	; 12
     eee:	e2 2e       	mov	r14, r18
     ef0:	09 f4       	brne	.+2      	; 0xef4 <vfprintf+0x15a>
     ef2:	57 c0       	rjmp	.+174    	; 0xfa2 <vfprintf+0x208>
     ef4:	01 11       	cpse	r16, r1
     ef6:	ab c2       	rjmp	.+1366   	; 0x144e <vfprintf+0x6b4>
     ef8:	f3 e0       	ldi	r31, 0x03	; 3
     efa:	e1 2c       	mov	r14, r1
     efc:	f5 15       	cp	r31, r5
     efe:	a0 f4       	brcc	.+40     	; 0xf28 <vfprintf+0x18e>
     f00:	83 e0       	ldi	r24, 0x03	; 3
     f02:	e5 2c       	mov	r14, r5
     f04:	e8 1a       	sub	r14, r24
     f06:	13 fd       	sbrc	r17, 3
     f08:	08 c0       	rjmp	.+16     	; 0xf1a <vfprintf+0x180>
     f0a:	b6 01       	movw	r22, r12
     f0c:	80 e2       	ldi	r24, 0x20	; 32
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
     f14:	ea 94       	dec	r14
     f16:	e1 10       	cpse	r14, r1
     f18:	f8 cf       	rjmp	.-16     	; 0xf0a <vfprintf+0x170>
     f1a:	00 23       	and	r16, r16
     f1c:	29 f0       	breq	.+10     	; 0xf28 <vfprintf+0x18e>
     f1e:	b6 01       	movw	r22, r12
     f20:	80 2f       	mov	r24, r16
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
     f28:	3c 85       	ldd	r19, Y+12	; 0x0c
     f2a:	2c e5       	ldi	r18, 0x5C	; 92
     f2c:	a2 2e       	mov	r10, r18
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	b2 2e       	mov	r11, r18
     f32:	33 fd       	sbrc	r19, 3
     f34:	04 c0       	rjmp	.+8      	; 0xf3e <vfprintf+0x1a4>
     f36:	90 e6       	ldi	r25, 0x60	; 96
     f38:	a9 2e       	mov	r10, r25
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	b9 2e       	mov	r11, r25
     f3e:	10 71       	andi	r17, 0x10	; 16
     f40:	22 c0       	rjmp	.+68     	; 0xf86 <vfprintf+0x1ec>
     f42:	9b e9       	ldi	r25, 0x9B	; 155
     f44:	98 0f       	add	r25, r24
     f46:	93 30       	cpi	r25, 0x03	; 3
     f48:	08 f0       	brcs	.+2      	; 0xf4c <vfprintf+0x1b2>
     f4a:	33 c1       	rjmp	.+614    	; 0x11b2 <vfprintf+0x418>
     f4c:	0f 7e       	andi	r16, 0xEF	; 239
     f4e:	9c cf       	rjmp	.-200    	; 0xe88 <vfprintf+0xee>
     f50:	86 36       	cpi	r24, 0x66	; 102
     f52:	11 f4       	brne	.+4      	; 0xf58 <vfprintf+0x1be>
     f54:	10 68       	ori	r17, 0x80	; 128
     f56:	a2 cf       	rjmp	.-188    	; 0xe9c <vfprintf+0x102>
     f58:	ff 20       	and	r15, r15
     f5a:	09 f4       	brne	.+2      	; 0xf5e <vfprintf+0x1c4>
     f5c:	9f cf       	rjmp	.-194    	; 0xe9c <vfprintf+0x102>
     f5e:	fa 94       	dec	r15
     f60:	9d cf       	rjmp	.-198    	; 0xe9c <vfprintf+0x102>
     f62:	e7 e0       	ldi	r30, 0x07	; 7
     f64:	2f 2d       	mov	r18, r15
     f66:	ef 15       	cp	r30, r15
     f68:	18 f4       	brcc	.+6      	; 0xf70 <vfprintf+0x1d6>
     f6a:	27 e0       	ldi	r18, 0x07	; 7
     f6c:	37 e0       	ldi	r19, 0x07	; 7
     f6e:	f3 2e       	mov	r15, r19
     f70:	41 2c       	mov	r4, r1
     f72:	9f cf       	rjmp	.-194    	; 0xeb2 <vfprintf+0x118>
     f74:	11 11       	cpse	r17, r1
     f76:	80 52       	subi	r24, 0x20	; 32
     f78:	b6 01       	movw	r22, r12
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
     f80:	8f ef       	ldi	r24, 0xFF	; 255
     f82:	a8 1a       	sub	r10, r24
     f84:	b8 0a       	sbc	r11, r24
     f86:	f5 01       	movw	r30, r10
     f88:	84 91       	lpm	r24, Z
     f8a:	81 11       	cpse	r24, r1
     f8c:	f3 cf       	rjmp	.-26     	; 0xf74 <vfprintf+0x1da>
     f8e:	ee 20       	and	r14, r14
     f90:	09 f4       	brne	.+2      	; 0xf94 <vfprintf+0x1fa>
     f92:	2f cf       	rjmp	.-418    	; 0xdf2 <vfprintf+0x58>
     f94:	b6 01       	movw	r22, r12
     f96:	80 e2       	ldi	r24, 0x20	; 32
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
     f9e:	ea 94       	dec	r14
     fa0:	f6 cf       	rjmp	.-20     	; 0xf8e <vfprintf+0x1f4>
     fa2:	17 ff       	sbrs	r17, 7
     fa4:	6f c0       	rjmp	.+222    	; 0x1084 <vfprintf+0x2ea>
     fa6:	4a 0c       	add	r4, r10
     fa8:	fc 85       	ldd	r31, Y+12	; 0x0c
     faa:	f4 ff       	sbrs	r31, 4
     fac:	04 c0       	rjmp	.+8      	; 0xfb6 <vfprintf+0x21c>
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	81 33       	cpi	r24, 0x31	; 49
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <vfprintf+0x21c>
     fb4:	4a 94       	dec	r4
     fb6:	14 14       	cp	r1, r4
     fb8:	0c f0       	brlt	.+2      	; 0xfbc <vfprintf+0x222>
     fba:	86 c0       	rjmp	.+268    	; 0x10c8 <vfprintf+0x32e>
     fbc:	28 e0       	ldi	r18, 0x08	; 8
     fbe:	24 15       	cp	r18, r4
     fc0:	10 f4       	brcc	.+4      	; 0xfc6 <vfprintf+0x22c>
     fc2:	88 e0       	ldi	r24, 0x08	; 8
     fc4:	48 2e       	mov	r4, r24
     fc6:	85 e0       	ldi	r24, 0x05	; 5
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	17 ff       	sbrs	r17, 7
     fcc:	06 c0       	rjmp	.+12     	; 0xfda <vfprintf+0x240>
     fce:	c5 01       	movw	r24, r10
     fd0:	b7 fe       	sbrs	r11, 7
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <vfprintf+0x23e>
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	01 96       	adiw	r24, 0x01	; 1
     fda:	01 11       	cpse	r16, r1
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	ff 20       	and	r15, r15
     fe0:	31 f0       	breq	.+12     	; 0xfee <vfprintf+0x254>
     fe2:	2f 2d       	mov	r18, r15
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	2f 5f       	subi	r18, 0xFF	; 255
     fe8:	3f 4f       	sbci	r19, 0xFF	; 255
     fea:	82 0f       	add	r24, r18
     fec:	93 1f       	adc	r25, r19
     fee:	58 16       	cp	r5, r24
     ff0:	19 06       	cpc	r1, r25
     ff2:	19 f0       	breq	.+6      	; 0xffa <vfprintf+0x260>
     ff4:	14 f0       	brlt	.+4      	; 0xffa <vfprintf+0x260>
     ff6:	e5 2c       	mov	r14, r5
     ff8:	e8 1a       	sub	r14, r24
     ffa:	81 2f       	mov	r24, r17
     ffc:	89 70       	andi	r24, 0x09	; 9
     ffe:	11 f4       	brne	.+4      	; 0x1004 <vfprintf+0x26a>
    1000:	e1 10       	cpse	r14, r1
    1002:	67 c0       	rjmp	.+206    	; 0x10d2 <vfprintf+0x338>
    1004:	00 23       	and	r16, r16
    1006:	29 f0       	breq	.+10     	; 0x1012 <vfprintf+0x278>
    1008:	b6 01       	movw	r22, r12
    100a:	80 2f       	mov	r24, r16
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
    1012:	13 fd       	sbrc	r17, 3
    1014:	02 c0       	rjmp	.+4      	; 0x101a <vfprintf+0x280>
    1016:	e1 10       	cpse	r14, r1
    1018:	63 c0       	rjmp	.+198    	; 0x10e0 <vfprintf+0x346>
    101a:	17 ff       	sbrs	r17, 7
    101c:	7c c0       	rjmp	.+248    	; 0x1116 <vfprintf+0x37c>
    101e:	85 01       	movw	r16, r10
    1020:	b7 fe       	sbrs	r11, 7
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <vfprintf+0x28e>
    1024:	10 e0       	ldi	r17, 0x00	; 0
    1026:	00 e0       	ldi	r16, 0x00	; 0
    1028:	c5 01       	movw	r24, r10
    102a:	84 19       	sub	r24, r4
    102c:	91 09       	sbc	r25, r1
    102e:	2c 01       	movw	r4, r24
    1030:	6f 2d       	mov	r22, r15
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	ee 27       	eor	r30, r30
    1036:	ff 27       	eor	r31, r31
    1038:	e6 1b       	sub	r30, r22
    103a:	f7 0b       	sbc	r31, r23
    103c:	ff 87       	std	Y+15, r31	; 0x0f
    103e:	ee 87       	std	Y+14, r30	; 0x0e
    1040:	0f 3f       	cpi	r16, 0xFF	; 255
    1042:	10 07       	cpc	r17, r16
    1044:	29 f4       	brne	.+10     	; 0x1050 <vfprintf+0x2b6>
    1046:	b6 01       	movw	r22, r12
    1048:	8e e2       	ldi	r24, 0x2E	; 46
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
    1050:	a0 16       	cp	r10, r16
    1052:	b1 06       	cpc	r11, r17
    1054:	0c f4       	brge	.+2      	; 0x1058 <vfprintf+0x2be>
    1056:	4b c0       	rjmp	.+150    	; 0x10ee <vfprintf+0x354>
    1058:	40 16       	cp	r4, r16
    105a:	51 06       	cpc	r5, r17
    105c:	0c f0       	brlt	.+2      	; 0x1060 <vfprintf+0x2c6>
    105e:	47 c0       	rjmp	.+142    	; 0x10ee <vfprintf+0x354>
    1060:	f5 01       	movw	r30, r10
    1062:	e0 1b       	sub	r30, r16
    1064:	f1 0b       	sbc	r31, r17
    1066:	e8 0d       	add	r30, r8
    1068:	f9 1d       	adc	r31, r9
    106a:	81 81       	ldd	r24, Z+1	; 0x01
    106c:	01 50       	subi	r16, 0x01	; 1
    106e:	11 09       	sbc	r17, r1
    1070:	2e 85       	ldd	r18, Y+14	; 0x0e
    1072:	3f 85       	ldd	r19, Y+15	; 0x0f
    1074:	02 17       	cp	r16, r18
    1076:	13 07       	cpc	r17, r19
    1078:	e4 f1       	brlt	.+120    	; 0x10f2 <vfprintf+0x358>
    107a:	b6 01       	movw	r22, r12
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
    1082:	de cf       	rjmp	.-68     	; 0x1040 <vfprintf+0x2a6>
    1084:	16 fd       	sbrc	r17, 6
    1086:	9f cf       	rjmp	.-194    	; 0xfc6 <vfprintf+0x22c>
    1088:	ef 2d       	mov	r30, r15
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	ea 15       	cp	r30, r10
    108e:	fb 05       	cpc	r31, r11
    1090:	34 f0       	brlt	.+12     	; 0x109e <vfprintf+0x304>
    1092:	3c ef       	ldi	r19, 0xFC	; 252
    1094:	a3 16       	cp	r10, r19
    1096:	3f ef       	ldi	r19, 0xFF	; 255
    1098:	b3 06       	cpc	r11, r19
    109a:	0c f0       	brlt	.+2      	; 0x109e <vfprintf+0x304>
    109c:	10 68       	ori	r17, 0x80	; 128
    109e:	32 96       	adiw	r30, 0x02	; 2
    10a0:	e8 0d       	add	r30, r8
    10a2:	f9 1d       	adc	r31, r9
    10a4:	01 c0       	rjmp	.+2      	; 0x10a8 <vfprintf+0x30e>
    10a6:	fa 94       	dec	r15
    10a8:	ff 20       	and	r15, r15
    10aa:	19 f0       	breq	.+6      	; 0x10b2 <vfprintf+0x318>
    10ac:	82 91       	ld	r24, -Z
    10ae:	80 33       	cpi	r24, 0x30	; 48
    10b0:	d1 f3       	breq	.-12     	; 0x10a6 <vfprintf+0x30c>
    10b2:	17 ff       	sbrs	r17, 7
    10b4:	88 cf       	rjmp	.-240    	; 0xfc6 <vfprintf+0x22c>
    10b6:	44 24       	eor	r4, r4
    10b8:	43 94       	inc	r4
    10ba:	4f 0c       	add	r4, r15
    10bc:	fa 14       	cp	r15, r10
    10be:	1b 04       	cpc	r1, r11
    10c0:	31 f0       	breq	.+12     	; 0x10ce <vfprintf+0x334>
    10c2:	2c f0       	brlt	.+10     	; 0x10ce <vfprintf+0x334>
    10c4:	fa 18       	sub	r15, r10
    10c6:	7f cf       	rjmp	.-258    	; 0xfc6 <vfprintf+0x22c>
    10c8:	44 24       	eor	r4, r4
    10ca:	43 94       	inc	r4
    10cc:	7c cf       	rjmp	.-264    	; 0xfc6 <vfprintf+0x22c>
    10ce:	f1 2c       	mov	r15, r1
    10d0:	7a cf       	rjmp	.-268    	; 0xfc6 <vfprintf+0x22c>
    10d2:	b6 01       	movw	r22, r12
    10d4:	80 e2       	ldi	r24, 0x20	; 32
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
    10dc:	ea 94       	dec	r14
    10de:	90 cf       	rjmp	.-224    	; 0x1000 <vfprintf+0x266>
    10e0:	b6 01       	movw	r22, r12
    10e2:	80 e3       	ldi	r24, 0x30	; 48
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
    10ea:	ea 94       	dec	r14
    10ec:	94 cf       	rjmp	.-216    	; 0x1016 <vfprintf+0x27c>
    10ee:	80 e3       	ldi	r24, 0x30	; 48
    10f0:	bd cf       	rjmp	.-134    	; 0x106c <vfprintf+0x2d2>
    10f2:	a0 16       	cp	r10, r16
    10f4:	b1 06       	cpc	r11, r17
    10f6:	41 f4       	brne	.+16     	; 0x1108 <vfprintf+0x36e>
    10f8:	9a 81       	ldd	r25, Y+2	; 0x02
    10fa:	96 33       	cpi	r25, 0x36	; 54
    10fc:	50 f4       	brcc	.+20     	; 0x1112 <vfprintf+0x378>
    10fe:	95 33       	cpi	r25, 0x35	; 53
    1100:	19 f4       	brne	.+6      	; 0x1108 <vfprintf+0x36e>
    1102:	3c 85       	ldd	r19, Y+12	; 0x0c
    1104:	34 ff       	sbrs	r19, 4
    1106:	05 c0       	rjmp	.+10     	; 0x1112 <vfprintf+0x378>
    1108:	b6 01       	movw	r22, r12
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
    1110:	3e cf       	rjmp	.-388    	; 0xf8e <vfprintf+0x1f4>
    1112:	81 e3       	ldi	r24, 0x31	; 49
    1114:	f9 cf       	rjmp	.-14     	; 0x1108 <vfprintf+0x36e>
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	81 33       	cpi	r24, 0x31	; 49
    111a:	19 f0       	breq	.+6      	; 0x1122 <vfprintf+0x388>
    111c:	9c 85       	ldd	r25, Y+12	; 0x0c
    111e:	9f 7e       	andi	r25, 0xEF	; 239
    1120:	9c 87       	std	Y+12, r25	; 0x0c
    1122:	b6 01       	movw	r22, r12
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
    112a:	ff 20       	and	r15, r15
    112c:	a9 f0       	breq	.+42     	; 0x1158 <vfprintf+0x3be>
    112e:	b6 01       	movw	r22, r12
    1130:	8e e2       	ldi	r24, 0x2E	; 46
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
    1138:	f3 94       	inc	r15
    113a:	f3 94       	inc	r15
    113c:	e2 e0       	ldi	r30, 0x02	; 2
    113e:	01 e0       	ldi	r16, 0x01	; 1
    1140:	0e 0f       	add	r16, r30
    1142:	e8 0d       	add	r30, r8
    1144:	f9 2d       	mov	r31, r9
    1146:	f1 1d       	adc	r31, r1
    1148:	80 81       	ld	r24, Z
    114a:	b6 01       	movw	r22, r12
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
    1152:	e0 2f       	mov	r30, r16
    1154:	0f 11       	cpse	r16, r15
    1156:	f3 cf       	rjmp	.-26     	; 0x113e <vfprintf+0x3a4>
    1158:	85 e6       	ldi	r24, 0x65	; 101
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	14 ff       	sbrs	r17, 4
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <vfprintf+0x3ca>
    1160:	85 e4       	ldi	r24, 0x45	; 69
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	b6 01       	movw	r22, r12
    1166:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
    116a:	b7 fc       	sbrc	r11, 7
    116c:	06 c0       	rjmp	.+12     	; 0x117a <vfprintf+0x3e0>
    116e:	a1 14       	cp	r10, r1
    1170:	b1 04       	cpc	r11, r1
    1172:	c1 f4       	brne	.+48     	; 0x11a4 <vfprintf+0x40a>
    1174:	ec 85       	ldd	r30, Y+12	; 0x0c
    1176:	e4 ff       	sbrs	r30, 4
    1178:	15 c0       	rjmp	.+42     	; 0x11a4 <vfprintf+0x40a>
    117a:	b1 94       	neg	r11
    117c:	a1 94       	neg	r10
    117e:	b1 08       	sbc	r11, r1
    1180:	8d e2       	ldi	r24, 0x2D	; 45
    1182:	b6 01       	movw	r22, r12
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
    118a:	80 e3       	ldi	r24, 0x30	; 48
    118c:	2a e0       	ldi	r18, 0x0A	; 10
    118e:	a2 16       	cp	r10, r18
    1190:	b1 04       	cpc	r11, r1
    1192:	54 f4       	brge	.+20     	; 0x11a8 <vfprintf+0x40e>
    1194:	b6 01       	movw	r22, r12
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
    119c:	b6 01       	movw	r22, r12
    119e:	c5 01       	movw	r24, r10
    11a0:	c0 96       	adiw	r24, 0x30	; 48
    11a2:	b4 cf       	rjmp	.-152    	; 0x110c <vfprintf+0x372>
    11a4:	8b e2       	ldi	r24, 0x2B	; 43
    11a6:	ed cf       	rjmp	.-38     	; 0x1182 <vfprintf+0x3e8>
    11a8:	8f 5f       	subi	r24, 0xFF	; 255
    11aa:	fa e0       	ldi	r31, 0x0A	; 10
    11ac:	af 1a       	sub	r10, r31
    11ae:	b1 08       	sbc	r11, r1
    11b0:	ed cf       	rjmp	.-38     	; 0x118c <vfprintf+0x3f2>
    11b2:	83 36       	cpi	r24, 0x63	; 99
    11b4:	c9 f0       	breq	.+50     	; 0x11e8 <vfprintf+0x44e>
    11b6:	83 37       	cpi	r24, 0x73	; 115
    11b8:	71 f1       	breq	.+92     	; 0x1216 <vfprintf+0x47c>
    11ba:	83 35       	cpi	r24, 0x53	; 83
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <vfprintf+0x426>
    11be:	5b c0       	rjmp	.+182    	; 0x1276 <vfprintf+0x4dc>
    11c0:	35 01       	movw	r6, r10
    11c2:	f2 e0       	ldi	r31, 0x02	; 2
    11c4:	6f 0e       	add	r6, r31
    11c6:	71 1c       	adc	r7, r1
    11c8:	f5 01       	movw	r30, r10
    11ca:	a0 80       	ld	r10, Z
    11cc:	b1 80       	ldd	r11, Z+1	; 0x01
    11ce:	6f 2d       	mov	r22, r15
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	06 fd       	sbrc	r16, 6
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <vfprintf+0x440>
    11d6:	6f ef       	ldi	r22, 0xFF	; 255
    11d8:	7f ef       	ldi	r23, 0xFF	; 255
    11da:	c5 01       	movw	r24, r10
    11dc:	0e 94 bf 0c 	call	0x197e	; 0x197e <strnlen_P>
    11e0:	9d 87       	std	Y+13, r25	; 0x0d
    11e2:	8c 87       	std	Y+12, r24	; 0x0c
    11e4:	00 68       	ori	r16, 0x80	; 128
    11e6:	0d c0       	rjmp	.+26     	; 0x1202 <vfprintf+0x468>
    11e8:	35 01       	movw	r6, r10
    11ea:	32 e0       	ldi	r19, 0x02	; 2
    11ec:	63 0e       	add	r6, r19
    11ee:	71 1c       	adc	r7, r1
    11f0:	f5 01       	movw	r30, r10
    11f2:	80 81       	ld	r24, Z
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	21 e0       	ldi	r18, 0x01	; 1
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	3d 87       	std	Y+13, r19	; 0x0d
    11fc:	2c 87       	std	Y+12, r18	; 0x0c
    11fe:	54 01       	movw	r10, r8
    1200:	0f 77       	andi	r16, 0x7F	; 127
    1202:	03 fd       	sbrc	r16, 3
    1204:	06 c0       	rjmp	.+12     	; 0x1212 <vfprintf+0x478>
    1206:	2c 85       	ldd	r18, Y+12	; 0x0c
    1208:	3d 85       	ldd	r19, Y+13	; 0x0d
    120a:	52 16       	cp	r5, r18
    120c:	13 06       	cpc	r1, r19
    120e:	09 f0       	breq	.+2      	; 0x1212 <vfprintf+0x478>
    1210:	a8 f4       	brcc	.+42     	; 0x123c <vfprintf+0x4a2>
    1212:	e5 2c       	mov	r14, r5
    1214:	2b c0       	rjmp	.+86     	; 0x126c <vfprintf+0x4d2>
    1216:	35 01       	movw	r6, r10
    1218:	32 e0       	ldi	r19, 0x02	; 2
    121a:	63 0e       	add	r6, r19
    121c:	71 1c       	adc	r7, r1
    121e:	f5 01       	movw	r30, r10
    1220:	a0 80       	ld	r10, Z
    1222:	b1 80       	ldd	r11, Z+1	; 0x01
    1224:	6f 2d       	mov	r22, r15
    1226:	70 e0       	ldi	r23, 0x00	; 0
    1228:	06 fd       	sbrc	r16, 6
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <vfprintf+0x496>
    122c:	6f ef       	ldi	r22, 0xFF	; 255
    122e:	7f ef       	ldi	r23, 0xFF	; 255
    1230:	c5 01       	movw	r24, r10
    1232:	0e 94 ca 0c 	call	0x1994	; 0x1994 <strnlen>
    1236:	9d 87       	std	Y+13, r25	; 0x0d
    1238:	8c 87       	std	Y+12, r24	; 0x0c
    123a:	e2 cf       	rjmp	.-60     	; 0x1200 <vfprintf+0x466>
    123c:	b6 01       	movw	r22, r12
    123e:	80 e2       	ldi	r24, 0x20	; 32
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
    1246:	5a 94       	dec	r5
    1248:	de cf       	rjmp	.-68     	; 0x1206 <vfprintf+0x46c>
    124a:	f5 01       	movw	r30, r10
    124c:	07 fd       	sbrc	r16, 7
    124e:	85 91       	lpm	r24, Z+
    1250:	07 ff       	sbrs	r16, 7
    1252:	81 91       	ld	r24, Z+
    1254:	5f 01       	movw	r10, r30
    1256:	b6 01       	movw	r22, r12
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
    125e:	e1 10       	cpse	r14, r1
    1260:	ea 94       	dec	r14
    1262:	8c 85       	ldd	r24, Y+12	; 0x0c
    1264:	9d 85       	ldd	r25, Y+13	; 0x0d
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	9d 87       	std	Y+13, r25	; 0x0d
    126a:	8c 87       	std	Y+12, r24	; 0x0c
    126c:	ec 85       	ldd	r30, Y+12	; 0x0c
    126e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1270:	ef 2b       	or	r30, r31
    1272:	59 f7       	brne	.-42     	; 0x124a <vfprintf+0x4b0>
    1274:	8c ce       	rjmp	.-744    	; 0xf8e <vfprintf+0x1f4>
    1276:	84 36       	cpi	r24, 0x64	; 100
    1278:	19 f0       	breq	.+6      	; 0x1280 <vfprintf+0x4e6>
    127a:	89 36       	cpi	r24, 0x69	; 105
    127c:	09 f0       	breq	.+2      	; 0x1280 <vfprintf+0x4e6>
    127e:	74 c0       	rjmp	.+232    	; 0x1368 <vfprintf+0x5ce>
    1280:	35 01       	movw	r6, r10
    1282:	07 ff       	sbrs	r16, 7
    1284:	66 c0       	rjmp	.+204    	; 0x1352 <vfprintf+0x5b8>
    1286:	f4 e0       	ldi	r31, 0x04	; 4
    1288:	6f 0e       	add	r6, r31
    128a:	71 1c       	adc	r7, r1
    128c:	f5 01       	movw	r30, r10
    128e:	60 81       	ld	r22, Z
    1290:	71 81       	ldd	r23, Z+1	; 0x01
    1292:	82 81       	ldd	r24, Z+2	; 0x02
    1294:	93 81       	ldd	r25, Z+3	; 0x03
    1296:	10 2f       	mov	r17, r16
    1298:	1f 76       	andi	r17, 0x6F	; 111
    129a:	97 ff       	sbrs	r25, 7
    129c:	08 c0       	rjmp	.+16     	; 0x12ae <vfprintf+0x514>
    129e:	90 95       	com	r25
    12a0:	80 95       	com	r24
    12a2:	70 95       	com	r23
    12a4:	61 95       	neg	r22
    12a6:	7f 4f       	sbci	r23, 0xFF	; 255
    12a8:	8f 4f       	sbci	r24, 0xFF	; 255
    12aa:	9f 4f       	sbci	r25, 0xFF	; 255
    12ac:	10 68       	ori	r17, 0x80	; 128
    12ae:	2a e0       	ldi	r18, 0x0A	; 10
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	a4 01       	movw	r20, r8
    12b4:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__ultoa_invert>
    12b8:	a8 2e       	mov	r10, r24
    12ba:	a8 18       	sub	r10, r8
    12bc:	ba 2c       	mov	r11, r10
    12be:	01 2f       	mov	r16, r17
    12c0:	16 ff       	sbrs	r17, 6
    12c2:	0a c0       	rjmp	.+20     	; 0x12d8 <vfprintf+0x53e>
    12c4:	0e 7f       	andi	r16, 0xFE	; 254
    12c6:	af 14       	cp	r10, r15
    12c8:	38 f4       	brcc	.+14     	; 0x12d8 <vfprintf+0x53e>
    12ca:	14 ff       	sbrs	r17, 4
    12cc:	04 c0       	rjmp	.+8      	; 0x12d6 <vfprintf+0x53c>
    12ce:	12 fd       	sbrc	r17, 2
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <vfprintf+0x53c>
    12d2:	01 2f       	mov	r16, r17
    12d4:	0e 7e       	andi	r16, 0xEE	; 238
    12d6:	bf 2c       	mov	r11, r15
    12d8:	04 ff       	sbrs	r16, 4
    12da:	8e c0       	rjmp	.+284    	; 0x13f8 <vfprintf+0x65e>
    12dc:	fe 01       	movw	r30, r28
    12de:	ea 0d       	add	r30, r10
    12e0:	f1 1d       	adc	r31, r1
    12e2:	80 81       	ld	r24, Z
    12e4:	80 33       	cpi	r24, 0x30	; 48
    12e6:	09 f0       	breq	.+2      	; 0x12ea <vfprintf+0x550>
    12e8:	80 c0       	rjmp	.+256    	; 0x13ea <vfprintf+0x650>
    12ea:	09 7e       	andi	r16, 0xE9	; 233
    12ec:	f0 2f       	mov	r31, r16
    12ee:	f8 70       	andi	r31, 0x08	; 8
    12f0:	ef 2e       	mov	r14, r31
    12f2:	03 fd       	sbrc	r16, 3
    12f4:	90 c0       	rjmp	.+288    	; 0x1416 <vfprintf+0x67c>
    12f6:	00 ff       	sbrs	r16, 0
    12f8:	8a c0       	rjmp	.+276    	; 0x140e <vfprintf+0x674>
    12fa:	fa 2c       	mov	r15, r10
    12fc:	b5 14       	cp	r11, r5
    12fe:	10 f4       	brcc	.+4      	; 0x1304 <vfprintf+0x56a>
    1300:	f5 0c       	add	r15, r5
    1302:	fb 18       	sub	r15, r11
    1304:	04 ff       	sbrs	r16, 4
    1306:	8d c0       	rjmp	.+282    	; 0x1422 <vfprintf+0x688>
    1308:	b6 01       	movw	r22, r12
    130a:	80 e3       	ldi	r24, 0x30	; 48
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
    1312:	02 ff       	sbrs	r16, 2
    1314:	09 c0       	rjmp	.+18     	; 0x1328 <vfprintf+0x58e>
    1316:	88 e7       	ldi	r24, 0x78	; 120
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	01 ff       	sbrs	r16, 1
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <vfprintf+0x588>
    131e:	88 e5       	ldi	r24, 0x58	; 88
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	b6 01       	movw	r22, r12
    1324:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
    1328:	af 14       	cp	r10, r15
    132a:	08 f4       	brcc	.+2      	; 0x132e <vfprintf+0x594>
    132c:	86 c0       	rjmp	.+268    	; 0x143a <vfprintf+0x6a0>
    132e:	aa 94       	dec	r10
    1330:	0a 2d       	mov	r16, r10
    1332:	10 e0       	ldi	r17, 0x00	; 0
    1334:	0f 5f       	subi	r16, 0xFF	; 255
    1336:	1f 4f       	sbci	r17, 0xFF	; 255
    1338:	08 0d       	add	r16, r8
    133a:	19 1d       	adc	r17, r9
    133c:	f8 01       	movw	r30, r16
    133e:	82 91       	ld	r24, -Z
    1340:	8f 01       	movw	r16, r30
    1342:	b6 01       	movw	r22, r12
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
    134a:	80 16       	cp	r8, r16
    134c:	91 06       	cpc	r9, r17
    134e:	b1 f7       	brne	.-20     	; 0x133c <vfprintf+0x5a2>
    1350:	1e ce       	rjmp	.-964    	; 0xf8e <vfprintf+0x1f4>
    1352:	f2 e0       	ldi	r31, 0x02	; 2
    1354:	6f 0e       	add	r6, r31
    1356:	71 1c       	adc	r7, r1
    1358:	f5 01       	movw	r30, r10
    135a:	60 81       	ld	r22, Z
    135c:	71 81       	ldd	r23, Z+1	; 0x01
    135e:	07 2e       	mov	r0, r23
    1360:	00 0c       	add	r0, r0
    1362:	88 0b       	sbc	r24, r24
    1364:	99 0b       	sbc	r25, r25
    1366:	97 cf       	rjmp	.-210    	; 0x1296 <vfprintf+0x4fc>
    1368:	10 2f       	mov	r17, r16
    136a:	85 37       	cpi	r24, 0x75	; 117
    136c:	a9 f4       	brne	.+42     	; 0x1398 <vfprintf+0x5fe>
    136e:	1f 7e       	andi	r17, 0xEF	; 239
    1370:	2a e0       	ldi	r18, 0x0A	; 10
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	35 01       	movw	r6, r10
    1376:	17 ff       	sbrs	r17, 7
    1378:	2f c0       	rjmp	.+94     	; 0x13d8 <vfprintf+0x63e>
    137a:	f4 e0       	ldi	r31, 0x04	; 4
    137c:	6f 0e       	add	r6, r31
    137e:	71 1c       	adc	r7, r1
    1380:	f5 01       	movw	r30, r10
    1382:	60 81       	ld	r22, Z
    1384:	71 81       	ldd	r23, Z+1	; 0x01
    1386:	82 81       	ldd	r24, Z+2	; 0x02
    1388:	93 81       	ldd	r25, Z+3	; 0x03
    138a:	a4 01       	movw	r20, r8
    138c:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__ultoa_invert>
    1390:	a8 2e       	mov	r10, r24
    1392:	a8 18       	sub	r10, r8
    1394:	1f 77       	andi	r17, 0x7F	; 127
    1396:	92 cf       	rjmp	.-220    	; 0x12bc <vfprintf+0x522>
    1398:	19 7f       	andi	r17, 0xF9	; 249
    139a:	8f 36       	cpi	r24, 0x6F	; 111
    139c:	d1 f0       	breq	.+52     	; 0x13d2 <vfprintf+0x638>
    139e:	48 f4       	brcc	.+18     	; 0x13b2 <vfprintf+0x618>
    13a0:	88 35       	cpi	r24, 0x58	; 88
    13a2:	91 f0       	breq	.+36     	; 0x13c8 <vfprintf+0x62e>
    13a4:	f6 01       	movw	r30, r12
    13a6:	86 81       	ldd	r24, Z+6	; 0x06
    13a8:	97 81       	ldd	r25, Z+7	; 0x07
    13aa:	2f 96       	adiw	r28, 0x0f	; 15
    13ac:	e2 e1       	ldi	r30, 0x12	; 18
    13ae:	0c 94 cc 0b 	jmp	0x1798	; 0x1798 <__epilogue_restores__>
    13b2:	80 37       	cpi	r24, 0x70	; 112
    13b4:	39 f0       	breq	.+14     	; 0x13c4 <vfprintf+0x62a>
    13b6:	88 37       	cpi	r24, 0x78	; 120
    13b8:	a9 f7       	brne	.-22     	; 0x13a4 <vfprintf+0x60a>
    13ba:	14 fd       	sbrc	r17, 4
    13bc:	14 60       	ori	r17, 0x04	; 4
    13be:	20 e1       	ldi	r18, 0x10	; 16
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	d8 cf       	rjmp	.-80     	; 0x1374 <vfprintf+0x5da>
    13c4:	10 61       	ori	r17, 0x10	; 16
    13c6:	f9 cf       	rjmp	.-14     	; 0x13ba <vfprintf+0x620>
    13c8:	04 fd       	sbrc	r16, 4
    13ca:	16 60       	ori	r17, 0x06	; 6
    13cc:	20 e1       	ldi	r18, 0x10	; 16
    13ce:	32 e0       	ldi	r19, 0x02	; 2
    13d0:	d1 cf       	rjmp	.-94     	; 0x1374 <vfprintf+0x5da>
    13d2:	28 e0       	ldi	r18, 0x08	; 8
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	ce cf       	rjmp	.-100    	; 0x1374 <vfprintf+0x5da>
    13d8:	f2 e0       	ldi	r31, 0x02	; 2
    13da:	6f 0e       	add	r6, r31
    13dc:	71 1c       	adc	r7, r1
    13de:	f5 01       	movw	r30, r10
    13e0:	60 81       	ld	r22, Z
    13e2:	71 81       	ldd	r23, Z+1	; 0x01
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	d0 cf       	rjmp	.-96     	; 0x138a <vfprintf+0x5f0>
    13ea:	02 fd       	sbrc	r16, 2
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <vfprintf+0x658>
    13ee:	b3 94       	inc	r11
    13f0:	7d cf       	rjmp	.-262    	; 0x12ec <vfprintf+0x552>
    13f2:	b3 94       	inc	r11
    13f4:	b3 94       	inc	r11
    13f6:	7a cf       	rjmp	.-268    	; 0x12ec <vfprintf+0x552>
    13f8:	80 2f       	mov	r24, r16
    13fa:	86 78       	andi	r24, 0x86	; 134
    13fc:	09 f4       	brne	.+2      	; 0x1400 <vfprintf+0x666>
    13fe:	76 cf       	rjmp	.-276    	; 0x12ec <vfprintf+0x552>
    1400:	f6 cf       	rjmp	.-20     	; 0x13ee <vfprintf+0x654>
    1402:	b6 01       	movw	r22, r12
    1404:	80 e2       	ldi	r24, 0x20	; 32
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
    140c:	b3 94       	inc	r11
    140e:	b5 14       	cp	r11, r5
    1410:	c0 f3       	brcs	.-16     	; 0x1402 <vfprintf+0x668>
    1412:	e1 2c       	mov	r14, r1
    1414:	77 cf       	rjmp	.-274    	; 0x1304 <vfprintf+0x56a>
    1416:	e5 2c       	mov	r14, r5
    1418:	eb 18       	sub	r14, r11
    141a:	b5 14       	cp	r11, r5
    141c:	08 f4       	brcc	.+2      	; 0x1420 <vfprintf+0x686>
    141e:	72 cf       	rjmp	.-284    	; 0x1304 <vfprintf+0x56a>
    1420:	f8 cf       	rjmp	.-16     	; 0x1412 <vfprintf+0x678>
    1422:	80 2f       	mov	r24, r16
    1424:	86 78       	andi	r24, 0x86	; 134
    1426:	09 f4       	brne	.+2      	; 0x142a <vfprintf+0x690>
    1428:	7f cf       	rjmp	.-258    	; 0x1328 <vfprintf+0x58e>
    142a:	8b e2       	ldi	r24, 0x2B	; 43
    142c:	01 ff       	sbrs	r16, 1
    142e:	80 e2       	ldi	r24, 0x20	; 32
    1430:	07 fd       	sbrc	r16, 7
    1432:	8d e2       	ldi	r24, 0x2D	; 45
    1434:	b6 01       	movw	r22, r12
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	75 cf       	rjmp	.-278    	; 0x1324 <vfprintf+0x58a>
    143a:	b6 01       	movw	r22, r12
    143c:	80 e3       	ldi	r24, 0x30	; 48
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <fputc>
    1444:	fa 94       	dec	r15
    1446:	70 cf       	rjmp	.-288    	; 0x1328 <vfprintf+0x58e>
    1448:	8f ef       	ldi	r24, 0xFF	; 255
    144a:	9f ef       	ldi	r25, 0xFF	; 255
    144c:	ae cf       	rjmp	.-164    	; 0x13aa <vfprintf+0x610>
    144e:	24 e0       	ldi	r18, 0x04	; 4
    1450:	e1 2c       	mov	r14, r1
    1452:	25 15       	cp	r18, r5
    1454:	08 f0       	brcs	.+2      	; 0x1458 <vfprintf+0x6be>
    1456:	63 cd       	rjmp	.-1338   	; 0xf1e <vfprintf+0x184>
    1458:	84 e0       	ldi	r24, 0x04	; 4
    145a:	53 cd       	rjmp	.-1370   	; 0xf02 <vfprintf+0x168>

0000145c <__divsf3>:
    145c:	0e 94 42 0a 	call	0x1484	; 0x1484 <__divsf3x>
    1460:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__fp_round>
    1464:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__fp_pscB>
    1468:	58 f0       	brcs	.+22     	; 0x1480 <__divsf3+0x24>
    146a:	0e 94 15 0b 	call	0x162a	; 0x162a <__fp_pscA>
    146e:	40 f0       	brcs	.+16     	; 0x1480 <__divsf3+0x24>
    1470:	29 f4       	brne	.+10     	; 0x147c <__divsf3+0x20>
    1472:	5f 3f       	cpi	r21, 0xFF	; 255
    1474:	29 f0       	breq	.+10     	; 0x1480 <__divsf3+0x24>
    1476:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <__fp_inf>
    147a:	51 11       	cpse	r21, r1
    147c:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <__fp_szero>
    1480:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__fp_nan>

00001484 <__divsf3x>:
    1484:	0e 94 34 0b 	call	0x1668	; 0x1668 <__fp_split3>
    1488:	68 f3       	brcs	.-38     	; 0x1464 <__divsf3+0x8>

0000148a <__divsf3_pse>:
    148a:	99 23       	and	r25, r25
    148c:	b1 f3       	breq	.-20     	; 0x147a <__divsf3+0x1e>
    148e:	55 23       	and	r21, r21
    1490:	91 f3       	breq	.-28     	; 0x1476 <__divsf3+0x1a>
    1492:	95 1b       	sub	r25, r21
    1494:	55 0b       	sbc	r21, r21
    1496:	bb 27       	eor	r27, r27
    1498:	aa 27       	eor	r26, r26
    149a:	62 17       	cp	r22, r18
    149c:	73 07       	cpc	r23, r19
    149e:	84 07       	cpc	r24, r20
    14a0:	38 f0       	brcs	.+14     	; 0x14b0 <__divsf3_pse+0x26>
    14a2:	9f 5f       	subi	r25, 0xFF	; 255
    14a4:	5f 4f       	sbci	r21, 0xFF	; 255
    14a6:	22 0f       	add	r18, r18
    14a8:	33 1f       	adc	r19, r19
    14aa:	44 1f       	adc	r20, r20
    14ac:	aa 1f       	adc	r26, r26
    14ae:	a9 f3       	breq	.-22     	; 0x149a <__divsf3_pse+0x10>
    14b0:	35 d0       	rcall	.+106    	; 0x151c <__divsf3_pse+0x92>
    14b2:	0e 2e       	mov	r0, r30
    14b4:	3a f0       	brmi	.+14     	; 0x14c4 <__divsf3_pse+0x3a>
    14b6:	e0 e8       	ldi	r30, 0x80	; 128
    14b8:	32 d0       	rcall	.+100    	; 0x151e <__divsf3_pse+0x94>
    14ba:	91 50       	subi	r25, 0x01	; 1
    14bc:	50 40       	sbci	r21, 0x00	; 0
    14be:	e6 95       	lsr	r30
    14c0:	00 1c       	adc	r0, r0
    14c2:	ca f7       	brpl	.-14     	; 0x14b6 <__divsf3_pse+0x2c>
    14c4:	2b d0       	rcall	.+86     	; 0x151c <__divsf3_pse+0x92>
    14c6:	fe 2f       	mov	r31, r30
    14c8:	29 d0       	rcall	.+82     	; 0x151c <__divsf3_pse+0x92>
    14ca:	66 0f       	add	r22, r22
    14cc:	77 1f       	adc	r23, r23
    14ce:	88 1f       	adc	r24, r24
    14d0:	bb 1f       	adc	r27, r27
    14d2:	26 17       	cp	r18, r22
    14d4:	37 07       	cpc	r19, r23
    14d6:	48 07       	cpc	r20, r24
    14d8:	ab 07       	cpc	r26, r27
    14da:	b0 e8       	ldi	r27, 0x80	; 128
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <__divsf3_pse+0x56>
    14de:	bb 0b       	sbc	r27, r27
    14e0:	80 2d       	mov	r24, r0
    14e2:	bf 01       	movw	r22, r30
    14e4:	ff 27       	eor	r31, r31
    14e6:	93 58       	subi	r25, 0x83	; 131
    14e8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ea:	3a f0       	brmi	.+14     	; 0x14fa <__divsf3_pse+0x70>
    14ec:	9e 3f       	cpi	r25, 0xFE	; 254
    14ee:	51 05       	cpc	r21, r1
    14f0:	78 f0       	brcs	.+30     	; 0x1510 <__divsf3_pse+0x86>
    14f2:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <__fp_inf>
    14f6:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <__fp_szero>
    14fa:	5f 3f       	cpi	r21, 0xFF	; 255
    14fc:	e4 f3       	brlt	.-8      	; 0x14f6 <__divsf3_pse+0x6c>
    14fe:	98 3e       	cpi	r25, 0xE8	; 232
    1500:	d4 f3       	brlt	.-12     	; 0x14f6 <__divsf3_pse+0x6c>
    1502:	86 95       	lsr	r24
    1504:	77 95       	ror	r23
    1506:	67 95       	ror	r22
    1508:	b7 95       	ror	r27
    150a:	f7 95       	ror	r31
    150c:	9f 5f       	subi	r25, 0xFF	; 255
    150e:	c9 f7       	brne	.-14     	; 0x1502 <__divsf3_pse+0x78>
    1510:	88 0f       	add	r24, r24
    1512:	91 1d       	adc	r25, r1
    1514:	96 95       	lsr	r25
    1516:	87 95       	ror	r24
    1518:	97 f9       	bld	r25, 7
    151a:	08 95       	ret
    151c:	e1 e0       	ldi	r30, 0x01	; 1
    151e:	66 0f       	add	r22, r22
    1520:	77 1f       	adc	r23, r23
    1522:	88 1f       	adc	r24, r24
    1524:	bb 1f       	adc	r27, r27
    1526:	62 17       	cp	r22, r18
    1528:	73 07       	cpc	r23, r19
    152a:	84 07       	cpc	r24, r20
    152c:	ba 07       	cpc	r27, r26
    152e:	20 f0       	brcs	.+8      	; 0x1538 <__divsf3_pse+0xae>
    1530:	62 1b       	sub	r22, r18
    1532:	73 0b       	sbc	r23, r19
    1534:	84 0b       	sbc	r24, r20
    1536:	ba 0b       	sbc	r27, r26
    1538:	ee 1f       	adc	r30, r30
    153a:	88 f7       	brcc	.-30     	; 0x151e <__divsf3_pse+0x94>
    153c:	e0 95       	com	r30
    153e:	08 95       	ret

00001540 <__fixunssfsi>:
    1540:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__fp_splitA>
    1544:	88 f0       	brcs	.+34     	; 0x1568 <__fixunssfsi+0x28>
    1546:	9f 57       	subi	r25, 0x7F	; 127
    1548:	98 f0       	brcs	.+38     	; 0x1570 <__fixunssfsi+0x30>
    154a:	b9 2f       	mov	r27, r25
    154c:	99 27       	eor	r25, r25
    154e:	b7 51       	subi	r27, 0x17	; 23
    1550:	b0 f0       	brcs	.+44     	; 0x157e <__fixunssfsi+0x3e>
    1552:	e1 f0       	breq	.+56     	; 0x158c <__fixunssfsi+0x4c>
    1554:	66 0f       	add	r22, r22
    1556:	77 1f       	adc	r23, r23
    1558:	88 1f       	adc	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	1a f0       	brmi	.+6      	; 0x1564 <__fixunssfsi+0x24>
    155e:	ba 95       	dec	r27
    1560:	c9 f7       	brne	.-14     	; 0x1554 <__fixunssfsi+0x14>
    1562:	14 c0       	rjmp	.+40     	; 0x158c <__fixunssfsi+0x4c>
    1564:	b1 30       	cpi	r27, 0x01	; 1
    1566:	91 f0       	breq	.+36     	; 0x158c <__fixunssfsi+0x4c>
    1568:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__fp_zero>
    156c:	b1 e0       	ldi	r27, 0x01	; 1
    156e:	08 95       	ret
    1570:	0c 94 56 0b 	jmp	0x16ac	; 0x16ac <__fp_zero>
    1574:	67 2f       	mov	r22, r23
    1576:	78 2f       	mov	r23, r24
    1578:	88 27       	eor	r24, r24
    157a:	b8 5f       	subi	r27, 0xF8	; 248
    157c:	39 f0       	breq	.+14     	; 0x158c <__fixunssfsi+0x4c>
    157e:	b9 3f       	cpi	r27, 0xF9	; 249
    1580:	cc f3       	brlt	.-14     	; 0x1574 <__fixunssfsi+0x34>
    1582:	86 95       	lsr	r24
    1584:	77 95       	ror	r23
    1586:	67 95       	ror	r22
    1588:	b3 95       	inc	r27
    158a:	d9 f7       	brne	.-10     	; 0x1582 <__fixunssfsi+0x42>
    158c:	3e f4       	brtc	.+14     	; 0x159c <__fixunssfsi+0x5c>
    158e:	90 95       	com	r25
    1590:	80 95       	com	r24
    1592:	70 95       	com	r23
    1594:	61 95       	neg	r22
    1596:	7f 4f       	sbci	r23, 0xFF	; 255
    1598:	8f 4f       	sbci	r24, 0xFF	; 255
    159a:	9f 4f       	sbci	r25, 0xFF	; 255
    159c:	08 95       	ret

0000159e <__floatunsisf>:
    159e:	e8 94       	clt
    15a0:	09 c0       	rjmp	.+18     	; 0x15b4 <__floatsisf+0x12>

000015a2 <__floatsisf>:
    15a2:	97 fb       	bst	r25, 7
    15a4:	3e f4       	brtc	.+14     	; 0x15b4 <__floatsisf+0x12>
    15a6:	90 95       	com	r25
    15a8:	80 95       	com	r24
    15aa:	70 95       	com	r23
    15ac:	61 95       	neg	r22
    15ae:	7f 4f       	sbci	r23, 0xFF	; 255
    15b0:	8f 4f       	sbci	r24, 0xFF	; 255
    15b2:	9f 4f       	sbci	r25, 0xFF	; 255
    15b4:	99 23       	and	r25, r25
    15b6:	a9 f0       	breq	.+42     	; 0x15e2 <__floatsisf+0x40>
    15b8:	f9 2f       	mov	r31, r25
    15ba:	96 e9       	ldi	r25, 0x96	; 150
    15bc:	bb 27       	eor	r27, r27
    15be:	93 95       	inc	r25
    15c0:	f6 95       	lsr	r31
    15c2:	87 95       	ror	r24
    15c4:	77 95       	ror	r23
    15c6:	67 95       	ror	r22
    15c8:	b7 95       	ror	r27
    15ca:	f1 11       	cpse	r31, r1
    15cc:	f8 cf       	rjmp	.-16     	; 0x15be <__floatsisf+0x1c>
    15ce:	fa f4       	brpl	.+62     	; 0x160e <__floatsisf+0x6c>
    15d0:	bb 0f       	add	r27, r27
    15d2:	11 f4       	brne	.+4      	; 0x15d8 <__floatsisf+0x36>
    15d4:	60 ff       	sbrs	r22, 0
    15d6:	1b c0       	rjmp	.+54     	; 0x160e <__floatsisf+0x6c>
    15d8:	6f 5f       	subi	r22, 0xFF	; 255
    15da:	7f 4f       	sbci	r23, 0xFF	; 255
    15dc:	8f 4f       	sbci	r24, 0xFF	; 255
    15de:	9f 4f       	sbci	r25, 0xFF	; 255
    15e0:	16 c0       	rjmp	.+44     	; 0x160e <__floatsisf+0x6c>
    15e2:	88 23       	and	r24, r24
    15e4:	11 f0       	breq	.+4      	; 0x15ea <__floatsisf+0x48>
    15e6:	96 e9       	ldi	r25, 0x96	; 150
    15e8:	11 c0       	rjmp	.+34     	; 0x160c <__floatsisf+0x6a>
    15ea:	77 23       	and	r23, r23
    15ec:	21 f0       	breq	.+8      	; 0x15f6 <__floatsisf+0x54>
    15ee:	9e e8       	ldi	r25, 0x8E	; 142
    15f0:	87 2f       	mov	r24, r23
    15f2:	76 2f       	mov	r23, r22
    15f4:	05 c0       	rjmp	.+10     	; 0x1600 <__floatsisf+0x5e>
    15f6:	66 23       	and	r22, r22
    15f8:	71 f0       	breq	.+28     	; 0x1616 <__floatsisf+0x74>
    15fa:	96 e8       	ldi	r25, 0x86	; 134
    15fc:	86 2f       	mov	r24, r22
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	2a f0       	brmi	.+10     	; 0x160e <__floatsisf+0x6c>
    1604:	9a 95       	dec	r25
    1606:	66 0f       	add	r22, r22
    1608:	77 1f       	adc	r23, r23
    160a:	88 1f       	adc	r24, r24
    160c:	da f7       	brpl	.-10     	; 0x1604 <__floatsisf+0x62>
    160e:	88 0f       	add	r24, r24
    1610:	96 95       	lsr	r25
    1612:	87 95       	ror	r24
    1614:	97 f9       	bld	r25, 7
    1616:	08 95       	ret

00001618 <__fp_inf>:
    1618:	97 f9       	bld	r25, 7
    161a:	9f 67       	ori	r25, 0x7F	; 127
    161c:	80 e8       	ldi	r24, 0x80	; 128
    161e:	70 e0       	ldi	r23, 0x00	; 0
    1620:	60 e0       	ldi	r22, 0x00	; 0
    1622:	08 95       	ret

00001624 <__fp_nan>:
    1624:	9f ef       	ldi	r25, 0xFF	; 255
    1626:	80 ec       	ldi	r24, 0xC0	; 192
    1628:	08 95       	ret

0000162a <__fp_pscA>:
    162a:	00 24       	eor	r0, r0
    162c:	0a 94       	dec	r0
    162e:	16 16       	cp	r1, r22
    1630:	17 06       	cpc	r1, r23
    1632:	18 06       	cpc	r1, r24
    1634:	09 06       	cpc	r0, r25
    1636:	08 95       	ret

00001638 <__fp_pscB>:
    1638:	00 24       	eor	r0, r0
    163a:	0a 94       	dec	r0
    163c:	12 16       	cp	r1, r18
    163e:	13 06       	cpc	r1, r19
    1640:	14 06       	cpc	r1, r20
    1642:	05 06       	cpc	r0, r21
    1644:	08 95       	ret

00001646 <__fp_round>:
    1646:	09 2e       	mov	r0, r25
    1648:	03 94       	inc	r0
    164a:	00 0c       	add	r0, r0
    164c:	11 f4       	brne	.+4      	; 0x1652 <__fp_round+0xc>
    164e:	88 23       	and	r24, r24
    1650:	52 f0       	brmi	.+20     	; 0x1666 <__fp_round+0x20>
    1652:	bb 0f       	add	r27, r27
    1654:	40 f4       	brcc	.+16     	; 0x1666 <__fp_round+0x20>
    1656:	bf 2b       	or	r27, r31
    1658:	11 f4       	brne	.+4      	; 0x165e <__fp_round+0x18>
    165a:	60 ff       	sbrs	r22, 0
    165c:	04 c0       	rjmp	.+8      	; 0x1666 <__fp_round+0x20>
    165e:	6f 5f       	subi	r22, 0xFF	; 255
    1660:	7f 4f       	sbci	r23, 0xFF	; 255
    1662:	8f 4f       	sbci	r24, 0xFF	; 255
    1664:	9f 4f       	sbci	r25, 0xFF	; 255
    1666:	08 95       	ret

00001668 <__fp_split3>:
    1668:	57 fd       	sbrc	r21, 7
    166a:	90 58       	subi	r25, 0x80	; 128
    166c:	44 0f       	add	r20, r20
    166e:	55 1f       	adc	r21, r21
    1670:	59 f0       	breq	.+22     	; 0x1688 <__fp_splitA+0x10>
    1672:	5f 3f       	cpi	r21, 0xFF	; 255
    1674:	71 f0       	breq	.+28     	; 0x1692 <__fp_splitA+0x1a>
    1676:	47 95       	ror	r20

00001678 <__fp_splitA>:
    1678:	88 0f       	add	r24, r24
    167a:	97 fb       	bst	r25, 7
    167c:	99 1f       	adc	r25, r25
    167e:	61 f0       	breq	.+24     	; 0x1698 <__fp_splitA+0x20>
    1680:	9f 3f       	cpi	r25, 0xFF	; 255
    1682:	79 f0       	breq	.+30     	; 0x16a2 <__fp_splitA+0x2a>
    1684:	87 95       	ror	r24
    1686:	08 95       	ret
    1688:	12 16       	cp	r1, r18
    168a:	13 06       	cpc	r1, r19
    168c:	14 06       	cpc	r1, r20
    168e:	55 1f       	adc	r21, r21
    1690:	f2 cf       	rjmp	.-28     	; 0x1676 <__fp_split3+0xe>
    1692:	46 95       	lsr	r20
    1694:	f1 df       	rcall	.-30     	; 0x1678 <__fp_splitA>
    1696:	08 c0       	rjmp	.+16     	; 0x16a8 <__fp_splitA+0x30>
    1698:	16 16       	cp	r1, r22
    169a:	17 06       	cpc	r1, r23
    169c:	18 06       	cpc	r1, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	f1 cf       	rjmp	.-30     	; 0x1684 <__fp_splitA+0xc>
    16a2:	86 95       	lsr	r24
    16a4:	71 05       	cpc	r23, r1
    16a6:	61 05       	cpc	r22, r1
    16a8:	08 94       	sec
    16aa:	08 95       	ret

000016ac <__fp_zero>:
    16ac:	e8 94       	clt

000016ae <__fp_szero>:
    16ae:	bb 27       	eor	r27, r27
    16b0:	66 27       	eor	r22, r22
    16b2:	77 27       	eor	r23, r23
    16b4:	cb 01       	movw	r24, r22
    16b6:	97 f9       	bld	r25, 7
    16b8:	08 95       	ret

000016ba <__udivmodqi4>:
    16ba:	99 1b       	sub	r25, r25
    16bc:	79 e0       	ldi	r23, 0x09	; 9
    16be:	04 c0       	rjmp	.+8      	; 0x16c8 <__udivmodqi4_ep>

000016c0 <__udivmodqi4_loop>:
    16c0:	99 1f       	adc	r25, r25
    16c2:	96 17       	cp	r25, r22
    16c4:	08 f0       	brcs	.+2      	; 0x16c8 <__udivmodqi4_ep>
    16c6:	96 1b       	sub	r25, r22

000016c8 <__udivmodqi4_ep>:
    16c8:	88 1f       	adc	r24, r24
    16ca:	7a 95       	dec	r23
    16cc:	c9 f7       	brne	.-14     	; 0x16c0 <__udivmodqi4_loop>
    16ce:	80 95       	com	r24
    16d0:	08 95       	ret

000016d2 <__udivmodsi4>:
    16d2:	a1 e2       	ldi	r26, 0x21	; 33
    16d4:	1a 2e       	mov	r1, r26
    16d6:	aa 1b       	sub	r26, r26
    16d8:	bb 1b       	sub	r27, r27
    16da:	fd 01       	movw	r30, r26
    16dc:	0d c0       	rjmp	.+26     	; 0x16f8 <__udivmodsi4_ep>

000016de <__udivmodsi4_loop>:
    16de:	aa 1f       	adc	r26, r26
    16e0:	bb 1f       	adc	r27, r27
    16e2:	ee 1f       	adc	r30, r30
    16e4:	ff 1f       	adc	r31, r31
    16e6:	a2 17       	cp	r26, r18
    16e8:	b3 07       	cpc	r27, r19
    16ea:	e4 07       	cpc	r30, r20
    16ec:	f5 07       	cpc	r31, r21
    16ee:	20 f0       	brcs	.+8      	; 0x16f8 <__udivmodsi4_ep>
    16f0:	a2 1b       	sub	r26, r18
    16f2:	b3 0b       	sbc	r27, r19
    16f4:	e4 0b       	sbc	r30, r20
    16f6:	f5 0b       	sbc	r31, r21

000016f8 <__udivmodsi4_ep>:
    16f8:	66 1f       	adc	r22, r22
    16fa:	77 1f       	adc	r23, r23
    16fc:	88 1f       	adc	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	1a 94       	dec	r1
    1702:	69 f7       	brne	.-38     	; 0x16de <__udivmodsi4_loop>
    1704:	60 95       	com	r22
    1706:	70 95       	com	r23
    1708:	80 95       	com	r24
    170a:	90 95       	com	r25
    170c:	9b 01       	movw	r18, r22
    170e:	ac 01       	movw	r20, r24
    1710:	bd 01       	movw	r22, r26
    1712:	cf 01       	movw	r24, r30
    1714:	08 95       	ret

00001716 <__divmodsi4>:
    1716:	05 2e       	mov	r0, r21
    1718:	97 fb       	bst	r25, 7
    171a:	1e f4       	brtc	.+6      	; 0x1722 <__divmodsi4+0xc>
    171c:	00 94       	com	r0
    171e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__negsi2>
    1722:	57 fd       	sbrc	r21, 7
    1724:	07 d0       	rcall	.+14     	; 0x1734 <__divmodsi4_neg2>
    1726:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__udivmodsi4>
    172a:	07 fc       	sbrc	r0, 7
    172c:	03 d0       	rcall	.+6      	; 0x1734 <__divmodsi4_neg2>
    172e:	4e f4       	brtc	.+18     	; 0x1742 <__divmodsi4_exit>
    1730:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <__negsi2>

00001734 <__divmodsi4_neg2>:
    1734:	50 95       	com	r21
    1736:	40 95       	com	r20
    1738:	30 95       	com	r19
    173a:	21 95       	neg	r18
    173c:	3f 4f       	sbci	r19, 0xFF	; 255
    173e:	4f 4f       	sbci	r20, 0xFF	; 255
    1740:	5f 4f       	sbci	r21, 0xFF	; 255

00001742 <__divmodsi4_exit>:
    1742:	08 95       	ret

00001744 <__negsi2>:
    1744:	90 95       	com	r25
    1746:	80 95       	com	r24
    1748:	70 95       	com	r23
    174a:	61 95       	neg	r22
    174c:	7f 4f       	sbci	r23, 0xFF	; 255
    174e:	8f 4f       	sbci	r24, 0xFF	; 255
    1750:	9f 4f       	sbci	r25, 0xFF	; 255
    1752:	08 95       	ret

00001754 <__tablejump2__>:
    1754:	ee 0f       	add	r30, r30
    1756:	ff 1f       	adc	r31, r31
    1758:	05 90       	lpm	r0, Z+
    175a:	f4 91       	lpm	r31, Z
    175c:	e0 2d       	mov	r30, r0
    175e:	09 94       	ijmp

00001760 <__prologue_saves__>:
    1760:	2f 92       	push	r2
    1762:	3f 92       	push	r3
    1764:	4f 92       	push	r4
    1766:	5f 92       	push	r5
    1768:	6f 92       	push	r6
    176a:	7f 92       	push	r7
    176c:	8f 92       	push	r8
    176e:	9f 92       	push	r9
    1770:	af 92       	push	r10
    1772:	bf 92       	push	r11
    1774:	cf 92       	push	r12
    1776:	df 92       	push	r13
    1778:	ef 92       	push	r14
    177a:	ff 92       	push	r15
    177c:	0f 93       	push	r16
    177e:	1f 93       	push	r17
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	ca 1b       	sub	r28, r26
    178a:	db 0b       	sbc	r29, r27
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	f8 94       	cli
    1790:	de bf       	out	0x3e, r29	; 62
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	cd bf       	out	0x3d, r28	; 61
    1796:	09 94       	ijmp

00001798 <__epilogue_restores__>:
    1798:	2a 88       	ldd	r2, Y+18	; 0x12
    179a:	39 88       	ldd	r3, Y+17	; 0x11
    179c:	48 88       	ldd	r4, Y+16	; 0x10
    179e:	5f 84       	ldd	r5, Y+15	; 0x0f
    17a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    17a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    17a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    17a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    17a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    17aa:	b9 84       	ldd	r11, Y+9	; 0x09
    17ac:	c8 84       	ldd	r12, Y+8	; 0x08
    17ae:	df 80       	ldd	r13, Y+7	; 0x07
    17b0:	ee 80       	ldd	r14, Y+6	; 0x06
    17b2:	fd 80       	ldd	r15, Y+5	; 0x05
    17b4:	0c 81       	ldd	r16, Y+4	; 0x04
    17b6:	1b 81       	ldd	r17, Y+3	; 0x03
    17b8:	aa 81       	ldd	r26, Y+2	; 0x02
    17ba:	b9 81       	ldd	r27, Y+1	; 0x01
    17bc:	ce 0f       	add	r28, r30
    17be:	d1 1d       	adc	r29, r1
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	cd bf       	out	0x3d, r28	; 61
    17ca:	ed 01       	movw	r28, r26
    17cc:	08 95       	ret

000017ce <__ftoa_engine>:
    17ce:	28 30       	cpi	r18, 0x08	; 8
    17d0:	08 f0       	brcs	.+2      	; 0x17d4 <__ftoa_engine+0x6>
    17d2:	27 e0       	ldi	r18, 0x07	; 7
    17d4:	33 27       	eor	r19, r19
    17d6:	da 01       	movw	r26, r20
    17d8:	99 0f       	add	r25, r25
    17da:	31 1d       	adc	r19, r1
    17dc:	87 fd       	sbrc	r24, 7
    17de:	91 60       	ori	r25, 0x01	; 1
    17e0:	00 96       	adiw	r24, 0x00	; 0
    17e2:	61 05       	cpc	r22, r1
    17e4:	71 05       	cpc	r23, r1
    17e6:	39 f4       	brne	.+14     	; 0x17f6 <__ftoa_engine+0x28>
    17e8:	32 60       	ori	r19, 0x02	; 2
    17ea:	2e 5f       	subi	r18, 0xFE	; 254
    17ec:	3d 93       	st	X+, r19
    17ee:	30 e3       	ldi	r19, 0x30	; 48
    17f0:	2a 95       	dec	r18
    17f2:	e1 f7       	brne	.-8      	; 0x17ec <__ftoa_engine+0x1e>
    17f4:	08 95       	ret
    17f6:	9f 3f       	cpi	r25, 0xFF	; 255
    17f8:	30 f0       	brcs	.+12     	; 0x1806 <__ftoa_engine+0x38>
    17fa:	80 38       	cpi	r24, 0x80	; 128
    17fc:	71 05       	cpc	r23, r1
    17fe:	61 05       	cpc	r22, r1
    1800:	09 f0       	breq	.+2      	; 0x1804 <__ftoa_engine+0x36>
    1802:	3c 5f       	subi	r19, 0xFC	; 252
    1804:	3c 5f       	subi	r19, 0xFC	; 252
    1806:	3d 93       	st	X+, r19
    1808:	91 30       	cpi	r25, 0x01	; 1
    180a:	08 f0       	brcs	.+2      	; 0x180e <__ftoa_engine+0x40>
    180c:	80 68       	ori	r24, 0x80	; 128
    180e:	91 1d       	adc	r25, r1
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	1f 93       	push	r17
    1816:	0f 93       	push	r16
    1818:	ff 92       	push	r15
    181a:	ef 92       	push	r14
    181c:	19 2f       	mov	r17, r25
    181e:	98 7f       	andi	r25, 0xF8	; 248
    1820:	96 95       	lsr	r25
    1822:	e9 2f       	mov	r30, r25
    1824:	96 95       	lsr	r25
    1826:	96 95       	lsr	r25
    1828:	e9 0f       	add	r30, r25
    182a:	ff 27       	eor	r31, r31
    182c:	e2 54       	subi	r30, 0x42	; 66
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	99 27       	eor	r25, r25
    1832:	33 27       	eor	r19, r19
    1834:	ee 24       	eor	r14, r14
    1836:	ff 24       	eor	r15, r15
    1838:	a7 01       	movw	r20, r14
    183a:	e7 01       	movw	r28, r14
    183c:	05 90       	lpm	r0, Z+
    183e:	08 94       	sec
    1840:	07 94       	ror	r0
    1842:	28 f4       	brcc	.+10     	; 0x184e <__ftoa_engine+0x80>
    1844:	36 0f       	add	r19, r22
    1846:	e7 1e       	adc	r14, r23
    1848:	f8 1e       	adc	r15, r24
    184a:	49 1f       	adc	r20, r25
    184c:	51 1d       	adc	r21, r1
    184e:	66 0f       	add	r22, r22
    1850:	77 1f       	adc	r23, r23
    1852:	88 1f       	adc	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	06 94       	lsr	r0
    1858:	a1 f7       	brne	.-24     	; 0x1842 <__ftoa_engine+0x74>
    185a:	05 90       	lpm	r0, Z+
    185c:	07 94       	ror	r0
    185e:	28 f4       	brcc	.+10     	; 0x186a <__ftoa_engine+0x9c>
    1860:	e7 0e       	add	r14, r23
    1862:	f8 1e       	adc	r15, r24
    1864:	49 1f       	adc	r20, r25
    1866:	56 1f       	adc	r21, r22
    1868:	c1 1d       	adc	r28, r1
    186a:	77 0f       	add	r23, r23
    186c:	88 1f       	adc	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	66 1f       	adc	r22, r22
    1872:	06 94       	lsr	r0
    1874:	a1 f7       	brne	.-24     	; 0x185e <__ftoa_engine+0x90>
    1876:	05 90       	lpm	r0, Z+
    1878:	07 94       	ror	r0
    187a:	28 f4       	brcc	.+10     	; 0x1886 <__ftoa_engine+0xb8>
    187c:	f8 0e       	add	r15, r24
    187e:	49 1f       	adc	r20, r25
    1880:	56 1f       	adc	r21, r22
    1882:	c7 1f       	adc	r28, r23
    1884:	d1 1d       	adc	r29, r1
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	66 1f       	adc	r22, r22
    188c:	77 1f       	adc	r23, r23
    188e:	06 94       	lsr	r0
    1890:	a1 f7       	brne	.-24     	; 0x187a <__ftoa_engine+0xac>
    1892:	05 90       	lpm	r0, Z+
    1894:	07 94       	ror	r0
    1896:	20 f4       	brcc	.+8      	; 0x18a0 <__ftoa_engine+0xd2>
    1898:	49 0f       	add	r20, r25
    189a:	56 1f       	adc	r21, r22
    189c:	c7 1f       	adc	r28, r23
    189e:	d8 1f       	adc	r29, r24
    18a0:	99 0f       	add	r25, r25
    18a2:	66 1f       	adc	r22, r22
    18a4:	77 1f       	adc	r23, r23
    18a6:	88 1f       	adc	r24, r24
    18a8:	06 94       	lsr	r0
    18aa:	a9 f7       	brne	.-22     	; 0x1896 <__ftoa_engine+0xc8>
    18ac:	84 91       	lpm	r24, Z
    18ae:	10 95       	com	r17
    18b0:	17 70       	andi	r17, 0x07	; 7
    18b2:	41 f0       	breq	.+16     	; 0x18c4 <__ftoa_engine+0xf6>
    18b4:	d6 95       	lsr	r29
    18b6:	c7 95       	ror	r28
    18b8:	57 95       	ror	r21
    18ba:	47 95       	ror	r20
    18bc:	f7 94       	ror	r15
    18be:	e7 94       	ror	r14
    18c0:	1a 95       	dec	r17
    18c2:	c1 f7       	brne	.-16     	; 0x18b4 <__ftoa_engine+0xe6>
    18c4:	e4 e6       	ldi	r30, 0x64	; 100
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	68 94       	set
    18ca:	15 90       	lpm	r1, Z+
    18cc:	15 91       	lpm	r17, Z+
    18ce:	35 91       	lpm	r19, Z+
    18d0:	65 91       	lpm	r22, Z+
    18d2:	95 91       	lpm	r25, Z+
    18d4:	05 90       	lpm	r0, Z+
    18d6:	7f e2       	ldi	r23, 0x2F	; 47
    18d8:	73 95       	inc	r23
    18da:	e1 18       	sub	r14, r1
    18dc:	f1 0a       	sbc	r15, r17
    18de:	43 0b       	sbc	r20, r19
    18e0:	56 0b       	sbc	r21, r22
    18e2:	c9 0b       	sbc	r28, r25
    18e4:	d0 09       	sbc	r29, r0
    18e6:	c0 f7       	brcc	.-16     	; 0x18d8 <__ftoa_engine+0x10a>
    18e8:	e1 0c       	add	r14, r1
    18ea:	f1 1e       	adc	r15, r17
    18ec:	43 1f       	adc	r20, r19
    18ee:	56 1f       	adc	r21, r22
    18f0:	c9 1f       	adc	r28, r25
    18f2:	d0 1d       	adc	r29, r0
    18f4:	7e f4       	brtc	.+30     	; 0x1914 <__ftoa_engine+0x146>
    18f6:	70 33       	cpi	r23, 0x30	; 48
    18f8:	11 f4       	brne	.+4      	; 0x18fe <__ftoa_engine+0x130>
    18fa:	8a 95       	dec	r24
    18fc:	e6 cf       	rjmp	.-52     	; 0x18ca <__ftoa_engine+0xfc>
    18fe:	e8 94       	clt
    1900:	01 50       	subi	r16, 0x01	; 1
    1902:	30 f0       	brcs	.+12     	; 0x1910 <__ftoa_engine+0x142>
    1904:	08 0f       	add	r16, r24
    1906:	0a f4       	brpl	.+2      	; 0x190a <__ftoa_engine+0x13c>
    1908:	00 27       	eor	r16, r16
    190a:	02 17       	cp	r16, r18
    190c:	08 f4       	brcc	.+2      	; 0x1910 <__ftoa_engine+0x142>
    190e:	20 2f       	mov	r18, r16
    1910:	23 95       	inc	r18
    1912:	02 2f       	mov	r16, r18
    1914:	7a 33       	cpi	r23, 0x3A	; 58
    1916:	28 f0       	brcs	.+10     	; 0x1922 <__ftoa_engine+0x154>
    1918:	79 e3       	ldi	r23, 0x39	; 57
    191a:	7d 93       	st	X+, r23
    191c:	2a 95       	dec	r18
    191e:	e9 f7       	brne	.-6      	; 0x191a <__ftoa_engine+0x14c>
    1920:	10 c0       	rjmp	.+32     	; 0x1942 <__ftoa_engine+0x174>
    1922:	7d 93       	st	X+, r23
    1924:	2a 95       	dec	r18
    1926:	89 f6       	brne	.-94     	; 0x18ca <__ftoa_engine+0xfc>
    1928:	06 94       	lsr	r0
    192a:	97 95       	ror	r25
    192c:	67 95       	ror	r22
    192e:	37 95       	ror	r19
    1930:	17 95       	ror	r17
    1932:	17 94       	ror	r1
    1934:	e1 18       	sub	r14, r1
    1936:	f1 0a       	sbc	r15, r17
    1938:	43 0b       	sbc	r20, r19
    193a:	56 0b       	sbc	r21, r22
    193c:	c9 0b       	sbc	r28, r25
    193e:	d0 09       	sbc	r29, r0
    1940:	98 f0       	brcs	.+38     	; 0x1968 <__ftoa_engine+0x19a>
    1942:	23 95       	inc	r18
    1944:	7e 91       	ld	r23, -X
    1946:	73 95       	inc	r23
    1948:	7a 33       	cpi	r23, 0x3A	; 58
    194a:	08 f0       	brcs	.+2      	; 0x194e <__ftoa_engine+0x180>
    194c:	70 e3       	ldi	r23, 0x30	; 48
    194e:	7c 93       	st	X, r23
    1950:	20 13       	cpse	r18, r16
    1952:	b8 f7       	brcc	.-18     	; 0x1942 <__ftoa_engine+0x174>
    1954:	7e 91       	ld	r23, -X
    1956:	70 61       	ori	r23, 0x10	; 16
    1958:	7d 93       	st	X+, r23
    195a:	30 f0       	brcs	.+12     	; 0x1968 <__ftoa_engine+0x19a>
    195c:	83 95       	inc	r24
    195e:	71 e3       	ldi	r23, 0x31	; 49
    1960:	7d 93       	st	X+, r23
    1962:	70 e3       	ldi	r23, 0x30	; 48
    1964:	2a 95       	dec	r18
    1966:	e1 f7       	brne	.-8      	; 0x1960 <__ftoa_engine+0x192>
    1968:	11 24       	eor	r1, r1
    196a:	ef 90       	pop	r14
    196c:	ff 90       	pop	r15
    196e:	0f 91       	pop	r16
    1970:	1f 91       	pop	r17
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	99 27       	eor	r25, r25
    1978:	87 fd       	sbrc	r24, 7
    197a:	90 95       	com	r25
    197c:	08 95       	ret

0000197e <strnlen_P>:
    197e:	fc 01       	movw	r30, r24
    1980:	05 90       	lpm	r0, Z+
    1982:	61 50       	subi	r22, 0x01	; 1
    1984:	70 40       	sbci	r23, 0x00	; 0
    1986:	01 10       	cpse	r0, r1
    1988:	d8 f7       	brcc	.-10     	; 0x1980 <strnlen_P+0x2>
    198a:	80 95       	com	r24
    198c:	90 95       	com	r25
    198e:	8e 0f       	add	r24, r30
    1990:	9f 1f       	adc	r25, r31
    1992:	08 95       	ret

00001994 <strnlen>:
    1994:	fc 01       	movw	r30, r24
    1996:	61 50       	subi	r22, 0x01	; 1
    1998:	70 40       	sbci	r23, 0x00	; 0
    199a:	01 90       	ld	r0, Z+
    199c:	01 10       	cpse	r0, r1
    199e:	d8 f7       	brcc	.-10     	; 0x1996 <strnlen+0x2>
    19a0:	80 95       	com	r24
    19a2:	90 95       	com	r25
    19a4:	8e 0f       	add	r24, r30
    19a6:	9f 1f       	adc	r25, r31
    19a8:	08 95       	ret

000019aa <ltoa>:
    19aa:	25 32       	cpi	r18, 0x25	; 37
    19ac:	31 05       	cpc	r19, r1
    19ae:	20 f4       	brcc	.+8      	; 0x19b8 <ltoa+0xe>
    19b0:	22 30       	cpi	r18, 0x02	; 2
    19b2:	10 f0       	brcs	.+4      	; 0x19b8 <ltoa+0xe>
    19b4:	0c 94 e0 0c 	jmp	0x19c0	; 0x19c0 <__ltoa_ncheck>
    19b8:	fa 01       	movw	r30, r20
    19ba:	10 82       	st	Z, r1
    19bc:	ca 01       	movw	r24, r20
    19be:	08 95       	ret

000019c0 <__ltoa_ncheck>:
    19c0:	bb 27       	eor	r27, r27
    19c2:	2a 30       	cpi	r18, 0x0A	; 10
    19c4:	51 f4       	brne	.+20     	; 0x19da <__ltoa_ncheck+0x1a>
    19c6:	99 23       	and	r25, r25
    19c8:	42 f4       	brpl	.+16     	; 0x19da <__ltoa_ncheck+0x1a>
    19ca:	bd e2       	ldi	r27, 0x2D	; 45
    19cc:	90 95       	com	r25
    19ce:	80 95       	com	r24
    19d0:	70 95       	com	r23
    19d2:	61 95       	neg	r22
    19d4:	7f 4f       	sbci	r23, 0xFF	; 255
    19d6:	8f 4f       	sbci	r24, 0xFF	; 255
    19d8:	9f 4f       	sbci	r25, 0xFF	; 255
    19da:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__ultoa_common>

000019de <__ultoa_ncheck>:
    19de:	bb 27       	eor	r27, r27

000019e0 <__ultoa_common>:
    19e0:	fa 01       	movw	r30, r20
    19e2:	a6 2f       	mov	r26, r22
    19e4:	62 17       	cp	r22, r18
    19e6:	71 05       	cpc	r23, r1
    19e8:	81 05       	cpc	r24, r1
    19ea:	91 05       	cpc	r25, r1
    19ec:	33 0b       	sbc	r19, r19
    19ee:	30 fb       	bst	r19, 0
    19f0:	66 f0       	brts	.+24     	; 0x1a0a <__ultoa_common+0x2a>
    19f2:	aa 27       	eor	r26, r26
    19f4:	66 0f       	add	r22, r22
    19f6:	77 1f       	adc	r23, r23
    19f8:	88 1f       	adc	r24, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	aa 1f       	adc	r26, r26
    19fe:	a2 17       	cp	r26, r18
    1a00:	10 f0       	brcs	.+4      	; 0x1a06 <__ultoa_common+0x26>
    1a02:	a2 1b       	sub	r26, r18
    1a04:	63 95       	inc	r22
    1a06:	38 50       	subi	r19, 0x08	; 8
    1a08:	a9 f7       	brne	.-22     	; 0x19f4 <__ultoa_common+0x14>
    1a0a:	a0 5d       	subi	r26, 0xD0	; 208
    1a0c:	aa 33       	cpi	r26, 0x3A	; 58
    1a0e:	08 f0       	brcs	.+2      	; 0x1a12 <__ultoa_common+0x32>
    1a10:	a9 5d       	subi	r26, 0xD9	; 217
    1a12:	a1 93       	st	Z+, r26
    1a14:	36 f7       	brtc	.-52     	; 0x19e2 <__ultoa_common+0x2>
    1a16:	b1 11       	cpse	r27, r1
    1a18:	b1 93       	st	Z+, r27
    1a1a:	10 82       	st	Z, r1
    1a1c:	ca 01       	movw	r24, r20
    1a1e:	0c 94 9f 0d 	jmp	0x1b3e	; 0x1b3e <strrev>

00001a22 <fputc>:
    1a22:	0f 93       	push	r16
    1a24:	1f 93       	push	r17
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	18 2f       	mov	r17, r24
    1a2c:	09 2f       	mov	r16, r25
    1a2e:	eb 01       	movw	r28, r22
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	81 fd       	sbrc	r24, 1
    1a34:	09 c0       	rjmp	.+18     	; 0x1a48 <fputc+0x26>
    1a36:	1f ef       	ldi	r17, 0xFF	; 255
    1a38:	0f ef       	ldi	r16, 0xFF	; 255
    1a3a:	81 2f       	mov	r24, r17
    1a3c:	90 2f       	mov	r25, r16
    1a3e:	df 91       	pop	r29
    1a40:	cf 91       	pop	r28
    1a42:	1f 91       	pop	r17
    1a44:	0f 91       	pop	r16
    1a46:	08 95       	ret
    1a48:	82 ff       	sbrs	r24, 2
    1a4a:	14 c0       	rjmp	.+40     	; 0x1a74 <fputc+0x52>
    1a4c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a4e:	3f 81       	ldd	r19, Y+7	; 0x07
    1a50:	8c 81       	ldd	r24, Y+4	; 0x04
    1a52:	9d 81       	ldd	r25, Y+5	; 0x05
    1a54:	28 17       	cp	r18, r24
    1a56:	39 07       	cpc	r19, r25
    1a58:	3c f4       	brge	.+14     	; 0x1a68 <fputc+0x46>
    1a5a:	e8 81       	ld	r30, Y
    1a5c:	f9 81       	ldd	r31, Y+1	; 0x01
    1a5e:	cf 01       	movw	r24, r30
    1a60:	01 96       	adiw	r24, 0x01	; 1
    1a62:	99 83       	std	Y+1, r25	; 0x01
    1a64:	88 83       	st	Y, r24
    1a66:	10 83       	st	Z, r17
    1a68:	8e 81       	ldd	r24, Y+6	; 0x06
    1a6a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a6c:	01 96       	adiw	r24, 0x01	; 1
    1a6e:	9f 83       	std	Y+7, r25	; 0x07
    1a70:	8e 83       	std	Y+6, r24	; 0x06
    1a72:	e3 cf       	rjmp	.-58     	; 0x1a3a <fputc+0x18>
    1a74:	e8 85       	ldd	r30, Y+8	; 0x08
    1a76:	f9 85       	ldd	r31, Y+9	; 0x09
    1a78:	81 2f       	mov	r24, r17
    1a7a:	09 95       	icall
    1a7c:	89 2b       	or	r24, r25
    1a7e:	a1 f3       	breq	.-24     	; 0x1a68 <fputc+0x46>
    1a80:	da cf       	rjmp	.-76     	; 0x1a36 <fputc+0x14>

00001a82 <__ultoa_invert>:
    1a82:	fa 01       	movw	r30, r20
    1a84:	aa 27       	eor	r26, r26
    1a86:	28 30       	cpi	r18, 0x08	; 8
    1a88:	51 f1       	breq	.+84     	; 0x1ade <__ultoa_invert+0x5c>
    1a8a:	20 31       	cpi	r18, 0x10	; 16
    1a8c:	81 f1       	breq	.+96     	; 0x1aee <__ultoa_invert+0x6c>
    1a8e:	e8 94       	clt
    1a90:	6f 93       	push	r22
    1a92:	6e 7f       	andi	r22, 0xFE	; 254
    1a94:	6e 5f       	subi	r22, 0xFE	; 254
    1a96:	7f 4f       	sbci	r23, 0xFF	; 255
    1a98:	8f 4f       	sbci	r24, 0xFF	; 255
    1a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9c:	af 4f       	sbci	r26, 0xFF	; 255
    1a9e:	b1 e0       	ldi	r27, 0x01	; 1
    1aa0:	3e d0       	rcall	.+124    	; 0x1b1e <__ultoa_invert+0x9c>
    1aa2:	b4 e0       	ldi	r27, 0x04	; 4
    1aa4:	3c d0       	rcall	.+120    	; 0x1b1e <__ultoa_invert+0x9c>
    1aa6:	67 0f       	add	r22, r23
    1aa8:	78 1f       	adc	r23, r24
    1aaa:	89 1f       	adc	r24, r25
    1aac:	9a 1f       	adc	r25, r26
    1aae:	a1 1d       	adc	r26, r1
    1ab0:	68 0f       	add	r22, r24
    1ab2:	79 1f       	adc	r23, r25
    1ab4:	8a 1f       	adc	r24, r26
    1ab6:	91 1d       	adc	r25, r1
    1ab8:	a1 1d       	adc	r26, r1
    1aba:	6a 0f       	add	r22, r26
    1abc:	71 1d       	adc	r23, r1
    1abe:	81 1d       	adc	r24, r1
    1ac0:	91 1d       	adc	r25, r1
    1ac2:	a1 1d       	adc	r26, r1
    1ac4:	20 d0       	rcall	.+64     	; 0x1b06 <__ultoa_invert+0x84>
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <__ultoa_invert+0x48>
    1ac8:	68 94       	set
    1aca:	3f 91       	pop	r19
    1acc:	2a e0       	ldi	r18, 0x0A	; 10
    1ace:	26 9f       	mul	r18, r22
    1ad0:	11 24       	eor	r1, r1
    1ad2:	30 19       	sub	r19, r0
    1ad4:	30 5d       	subi	r19, 0xD0	; 208
    1ad6:	31 93       	st	Z+, r19
    1ad8:	de f6       	brtc	.-74     	; 0x1a90 <__ultoa_invert+0xe>
    1ada:	cf 01       	movw	r24, r30
    1adc:	08 95       	ret
    1ade:	46 2f       	mov	r20, r22
    1ae0:	47 70       	andi	r20, 0x07	; 7
    1ae2:	40 5d       	subi	r20, 0xD0	; 208
    1ae4:	41 93       	st	Z+, r20
    1ae6:	b3 e0       	ldi	r27, 0x03	; 3
    1ae8:	0f d0       	rcall	.+30     	; 0x1b08 <__ultoa_invert+0x86>
    1aea:	c9 f7       	brne	.-14     	; 0x1ade <__ultoa_invert+0x5c>
    1aec:	f6 cf       	rjmp	.-20     	; 0x1ada <__ultoa_invert+0x58>
    1aee:	46 2f       	mov	r20, r22
    1af0:	4f 70       	andi	r20, 0x0F	; 15
    1af2:	40 5d       	subi	r20, 0xD0	; 208
    1af4:	4a 33       	cpi	r20, 0x3A	; 58
    1af6:	18 f0       	brcs	.+6      	; 0x1afe <__ultoa_invert+0x7c>
    1af8:	49 5d       	subi	r20, 0xD9	; 217
    1afa:	31 fd       	sbrc	r19, 1
    1afc:	40 52       	subi	r20, 0x20	; 32
    1afe:	41 93       	st	Z+, r20
    1b00:	02 d0       	rcall	.+4      	; 0x1b06 <__ultoa_invert+0x84>
    1b02:	a9 f7       	brne	.-22     	; 0x1aee <__ultoa_invert+0x6c>
    1b04:	ea cf       	rjmp	.-44     	; 0x1ada <__ultoa_invert+0x58>
    1b06:	b4 e0       	ldi	r27, 0x04	; 4
    1b08:	a6 95       	lsr	r26
    1b0a:	97 95       	ror	r25
    1b0c:	87 95       	ror	r24
    1b0e:	77 95       	ror	r23
    1b10:	67 95       	ror	r22
    1b12:	ba 95       	dec	r27
    1b14:	c9 f7       	brne	.-14     	; 0x1b08 <__ultoa_invert+0x86>
    1b16:	00 97       	sbiw	r24, 0x00	; 0
    1b18:	61 05       	cpc	r22, r1
    1b1a:	71 05       	cpc	r23, r1
    1b1c:	08 95       	ret
    1b1e:	9b 01       	movw	r18, r22
    1b20:	ac 01       	movw	r20, r24
    1b22:	0a 2e       	mov	r0, r26
    1b24:	06 94       	lsr	r0
    1b26:	57 95       	ror	r21
    1b28:	47 95       	ror	r20
    1b2a:	37 95       	ror	r19
    1b2c:	27 95       	ror	r18
    1b2e:	ba 95       	dec	r27
    1b30:	c9 f7       	brne	.-14     	; 0x1b24 <__ultoa_invert+0xa2>
    1b32:	62 0f       	add	r22, r18
    1b34:	73 1f       	adc	r23, r19
    1b36:	84 1f       	adc	r24, r20
    1b38:	95 1f       	adc	r25, r21
    1b3a:	a0 1d       	adc	r26, r0
    1b3c:	08 95       	ret

00001b3e <strrev>:
    1b3e:	dc 01       	movw	r26, r24
    1b40:	fc 01       	movw	r30, r24
    1b42:	67 2f       	mov	r22, r23
    1b44:	71 91       	ld	r23, Z+
    1b46:	77 23       	and	r23, r23
    1b48:	e1 f7       	brne	.-8      	; 0x1b42 <strrev+0x4>
    1b4a:	32 97       	sbiw	r30, 0x02	; 2
    1b4c:	04 c0       	rjmp	.+8      	; 0x1b56 <strrev+0x18>
    1b4e:	7c 91       	ld	r23, X
    1b50:	6d 93       	st	X+, r22
    1b52:	70 83       	st	Z, r23
    1b54:	62 91       	ld	r22, -Z
    1b56:	ae 17       	cp	r26, r30
    1b58:	bf 07       	cpc	r27, r31
    1b5a:	c8 f3       	brcs	.-14     	; 0x1b4e <strrev+0x10>
    1b5c:	08 95       	ret

00001b5e <__do_global_dtors>:
    1b5e:	10 e0       	ldi	r17, 0x00	; 0
    1b60:	c0 eb       	ldi	r28, 0xB0	; 176
    1b62:	d0 e0       	ldi	r29, 0x00	; 0
    1b64:	04 c0       	rjmp	.+8      	; 0x1b6e <__do_global_dtors+0x10>
    1b66:	fe 01       	movw	r30, r28
    1b68:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__tablejump2__>
    1b6c:	21 96       	adiw	r28, 0x01	; 1
    1b6e:	c1 3b       	cpi	r28, 0xB1	; 177
    1b70:	d1 07       	cpc	r29, r17
    1b72:	c9 f7       	brne	.-14     	; 0x1b66 <__do_global_dtors+0x8>
    1b74:	f8 94       	cli

00001b76 <__stop_program>:
    1b76:	ff cf       	rjmp	.-2      	; 0x1b76 <__stop_program>
