   1               		.file	"ADC.cpp"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	_ZN7MCP3462D2Ev
  12               	_ZN7MCP3462D2Ev:
  13               	.LFB10:
  14               		.file 1 "ADC.cpp"
   1:ADC.cpp       **** #include "ADC.h"
   2:ADC.cpp       **** 
   3:ADC.cpp       **** 
   4:ADC.cpp       **** MCP3462::MCP3462(void){
   5:ADC.cpp       ****     
   6:ADC.cpp       ****     DDRB=0b00000110;//set SCK, MOSI to outputs, MISO to input
   7:ADC.cpp       ****     PORTB=1;//MOSI, SCLK low, CSB high
   8:ADC.cpp       ****     _delay_us(10);
   9:ADC.cpp       ****     SPI_CS_DDR |=(1<<SPI_CS_PIN); //set CSB pin as output
  10:ADC.cpp       ****     SPI_CS_PORT |=(1<<SPI_CS_PIN); //set CSB initial state to high
  11:ADC.cpp       ****     SPCR = (1<<SPE)|(1<<MSTR);
  12:ADC.cpp       **** 
  13:ADC.cpp       ****     
  14:ADC.cpp       ****     //TODO: read OFFSET (MUX 0x88) and write opposite into OFFSETCAL. May not be necessary if AutoZ
  15:ADC.cpp       ****     /*
  16:ADC.cpp       ****     Enable SCAN mode: 
  17:ADC.cpp       ****     raw input: CH0-CH1: bit 8, MUX 0x01
  18:ADC.cpp       ****     gained input: CH2-CH3: bit 9, MUX 0x23
  19:ADC.cpp       ****     TEMP: 12, MUX 0xDE. Equation: 0.00133*ADC-267.146
  20:ADC.cpp       ****     AVdd: 13, scale factor 1/3, MUX 0x98->may not be relevant since relative to ref+/-
  21:ADC.cpp       ****     
  22:ADC.cpp       ****     Scan DLY: between adc mux change:   111=512 DMclock periods
  23:ADC.cpp       ****                                         000=0clock periods
  24:ADC.cpp       ****         TIMER[23:0]: 0->0n  24 '1'->16777215 periods
  25:ADC.cpp       ****     */
  26:ADC.cpp       ****     
  27:ADC.cpp       ****     //STATUS should be 0b00010111 111=Data Ready / CRC Status / POR Status
  28:ADC.cpp       ****     //Active low: 0x16=POR, 0x17=OK, 0x13=Data ready
  29:ADC.cpp       ****     
  30:ADC.cpp       ****     SPI_CS_PORT &=~(1<<SPI_CS_PIN); //set CSB low
  31:ADC.cpp       ****     transmit(SPI_ADDR|SPI_TYPE_INC_W|REG_CONFIG0);//Incremental write
  32:ADC.cpp       ****     //W CONFIG0 (0x1): 0b11100011 //sets clock to internal, no current source/sink/ADC in conversio
  33:ADC.cpp       ****     transmit(0b11100011);
  34:ADC.cpp       ****     
  35:ADC.cpp       ****     //W CONFIG1 (0x2): (MCP3462_AMCLK_PSC<<6) | (MCP3462_OSR<<2);
  36:ADC.cpp       ****     transmit((MCP3462_AMCLK_PSC<<6) | (MCP3462_OSR<<2));
  37:ADC.cpp       ****     
  38:ADC.cpp       ****     //W CONFIG2 (0x3): (0b10<<6)|(MCP3462_GAIN<<3)|0b111;   //BBOST current x1, Gain, AutoZero enab
  39:ADC.cpp       ****     transmit((0b10<<6)|(MCP3462_GAIN<<3)|0b111);
  40:ADC.cpp       ****     
  41:ADC.cpp       ****     //W CONFIG3 (0x4): 0b11xx0000 Continuous conversion, no CRC, offset or gain cal. 
  42:ADC.cpp       ****         //XX is data format: 00=16 signed bits. 11=32bits total: 4 bits chan ID + 12x sign bit + 16
  43:ADC.cpp       ****     transmit(0b11110000);
  44:ADC.cpp       ****     
  45:ADC.cpp       ****     //W IRQ (0x5): 0bxxxx0111 Interrupt output push pull enabled
  46:ADC.cpp       ****     transmit(0b00000111);
  47:ADC.cpp       ****     transmit(0b00000001);
  48:ADC.cpp       ****     
  49:ADC.cpp       ****     SPI_CS_PORT |=(1<<SPI_CS_PIN); //set CSB high
  50:ADC.cpp       ****     _delay_ms(2);
  51:ADC.cpp       **** }
  52:ADC.cpp       **** MCP3462::~MCP3462(void){
  15               		.loc 1 52 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 0895      		ret
  23               		.cfi_endproc
  24               	.LFE10:
  26               	.global	_ZN7MCP3462D1Ev
  27               		.set	_ZN7MCP3462D1Ev,_ZN7MCP3462D2Ev
  28               	.global	_ZN7MCP346211isDataReadyEv
  30               	_ZN7MCP346211isDataReadyEv:
  31               	.LFB12:
  53:ADC.cpp       ****     
  54:ADC.cpp       **** }
  55:ADC.cpp       **** 
  56:ADC.cpp       **** bool MCP3462::isDataReady(void){
  32               		.loc 1 56 0
  33               		.cfi_startproc
  34               	.LVL1:
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 0 */
  38               	.L__stack_usage = 0
  57:ADC.cpp       ****     return 0;
  58:ADC.cpp       **** }
  39               		.loc 1 58 0
  40 0002 80E0      		ldi r24,0
  41               	.LVL2:
  42 0004 0895      		ret
  43               		.cfi_endproc
  44               	.LFE12:
  46               	.global	_ZN7MCP346213getGainedDataEv
  48               	_ZN7MCP346213getGainedDataEv:
  49               	.LFB14:
  59:ADC.cpp       **** 
  60:ADC.cpp       **** int32_t MCP3462::getDirectData(void){
  61:ADC.cpp       ****     return readADCreg();
  62:ADC.cpp       **** }
  63:ADC.cpp       **** 
  64:ADC.cpp       **** int32_t MCP3462::getGainedData(void){
  50               		.loc 1 64 0
  51               		.cfi_startproc
  52               	.LVL3:
  53               	/* prologue: function */
  54               	/* frame size = 0 */
  55               	/* stack size = 0 */
  56               	.L__stack_usage = 0
  65:ADC.cpp       ****     return 0;
  66:ADC.cpp       **** }
  57               		.loc 1 66 0
  58 0006 60E0      		ldi r22,0
  59 0008 70E0      		ldi r23,0
  60 000a CB01      		movw r24,r22
  61 000c 0895      		ret
  62               		.cfi_endproc
  63               	.LFE14:
  65               	.global	_ZN7MCP34628transmitEh
  67               	_ZN7MCP34628transmitEh:
  68               	.LFB16:
  67:ADC.cpp       **** 
  68:ADC.cpp       **** int32_t MCP3462::readADCreg(void){
  69:ADC.cpp       ****     uint8_t d=0;
  70:ADC.cpp       ****     uint16_t ADC_code=0;
  71:ADC.cpp       ****     uint32_t data=0;
  72:ADC.cpp       ****     uint8_t ch=0;
  73:ADC.cpp       ****     bool sign=false;
  74:ADC.cpp       ****     SPI_CS_PORT &=~(1<<SPI_CS_PIN); //set CSB low
  75:ADC.cpp       ****     
  76:ADC.cpp       ****     uint8_t status=transmit(SPI_ADDR|SPI_TYPE_STATIC_R|REG_ADCDATA);
  77:ADC.cpp       ****     if(status!=0x13){
  78:ADC.cpp       ****         SPI_CS_PORT |=(1<<SPI_CS_PIN); //set CSB high
  79:ADC.cpp       ****         return 0xFFFFFFFF;//Data is not ready of other error (POR)
  80:ADC.cpp       ****     }
  81:ADC.cpp       ****     
  82:ADC.cpp       ****     d=transmit(0); //CH_ID[3:0], SIGN(4 bits)
  83:ADC.cpp       ****     ch=d>>4;
  84:ADC.cpp       ****     sign=d&0x01;
  85:ADC.cpp       ****     data=d;
  86:ADC.cpp       ****     
  87:ADC.cpp       ****     d=transmit(0);//SIGN(8 bits)
  88:ADC.cpp       ****     data=(data<<8)|d;
  89:ADC.cpp       ****     
  90:ADC.cpp       ****     d=transmit(0);//DATA[15:8]
  91:ADC.cpp       ****     data=(data<<8)|d;
  92:ADC.cpp       ****     ADC_code=d;
  93:ADC.cpp       ****     
  94:ADC.cpp       ****     d=transmit(0);//DATA[7:0]
  95:ADC.cpp       ****     data=(data<<8)|d;
  96:ADC.cpp       ****     ADC_code=(ADC_code<<8)|d;;
  97:ADC.cpp       ****     
  98:ADC.cpp       ****     SPI_CS_PORT |=(1<<SPI_CS_PIN); //set CSB high
  99:ADC.cpp       ****     
 100:ADC.cpp       ****     /*if(sign){
 101:ADC.cpp       ****         return ((0x0000<<15) | ADC_code);        
 102:ADC.cpp       ****     }else{
 103:ADC.cpp       ****         return ((0x7000<<15) | ADC_code);
 104:ADC.cpp       ****     }*/
 105:ADC.cpp       ****     return data;
 106:ADC.cpp       ****     
 107:ADC.cpp       **** }
 108:ADC.cpp       **** 
 109:ADC.cpp       **** 
 110:ADC.cpp       **** uint8_t MCP3462::transmit(uint8_t d){
  69               		.loc 1 110 0
  70               		.cfi_startproc
  71               	.LVL4:
  72               	/* prologue: function */
  73               	/* frame size = 0 */
  74               	/* stack size = 0 */
  75               	.L__stack_usage = 0
 111:ADC.cpp       ****     SPDR = d;
  76               		.loc 1 111 0
  77 000e 6EBD      		out 0x2e,r22
  78               	.L5:
 112:ADC.cpp       ****     while(!(SPSR & (1<<SPIF)));
  79               		.loc 1 112 0
  80 0010 0DB4      		in __tmp_reg__,0x2d
  81 0012 07FE      		sbrs __tmp_reg__,7
  82 0014 00C0      		rjmp .L5
 113:ADC.cpp       ****     return SPDR;
  83               		.loc 1 113 0
  84 0016 8EB5      		in r24,0x2e
  85               	.LVL5:
 114:ADC.cpp       **** }
  86               		.loc 1 114 0
  87 0018 0895      		ret
  88               		.cfi_endproc
  89               	.LFE16:
  91               	.global	_ZN7MCP3462C2Ev
  93               	_ZN7MCP3462C2Ev:
  94               	.LFB7:
   4:ADC.cpp       ****     
  95               		.loc 1 4 0
  96               		.cfi_startproc
  97               	.LVL6:
  98 001a CF93      		push r28
  99               	.LCFI0:
 100               		.cfi_def_cfa_offset 3
 101               		.cfi_offset 28, -2
 102 001c DF93      		push r29
 103               	.LCFI1:
 104               		.cfi_def_cfa_offset 4
 105               		.cfi_offset 29, -3
 106               	/* prologue: function */
 107               	/* frame size = 0 */
 108               	/* stack size = 2 */
 109               	.L__stack_usage = 2
 110 001e EC01      		movw r28,r24
 111               	.LBB7:
   6:ADC.cpp       ****     PORTB=1;//MOSI, SCLK low, CSB high
 112               		.loc 1 6 0
 113 0020 86E0      		ldi r24,lo8(6)
 114               	.LVL7:
 115 0022 84B9      		out 0x4,r24
   7:ADC.cpp       ****     _delay_us(10);
 116               		.loc 1 7 0
 117 0024 81E0      		ldi r24,lo8(1)
 118 0026 85B9      		out 0x5,r24
 119               	.LVL8:
 120               	.LBB8:
 121               	.LBB9:
 122               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/lib/avr/include/util/delay.h **** 
 189:/usr/lib/avr/include/util/delay.h **** #else
 190:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/lib/avr/include/util/delay.h **** 	{
 196:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/lib/avr/include/util/delay.h **** 		{
 200:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/lib/avr/include/util/delay.h **** 		}
 204:/usr/lib/avr/include/util/delay.h **** 		return;
 205:/usr/lib/avr/include/util/delay.h **** 	}
 206:/usr/lib/avr/include/util/delay.h **** 	else
 207:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/lib/avr/include/util/delay.h **** #endif
 210:/usr/lib/avr/include/util/delay.h **** }
 211:/usr/lib/avr/include/util/delay.h **** 
 212:/usr/lib/avr/include/util/delay.h **** /**
 213:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/lib/avr/include/util/delay.h **** 
 215:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/lib/avr/include/util/delay.h **** 
 217:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/lib/avr/include/util/delay.h **** 
 220:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/lib/avr/include/util/delay.h **** 
 226:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/lib/avr/include/util/delay.h **** 
 231:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/lib/avr/include/util/delay.h **** 
 236:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/lib/avr/include/util/delay.h ****    respectively.
 240:/usr/lib/avr/include/util/delay.h **** 
 241:/usr/lib/avr/include/util/delay.h ****    \note
 242:/usr/lib/avr/include/util/delay.h **** 
 243:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/lib/avr/include/util/delay.h **** 
 253:/usr/lib/avr/include/util/delay.h ****  */
 254:/usr/lib/avr/include/util/delay.h **** void
 255:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 256:/usr/lib/avr/include/util/delay.h **** {
 257:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 258:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 262:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/usr/lib/avr/include/util/delay.h **** 
 265:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/lib/avr/include/util/delay.h **** 
 268:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/lib/avr/include/util/delay.h **** 
 271:/usr/lib/avr/include/util/delay.h **** 	#else
 272:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 273:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/usr/lib/avr/include/util/delay.h **** 	#endif
 275:/usr/lib/avr/include/util/delay.h **** 
 276:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 123               		.loc 2 276 0
 124 0028 8AE1      		ldi r24,lo8(26)
 125 002a 8A95      	1:	dec r24
 126 002c 01F4      		brne 1b
 127 002e 00C0      		rjmp .
 128               	.LVL9:
 129               	.LBE9:
 130               	.LBE8:
   9:ADC.cpp       ****     SPI_CS_PORT |=(1<<SPI_CS_PIN); //set CSB initial state to high
 131               		.loc 1 9 0
 132 0030 209A      		sbi 0x4,0
  10:ADC.cpp       ****     SPCR = (1<<SPE)|(1<<MSTR);
 133               		.loc 1 10 0
 134 0032 289A      		sbi 0x5,0
  11:ADC.cpp       **** 
 135               		.loc 1 11 0
 136 0034 80E5      		ldi r24,lo8(80)
 137 0036 8CBD      		out 0x2c,r24
  30:ADC.cpp       ****     transmit(SPI_ADDR|SPI_TYPE_INC_W|REG_CONFIG0);//Incremental write
 138               		.loc 1 30 0
 139 0038 2898      		cbi 0x5,0
  31:ADC.cpp       ****     //W CONFIG0 (0x1): 0b11100011 //sets clock to internal, no current source/sink/ADC in conversio
 140               		.loc 1 31 0
 141 003a 66E4      		ldi r22,lo8(70)
 142 003c CE01      		movw r24,r28
 143 003e 0E94 0000 		call _ZN7MCP34628transmitEh
 144               	.LVL10:
  33:ADC.cpp       ****     
 145               		.loc 1 33 0
 146 0042 63EE      		ldi r22,lo8(-29)
 147 0044 CE01      		movw r24,r28
 148 0046 0E94 0000 		call _ZN7MCP34628transmitEh
 149               	.LVL11:
  36:ADC.cpp       ****     
 150               		.loc 1 36 0
 151 004a 68E2      		ldi r22,lo8(40)
 152 004c CE01      		movw r24,r28
 153 004e 0E94 0000 		call _ZN7MCP34628transmitEh
 154               	.LVL12:
  39:ADC.cpp       ****     
 155               		.loc 1 39 0
 156 0052 6FEA      		ldi r22,lo8(-81)
 157 0054 CE01      		movw r24,r28
 158 0056 0E94 0000 		call _ZN7MCP34628transmitEh
 159               	.LVL13:
  43:ADC.cpp       ****     
 160               		.loc 1 43 0
 161 005a 60EF      		ldi r22,lo8(-16)
 162 005c CE01      		movw r24,r28
 163 005e 0E94 0000 		call _ZN7MCP34628transmitEh
 164               	.LVL14:
  46:ADC.cpp       ****     transmit(0b00000001);
 165               		.loc 1 46 0
 166 0062 67E0      		ldi r22,lo8(7)
 167 0064 CE01      		movw r24,r28
 168 0066 0E94 0000 		call _ZN7MCP34628transmitEh
 169               	.LVL15:
  47:ADC.cpp       ****     
 170               		.loc 1 47 0
 171 006a 61E0      		ldi r22,lo8(1)
 172 006c CE01      		movw r24,r28
 173 006e 0E94 0000 		call _ZN7MCP34628transmitEh
 174               	.LVL16:
  49:ADC.cpp       ****     _delay_ms(2);
 175               		.loc 1 49 0
 176 0072 289A      		sbi 0x5,0
 177               	.LVL17:
 178               	.LBB10:
 179               	.LBB11:
 187:/usr/lib/avr/include/util/delay.h **** 
 180               		.loc 2 187 0
 181 0074 8FE9      		ldi r24,lo8(3999)
 182 0076 9FE0      		ldi r25,hi8(3999)
 183 0078 0197      	1:	sbiw r24,1
 184 007a 01F4      		brne 1b
 185 007c 00C0      		rjmp .
 186 007e 0000      		nop
 187               	.LVL18:
 188               	/* epilogue start */
 189               	.LBE11:
 190               	.LBE10:
 191               	.LBE7:
  51:ADC.cpp       **** MCP3462::~MCP3462(void){
 192               		.loc 1 51 0
 193 0080 DF91      		pop r29
 194 0082 CF91      		pop r28
 195               	.LVL19:
 196 0084 0895      		ret
 197               		.cfi_endproc
 198               	.LFE7:
 200               	.global	_ZN7MCP3462C1Ev
 201               		.set	_ZN7MCP3462C1Ev,_ZN7MCP3462C2Ev
 202               	.global	_ZN7MCP346210readADCregEv
 204               	_ZN7MCP346210readADCregEv:
 205               	.LFB15:
  68:ADC.cpp       ****     uint8_t d=0;
 206               		.loc 1 68 0
 207               		.cfi_startproc
 208               	.LVL20:
 209 0086 CF92      		push r12
 210               	.LCFI2:
 211               		.cfi_def_cfa_offset 3
 212               		.cfi_offset 12, -2
 213 0088 DF92      		push r13
 214               	.LCFI3:
 215               		.cfi_def_cfa_offset 4
 216               		.cfi_offset 13, -3
 217 008a EF92      		push r14
 218               	.LCFI4:
 219               		.cfi_def_cfa_offset 5
 220               		.cfi_offset 14, -4
 221 008c FF92      		push r15
 222               	.LCFI5:
 223               		.cfi_def_cfa_offset 6
 224               		.cfi_offset 15, -5
 225 008e CF93      		push r28
 226               	.LCFI6:
 227               		.cfi_def_cfa_offset 7
 228               		.cfi_offset 28, -6
 229 0090 DF93      		push r29
 230               	.LCFI7:
 231               		.cfi_def_cfa_offset 8
 232               		.cfi_offset 29, -7
 233               	/* prologue: function */
 234               	/* frame size = 0 */
 235               	/* stack size = 6 */
 236               	.L__stack_usage = 6
 237 0092 EC01      		movw r28,r24
 238               	.LVL21:
  74:ADC.cpp       ****     
 239               		.loc 1 74 0
 240 0094 2898      		cbi 0x5,0
  76:ADC.cpp       ****     if(status!=0x13){
 241               		.loc 1 76 0
 242 0096 61E4      		ldi r22,lo8(65)
 243 0098 0E94 0000 		call _ZN7MCP34628transmitEh
 244               	.LVL22:
  77:ADC.cpp       ****         SPI_CS_PORT |=(1<<SPI_CS_PIN); //set CSB high
 245               		.loc 1 77 0
 246 009c 8331      		cpi r24,lo8(19)
 247 009e 01F0      		breq .L10
 248               	.LVL23:
 249               	.LBB14:
 250               	.LBB15:
  78:ADC.cpp       ****         return 0xFFFFFFFF;//Data is not ready of other error (POR)
 251               		.loc 1 78 0
 252 00a0 289A      		sbi 0x5,0
 253               	.LVL24:
 254 00a2 6FEF      		ldi r22,lo8(-1)
 255 00a4 7FEF      		ldi r23,lo8(-1)
 256 00a6 CB01      		movw r24,r22
 257 00a8 00C0      		rjmp .L11
 258               	.L10:
 259               	.LBE15:
 260               	.LBE14:
  82:ADC.cpp       ****     ch=d>>4;
 261               		.loc 1 82 0
 262 00aa 60E0      		ldi r22,0
 263 00ac CE01      		movw r24,r28
 264               	.LVL25:
 265 00ae 0E94 0000 		call _ZN7MCP34628transmitEh
 266               	.LVL26:
 267 00b2 C82E      		mov r12,r24
 268               	.LVL27:
  87:ADC.cpp       ****     data=(data<<8)|d;
 269               		.loc 1 87 0
 270 00b4 60E0      		ldi r22,0
 271 00b6 CE01      		movw r24,r28
 272 00b8 0E94 0000 		call _ZN7MCP34628transmitEh
 273               	.LVL28:
  88:ADC.cpp       ****     
 274               		.loc 1 88 0
 275 00bc D12C      		mov r13,__zero_reg__
 276 00be E12C      		mov r14,__zero_reg__
 277 00c0 F12C      		mov r15,__zero_reg__
 278 00c2 FE2C      		mov r15,r14
 279 00c4 ED2C      		mov r14,r13
 280 00c6 DC2C      		mov r13,r12
 281 00c8 CC24      		clr r12
 282               	.LVL29:
 283 00ca C82A      		or r12,r24
 284               	.LVL30:
  90:ADC.cpp       ****     data=(data<<8)|d;
 285               		.loc 1 90 0
 286 00cc 60E0      		ldi r22,0
 287 00ce CE01      		movw r24,r28
 288               	.LVL31:
 289 00d0 0E94 0000 		call _ZN7MCP34628transmitEh
 290               	.LVL32:
  91:ADC.cpp       ****     ADC_code=d;
 291               		.loc 1 91 0
 292 00d4 FE2C      		mov r15,r14
 293 00d6 ED2C      		mov r14,r13
 294 00d8 DC2C      		mov r13,r12
 295 00da CC24      		clr r12
 296               	.LVL33:
 297 00dc C82A      		or r12,r24
 298               	.LVL34:
  94:ADC.cpp       ****     data=(data<<8)|d;
 299               		.loc 1 94 0
 300 00de 60E0      		ldi r22,0
 301 00e0 CE01      		movw r24,r28
 302               	.LVL35:
 303 00e2 0E94 0000 		call _ZN7MCP34628transmitEh
 304               	.LVL36:
  95:ADC.cpp       ****     ADC_code=(ADC_code<<8)|d;;
 305               		.loc 1 95 0
 306 00e6 FE2C      		mov r15,r14
 307 00e8 ED2C      		mov r14,r13
 308 00ea DC2C      		mov r13,r12
 309 00ec CC24      		clr r12
 310               	.LVL37:
  98:ADC.cpp       ****     
 311               		.loc 1 98 0
 312 00ee 289A      		sbi 0x5,0
 105:ADC.cpp       ****     
 313               		.loc 1 105 0
 314 00f0 A701      		movw r20,r14
 315 00f2 9601      		movw r18,r12
 316 00f4 282B      		or r18,r24
 317 00f6 CA01      		movw r24,r20
 318 00f8 B901      		movw r22,r18
 319               	.LVL38:
 320               	.L11:
 321               	/* epilogue start */
 107:ADC.cpp       **** 
 322               		.loc 1 107 0
 323 00fa DF91      		pop r29
 324 00fc CF91      		pop r28
 325               	.LVL39:
 326 00fe FF90      		pop r15
 327 0100 EF90      		pop r14
 328 0102 DF90      		pop r13
 329 0104 CF90      		pop r12
 330 0106 0895      		ret
 331               		.cfi_endproc
 332               	.LFE15:
 334               	.global	_ZN7MCP346213getDirectDataEv
 336               	_ZN7MCP346213getDirectDataEv:
 337               	.LFB13:
  60:ADC.cpp       ****     return readADCreg();
 338               		.loc 1 60 0
 339               		.cfi_startproc
 340               	.LVL40:
 341               	/* prologue: function */
 342               	/* frame size = 0 */
 343               	/* stack size = 0 */
 344               	.L__stack_usage = 0
  61:ADC.cpp       **** }
 345               		.loc 1 61 0
 346 0108 0C94 0000 		jmp _ZN7MCP346210readADCregEv
 347               	.LVL41:
 348               		.cfi_endproc
 349               	.LFE13:
 351               	.Letext0:
 352               		.file 3 "/usr/lib/avr/include/stdint.h"
 353               		.file 4 "ADC.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ADC.cpp
     /tmp/ccO6Ddms.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccO6Ddms.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccO6Ddms.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccO6Ddms.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccO6Ddms.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccO6Ddms.s:12     .text:0000000000000000 _ZN7MCP3462D2Ev
     /tmp/ccO6Ddms.s:12     .text:0000000000000000 _ZN7MCP3462D1Ev
     /tmp/ccO6Ddms.s:30     .text:0000000000000002 _ZN7MCP346211isDataReadyEv
     /tmp/ccO6Ddms.s:48     .text:0000000000000006 _ZN7MCP346213getGainedDataEv
     /tmp/ccO6Ddms.s:67     .text:000000000000000e _ZN7MCP34628transmitEh
     /tmp/ccO6Ddms.s:93     .text:000000000000001a _ZN7MCP3462C2Ev
     /tmp/ccO6Ddms.s:93     .text:000000000000001a _ZN7MCP3462C1Ev
     /tmp/ccO6Ddms.s:204    .text:0000000000000086 _ZN7MCP346210readADCregEv
     /tmp/ccO6Ddms.s:336    .text:0000000000000108 _ZN7MCP346213getDirectDataEv

NO UNDEFINED SYMBOLS
